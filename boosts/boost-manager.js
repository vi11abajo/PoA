// ‚≠ê BOOST MANAGER
// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤-–±—É—Å—Ç–µ—Ä–æ–≤

class BoostManager {
    constructor() {
        this.activeBoosts = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
        this.droppingBoosts = [];      // –ü–∞–¥–∞—é—â–∏–µ –±–æ–Ω—É—Å—ã
        this.speedTamerStacks = 0;     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö Speed Tamer
        this.nextBoostId = 1;          // ID –¥–ª—è –±–æ–Ω—É—Å–æ–≤
        this.imageCache = new Map();   // –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–Ω—É—Å–æ–≤
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.update = this.update.bind(this);
        this.render = this.render.bind(this);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
        this.loadBoostImages();
    }

    // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    detectImagesPath() {
        const currentPath = window.location.pathname;
        if (currentPath.includes('/tournament/') || currentPath.includes('\\tournament\\')) {
            return '../images';
        }
        return 'images';
    }

    // üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–Ω—É—Å–æ–≤
    loadBoostImages() {
        const imagesBasePath = this.detectImagesPath();
        const boostImageMap = {
            'RAPID_FIRE': 'rapidFire.png',
            'SHIELD_BARRIER': 'shieldBarrier.png', 
            'SCORE_MULTIPLIER': 'scoreMultiplier.png',
            'POINTS_FREEZE': 'pointsFreeze.png',
            'MULTI_SHOT': 'multiShot.png',
            'HEALTH_BOOST': 'healthBoost.png',
            'PIERCING_BULLETS': 'piercingBullets.png',
            'INVINCIBILITY': 'invincibility.png',
            'GRAVITY_WELL': 'gravityWell.png',
            'RICOCHET': 'ricochet.png',
            'RANDOM_CHAOS': 'randomChaos.png',
            'ICE_FREEZE': 'iceFreeze.png',
            'AUTO_TARGET': 'auto-target.png',
            'COIN_SHOWER': 'coinShower.png',
            'WAVE_BLAST': 'waveBlast.png',
            'SPEED_TAMER': 'speedTamer.png'
        };

        for (const [boostType, filename] of Object.entries(boostImageMap)) {
            const img = new Image();
            img.onload = () => {
                // Boost image loaded successfully
                this.imageCache.set(boostType, img);
            };
            img.onerror = () => {
                console.warn(`‚ùå Failed to load boost image: ${boostType} (${filename}) - using emoji fallback`);
                // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
            };
            img.src = `${imagesBasePath}/boosts/${filename}`;
        }
    }

    // üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    generateRandomBoost() {
        const rand = Math.random() * 100;
        let selectedRarity;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
        if (rand <= BOOST_CONSTANTS.RARITY.CHANCES.LEGENDARY) {
            selectedRarity = 'LEGENDARY';
        } else if (rand <= BOOST_CONSTANTS.RARITY.CHANCES.LEGENDARY + BOOST_CONSTANTS.RARITY.CHANCES.EPIC) {
            selectedRarity = 'EPIC';
        } else if (rand <= BOOST_CONSTANTS.RARITY.CHANCES.LEGENDARY + BOOST_CONSTANTS.RARITY.CHANCES.EPIC + BOOST_CONSTANTS.RARITY.CHANCES.RARE) {
            selectedRarity = 'RARE';
        } else {
            selectedRarity = 'COMMON';
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        const availableBoosts = BOOST_CONSTANTS.RARITY.DISTRIBUTION[selectedRarity];
        
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ COMMON
        if (!availableBoosts || availableBoosts.length === 0) {
            console.error(`‚ö†Ô∏è No boosts available for rarity ${selectedRarity}, falling back to COMMON`);
            const commonBoosts = BOOST_CONSTANTS.RARITY.DISTRIBUTION['COMMON'];
            const randomIndex = Math.floor(Math.random() * commonBoosts.length);
            const selectedBoost = commonBoosts[randomIndex];
            
            if (BOOST_CONSTANTS.DEBUG_MODE) {
                // Fallback to COMMON rarity
            }
            return selectedBoost;
        }
        
        const randomIndex = Math.floor(Math.random() * availableBoosts.length);
        const selectedBoost = availableBoosts[randomIndex];
        
        if (BOOST_CONSTANTS.DEBUG_MODE) {
            // Boost selected by rarity system
        }
        return selectedBoost;
    }

    // üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–¥–∞—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
    createDroppingBoost(x, y, type = null) {
        const boostType = type || this.generateRandomBoost();
        
        const boost = {
            id: this.nextBoostId++,
            type: boostType,
            x: x,
            y: y,
            width: BOOST_CONSTANTS.SPAWN.SIZE,
            height: BOOST_CONSTANTS.SPAWN.SIZE,
            speed: BOOST_CONSTANTS.SPAWN.FALL_SPEED,
            lifetime: BOOST_CONSTANTS.SPAWN.LIFETIME,
            age: 0,
            rarity: this.getBoostRarity(boostType),
            glowPhase: 0 // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–≤–µ—á–µ–Ω–∏—è
        };

        this.droppingBoosts.push(boost);
        return boost;
    }

    // üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –±–æ–Ω—É—Å–∞
    getBoostRarity(boostType) {
        for (const [rarity, boosts] of Object.entries(BOOST_CONSTANTS.RARITY.DISTRIBUTION)) {
            if (boosts.includes(boostType)) {
                return rarity;
            }
        }
        return 'COMMON';
    }

    // üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–Ω—É—Å–∞
    activateBoost(boostType) {
        // üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É—Å–∏–ª–µ–Ω–∏—è
        if (window.soundManager) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø —É—Å–∏–ª–µ–Ω–∏—è –≤ camelCase –¥–ª—è –∑–≤—É–∫–∞
            const boostNameForSound = boostType.toLowerCase()
                .split('_')
                .map((word, index) => index === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1))
                .join('');
            soundManager.playBoostSound(boostNameForSound, 0.7);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if (boostType === 'SHIELD_BARRIER' && this.isBoostActive('SHIELD_BARRIER')) {
            return false; // –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –Ω–æ–≤—ã–π —â–∏—Ç –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä—ã–π
        }

        if (boostType === 'HEALTH_BOOST') {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            if (!this.healthBoostProcessed) {
                this.healthBoostProcessed = true;
                this.applyHealthBoost();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => { this.healthBoostProcessed = false; }, 100);
            }
            return true;
        }

        if (boostType === 'COIN_SHOWER') {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            if (!this.coinShowerProcessed) {
                this.coinShowerProcessed = true;
                this.applyCoinShower();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => { this.coinShowerProcessed = false; }, 100);
            }
            return true;
        }

        if (boostType === 'WAVE_BLAST') {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            if (!this.waveBlastProcessed) {
                this.waveBlastProcessed = true;
                this.applyWaveBlast();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => { this.waveBlastProcessed = false; }, 100);
            }
            return true;
        }

        if (boostType === 'SPEED_TAMER') {
            this.applySpeedTamer();
            return true;
        }

        if (boostType === 'RANDOM_CHAOS') {
            return this.applyRandomChaos();
        }

        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å —Ç–∞–π–º–µ—Ä–æ–º
        const duration = BOOST_CONSTANTS.DURATIONS[boostType];
        if (duration > 0 || duration === -1) { // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã (-1)
            // –ï—Å–ª–∏ –±–æ–Ω—É—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            const boostData = {
                type: boostType,
                duration: duration,
                startTime: Date.now(),
                // –î–ª—è Shield Barrier –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤
                hitsBlocked: boostType === 'SHIELD_BARRIER' ? 0 : undefined
            };
            
            // –î–ª—è GRAVITY_WELL —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥–µ—Ü –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
            if (boostType === 'GRAVITY_WELL' && window.player && window.canvas) {
                const minDistance = 100; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞
                const margin = 50; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
                let attempts = 0;
                let centerX, centerY;
                
                // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ (–º–∞–∫—Å–∏–º—É–º 20 –ø–æ–ø—ã—Ç–æ–∫)
                do {
                    centerX = margin + Math.random() * (window.canvas.width - 2 * margin);
                    centerY = margin + Math.random() * (window.canvas.height - 2 * margin);
                    
                    const playerCenterX = window.player.x + window.player.width / 2;
                    const playerCenterY = window.player.y + window.player.height / 2;
                    const distanceToPlayer = Math.sqrt(
                        (centerX - playerCenterX) ** 2 + (centerY - playerCenterY) ** 2
                    );
                    
                    if (distanceToPlayer >= minDistance) {
                        break;
                    }
                    attempts++;
                } while (attempts < 20);
                
                boostData.centerX = centerX;
                boostData.centerY = centerY;
                // Gravity Well activated at safe distance from player
            }
            
            this.activeBoosts.set(boostType, boostData);
            
            if (BOOST_CONSTANTS.DEBUG_MODE) {
                // Boost activated successfully
            }
            return true;
        }

        return false;
    }

    // üíö –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
    applyHealthBoost() {
        // Starting heal process
        
        // –í –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è lives, –∞ –Ω–µ playerHealth
        const maxLives = window.MAX_LIVES || 100; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ –∏–≥—Ä—ã
        const healAmount = BOOST_CONSTANTS.EFFECTS.HEALTH_BOOST.heal;
        
        if (window.lives !== undefined && window.lives < maxLives) {
            const oldLives = window.lives;
            window.lives = Math.min(maxLives, window.lives + healAmount);
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
            if (typeof window.syncLives === 'function') {
                window.syncLives(window.lives);
            }
            
            // Health Boost: Lives restored
            
            // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            this.createHealEffect();
        } else {
            // Health Boost: Lives already at maximum
        }
    }

    // üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–æ–∂–¥—è
    applyCoinShower() {
        const oldScore = window.score;
        const bonusPoints = Math.floor(window.score * BOOST_CONSTANTS.EFFECTS.COIN_SHOWER.percentage);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        window.score += bonusPoints;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞
        if (window.syncScore) {
            window.syncScore(window.score);
        }
        
        // Coin Shower: Added bonus points
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        this.createCoinEffect(bonusPoints);
    }

    // üåä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –≤–∑—Ä—ã–≤–∞
    applyWaveBlast() {
        if (window.invaders && window.invaders.length > 0) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Ä—è–¥ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
            let bottomRowY = -1;
            let bottomRow = -1;
            
            // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
            for (const invader of window.invaders) {
                if (invader.alive && invader.y > bottomRowY) {
                    bottomRowY = invader.y;
                    bottomRow = invader.row;
                }
            }
            
            // –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —Å —ç—Ç–æ–π Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π (–≤–µ—Å—å –Ω–∏–∂–Ω–∏–π —Ä—è–¥)
            if (bottomRowY >= 0) {
                const tolerance = 10; // –î–æ–ø—É—Å–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                let destroyedCount = 0;
                
                for (const invader of window.invaders) {
                    if (invader.alive && Math.abs(invader.y - bottomRowY) <= tolerance) {
                        invader.alive = false;
                        destroyedCount++;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
                        let points = 10; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if (window.getInvaderScore) {
                            points = window.getInvaderScore(invader.row);
                        } else {
                            // Fallback —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –ø–æ —Ä—è–¥–∞–º
                            const rowPoints = [40, 30, 20, 15, 10]; // –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫ –Ω–∏–∂–Ω–µ–º—É
                            points = rowPoints[invader.row] || 10;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                        const oldScore = window.score;
                        window.score += points;
                        
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞
                        if (window.syncScore) {
                            window.syncScore(window.score);
                        }
                        
                        // Wave Blast: Added points for destroyed enemy
                        
                        // Score updated after Wave Blast
                    }
                }
                
                // Wave Blast destroyed enemies
                
                // Wave Blast completed
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã
        this.createWaveEffect();
    }

    // üêå –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    applySpeedTamer() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ 500–º—Å
        const now = Date.now();
        if (this.lastSpeedTamerActivation && (now - this.lastSpeedTamerActivation) < 500) {
            return;
        }
        this.lastSpeedTamerActivation = now;
        
        this.speedTamerStacks++;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º –∏ –±–æ—Å—Å–∞–º
        this.updateEnemySpeeds();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.updateSpeedTamerUI();
    }

    // üé≤ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–∞–æ—Å–∞
    applyRandomChaos() {
        const availableBoosts = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ Random Chaos
        for (const boosts of Object.values(BOOST_CONSTANTS.RARITY.DISTRIBUTION)) {
            for (const boost of boosts) {
                if (boost !== 'RANDOM_CHAOS') {
                    availableBoosts.push(boost);
                }
            }
        }

        if (availableBoosts.length === 0) return false;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å
        const randomBoost = availableBoosts[Math.floor(Math.random() * availableBoosts.length)];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 10 –¥–æ 15 —Å–µ–∫—É–Ω–¥ (10000-15000 –º—Å)
        const randomDuration = Math.floor(Math.random() * (15000 - 10000 + 1)) + 10000;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–∞
        const originalDuration = BOOST_CONSTANTS.DURATIONS[randomBoost];
        BOOST_CONSTANTS.DURATIONS[randomBoost] = randomDuration;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å
        const result = this.activateBoost(randomBoost);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        BOOST_CONSTANTS.DURATIONS[randomBoost] = originalDuration;
        
        return result;
    }

    // ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–Ω—É—Å–∞
    isBoostActive(boostType) {
        return this.activeBoosts.has(boostType);
    }

    // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    getActiveBoost(boostType) {
        return this.activeBoosts.get(boostType);
    }

    // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
    update(deltaTime) {
        this.updateDroppingBoosts(deltaTime);
        this.updateActiveBoosts(deltaTime);
    }

    // üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–¥–∞—é—â–∏—Ö –±–æ–Ω—É—Å–æ–≤
    updateDroppingBoosts(deltaTime) {
        for (let i = this.droppingBoosts.length - 1; i >= 0; i--) {
            const boost = this.droppingBoosts[i];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            boost.y += boost.speed;
            boost.age += deltaTime;
            boost.glowPhase += deltaTime * 0.005; // –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            if (boost.age >= boost.lifetime || boost.y > window.canvas.height) {
                this.droppingBoosts.splice(i, 1);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º
            if (this.checkBoostCollision(boost) && !boost.collected) {
                boost.collected = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                // Activating boost
                
                if (this.activateBoost(boost.type)) {
                    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥–±–æ—Ä–∞
                    this.createPickupEffect(boost);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º easterEggManager –æ –ø–æ–¥–±–æ—Ä–µ –±–æ–Ω—É—Å–∞
                    if (window.easterEggManager) {
                        window.easterEggManager.onBoostPickup();
                    }

                    // Boost activated successfully
                } else {
                    // Boost activation failed
                }
                // –£–¥–∞–ª—è–µ–º –±–æ–Ω—É—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                this.droppingBoosts.splice(i, 1);
                i--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            }
        }
    }

    // ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    updateActiveBoosts(deltaTime) {
        for (const [boostType, boost] of this.activeBoosts) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã (-1)
            if (boost.duration === -1) {
                continue;
            }
            
            const elapsed = Date.now() - boost.startTime;
            
            if (elapsed >= boost.duration) {
                this.deactivateBoost(boostType);
            }
        }
    }

    // üö´ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–Ω—É—Å–∞
    deactivateBoost(boostType) {
        this.activeBoosts.delete(boostType);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–ª—å
        if (boostType === 'MULTI_SHOT') {
            this.resetMultiShotBullets();
        }
        
        if (boostType === 'AUTO_TARGET') {
            this.resetAutoTargetBullets();
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è
        this.createExpireEffect(boostType);
    }

    // üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –±–æ–Ω—É—Å–æ–º
    checkBoostCollision(boost) {
        if (!window.player) {
            // window.player not available for collision check
            return false;
        }

        const collision = boost.x < window.player.x + window.player.width &&
                         boost.x + boost.width > window.player.x &&
                         boost.y < window.player.y + window.player.height &&
                         boost.y + boost.height > window.player.y;

        // Boost collision detected

        return collision;
    }

    // üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤
    render(ctx) {
        this.renderDroppingBoosts(ctx);
        this.renderActiveBoostsUI(ctx);
        this.renderSpeedTamerUI(ctx);
    }

    // üì¶ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–¥–∞—é—â–∏—Ö –±–æ–Ω—É—Å–æ–≤
    renderDroppingBoosts(ctx) {
        for (const boost of this.droppingBoosts) {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined —Ç–∏–ø–æ–≤
            if (!boost.type || !BOOST_CONSTANTS.INFO[boost.type]) {
                console.error('‚ùå Invalid boost type:', boost.type);
                continue;
            }
            
            const info = BOOST_CONSTANTS.INFO[boost.type];
            const rarityColor = BOOST_CONSTANTS.RARITY.COLORS[boost.rarity];
            const image = this.imageCache.get(boost.type);

            ctx.save();
            
            if (image && image.complete && image.naturalHeight !== 0) {
                // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –±–µ–∑ —Ä–∞–º–æ–∫ –∏ —Å–≤–µ—á–µ–Ω–∏—è
                
                // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                const aspectRatio = image.width / image.height;
                let drawWidth = boost.width;
                let drawHeight = boost.height;
                
                if (aspectRatio > 1) {
                    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ, —á–µ–º –≤—ã—Å–æ–∫–æ
                    drawHeight = drawWidth / aspectRatio;
                } else {
                    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ, —á–µ–º —à–∏—Ä–æ–∫–æ
                    drawWidth = drawHeight * aspectRatio;
                }
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const drawX = boost.x + (boost.width - drawWidth) / 2;
                const drawY = boost.y + (boost.height - drawHeight) / 2;
                
                ctx.drawImage(image, drawX, drawY, drawWidth, drawHeight);
            } else {
                // Fallback –∫ —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                ctx.font = `${boost.width * 0.8}px Arial`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                ctx.shadowBlur = 3;
                ctx.shadowColor = rarityColor;
                ctx.shadowOffsetX = 1;
                ctx.shadowOffsetY = 1;
                
                ctx.fillStyle = '#ffffff';
                ctx.fillText(
                    info.icon, 
                    boost.x + boost.width / 2, 
                    boost.y + boost.height / 2
                );
            }
            
            ctx.restore();
        }
    }

    // üñ•Ô∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ - HTML –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ –æ—Ç –∏–≥—Ä—ã
    renderActiveBoostsUI(ctx) {
        const activeBoosts = Array.from(this.activeBoosts.entries());
        const panel = document.getElementById('boostPanel');
        const content = document.getElementById('boostPanelContent');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if (!panel || !content) {
            return;
        }
        
        if (activeBoosts.length === 0) {
            panel.classList.remove('show');
            return;
        }

        panel.classList.add('show');
        content.innerHTML = '';

        for (const [boostType, boost] of activeBoosts) {
            const info = BOOST_CONSTANTS.INFO[boostType];
            const rarity = this.getBoostRarity(boostType);
            const rarityColor = BOOST_CONSTANTS.RARITY.COLORS[rarity];

            const boostItem = document.createElement('div');
            boostItem.className = 'boost-item';

            // –ò–∫–æ–Ω–∫–∞
            const icon = document.createElement('div');
            icon.className = 'boost-icon';
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —ç–º–æ–¥–∑–∏
            const image = this.imageCache.get(boostType);
            if (image && image.complete && image.naturalHeight > 0) {
                icon.innerHTML = '';
                const img = document.createElement('img');
                img.src = image.src;
                img.style.width = '32px';
                img.style.height = '32px';
                img.style.objectFit = 'contain';
                icon.appendChild(img);
            } else {
                // Fallback –∫ —ç–º–æ–¥–∑–∏
                icon.textContent = info ? info.icon : '‚≠ê';
                icon.style.color = rarityColor;
            }

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–µ
            const boostInfo = document.createElement('div');
            boostInfo.className = 'boost-info';

            // –ù–∞–∑–≤–∞–Ω–∏–µ
            const name = document.createElement('div');
            name.className = 'boost-name';
            name.textContent = info.name;
            name.style.color = rarityColor;

            // –†–µ–¥–∫–æ—Å—Ç—å
            const rarityEl = document.createElement('div');
            rarityEl.className = 'boost-rarity';
            rarityEl.textContent = rarity.charAt(0) + rarity.slice(1).toLowerCase();
            rarityEl.style.color = rarityColor;

            // –¢–∞–π–º–µ—Ä
            const timer = document.createElement('div');
            timer.className = 'boost-timer';

            if (boost.duration > 0) {
                const remaining = Math.max(0, boost.duration - (Date.now() - boost.startTime));
                const remainingSeconds = Math.ceil(remaining / 1000);
                const minutes = Math.floor(remainingSeconds / 60);
                const seconds = remainingSeconds % 60;
                const timeStr = minutes > 0 ? `${minutes}:${seconds.toString().padStart(2, '0')}` : `${seconds}s`;

                timer.textContent = `‚è∞ ${timeStr}`;
                timer.style.color = remainingSeconds <= 5 ? '#ff4444' : '#ffffff';

                // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                const progress = remaining / boost.duration;
                const progressBar = document.createElement('div');
                progressBar.className = 'boost-progress';
                
                const progressFill = document.createElement('div');
                progressFill.className = 'boost-progress-bar';
                if (remainingSeconds <= 5) progressFill.classList.add('critical');
                progressFill.style.width = `${progress * 100}%`;
                
                progressBar.appendChild(progressFill);
                boostInfo.appendChild(progressBar);

            } else if (boost.duration === -1) {
                if (boostType === 'SHIELD_BARRIER') {
                    const hitsBlocked = boost.hitsBlocked || 0;
                    const remaining = BOOST_CONSTANTS.EFFECTS.SHIELD_BARRIER.hits - hitsBlocked;

                    timer.textContent = `üõ°Ô∏è ${remaining}/3 blocks`;
                    timer.style.color = remaining <= 1 ? '#ff4444' : '#ffffff';

                    // –ë–ª–æ–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ
                    const blocksContainer = document.createElement('div');
                    blocksContainer.className = 'boost-blocks';
                    
                    for (let i = 0; i < 3; i++) {
                        const block = document.createElement('div');
                        block.className = 'boost-block';
                        if (i >= remaining) block.classList.add('used');
                        blocksContainer.appendChild(block);
                    }
                    
                    boostInfo.appendChild(blocksContainer);
                } else {
                    timer.textContent = '‚ôæÔ∏è Permanent';
                    timer.style.color = '#00ff88';
                }
            }

            boostInfo.appendChild(name);
            boostInfo.appendChild(rarityEl);
            boostInfo.appendChild(timer);

            boostItem.appendChild(icon);
            boostItem.appendChild(boostInfo);
            content.appendChild(boostItem);
        }
    }

    // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML –ø–∞–Ω–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    updateBoostPanel() {
        const panel = document.getElementById('boostPanel');
        if (!panel || !panel.classList.contains('show')) return;

        const activeBoosts = Array.from(this.activeBoosts.entries());
        const content = document.getElementById('boostPanelContent');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if (!content) return;
        
        const boostItems = content.querySelectorAll('.boost-item');

        boostItems.forEach((item, index) => {
            if (index >= activeBoosts.length) return;

            const [boostType, boost] = activeBoosts[index];
            const timer = item.querySelector('.boost-timer');
            const progressBar = item.querySelector('.boost-progress-bar');
            const blocksContainer = item.querySelector('.boost-blocks');

            if (boost.duration > 0) {
                const remaining = Math.max(0, boost.duration - (Date.now() - boost.startTime));
                const remainingSeconds = Math.ceil(remaining / 1000);
                const minutes = Math.floor(remainingSeconds / 60);
                const seconds = remainingSeconds % 60;
                const timeStr = minutes > 0 ? `${minutes}:${seconds.toString().padStart(2, '0')}` : `${seconds}s`;

                timer.textContent = `‚è∞ ${timeStr}`;
                timer.style.color = remainingSeconds <= 5 ? '#ff4444' : '#ffffff';

                if (progressBar) {
                    const progress = remaining / boost.duration;
                    progressBar.style.width = `${progress * 100}%`;
                    if (remainingSeconds <= 5) {
                        progressBar.classList.add('critical');
                    } else {
                        progressBar.classList.remove('critical');
                    }
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–æ–Ω—É—Å—ã
                if (remainingSeconds <= 0) {
                    this.renderActiveBoostsUI(null); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
                }

            } else if (boost.duration === -1 && boostType === 'SHIELD_BARRIER') {
                const hitsBlocked = boost.hitsBlocked || 0;
                const remaining = BOOST_CONSTANTS.EFFECTS.SHIELD_BARRIER.hits - hitsBlocked;

                timer.textContent = `üõ°Ô∏è ${remaining}/3 blocks`;
                timer.style.color = remaining <= 1 ? '#ff4444' : '#ffffff';

                if (blocksContainer) {
                    const blocks = blocksContainer.querySelectorAll('.boost-block');
                    blocks.forEach((block, i) => {
                        if (i >= remaining) {
                            block.classList.add('used');
                        } else {
                            block.classList.remove('used');
                        }
                    });
                }
            }
        });
    }

    // üêå –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI Speed Tamer
    renderSpeedTamerUI(ctx) {
        if (this.speedTamerStacks > 0) {
            const x = 10;
            const y = window.canvas.height - 60;

            // –£–±—Ä–∞–ª–∏ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π

            // –ò–∫–æ–Ω–∫–∞ —É–ª–∏—Ç–∫–∏ —Å –æ–±–≤–æ–¥–∫–æ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            ctx.font = '24px Arial';
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';
            ctx.lineWidth = 3;
            ctx.strokeText('üêå', x + 10, y + 25);
            ctx.fillStyle = '#8844aa';
            ctx.fillText('üêå', x + 10, y + 25);

            // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å –æ–±–≤–æ–¥–∫–æ–π
            if (this.speedTamerStacks > 1) {
                ctx.font = '16px Arial';
                ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';
                ctx.lineWidth = 2;
                ctx.strokeText(`x${this.speedTamerStacks}`, x + 40, y + 25);
                ctx.fillStyle = '#ffffff';
                ctx.fillText(`x${this.speedTamerStacks}`, x + 40, y + 25);
            }
        }
    }

    // üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    createHealEffect() {
        // –°–æ–∑–¥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—Ü–µ–ª–µ–Ω–∏—è –≤–æ–∑–ª–µ –∏–≥—Ä–æ–∫–∞
        if (window.player && window.boostEffects) {
            window.boostEffects.createHealthBoostEffect(
                window.player.x + window.player.width / 2,
                window.player.y + window.player.height / 2
            );
        }
    }

    createCoinEffect(points) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–Ω–µ—Ç
    }

    createWaveEffect() {
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞
        if (window.player && window.boostEffects) {
            window.boostEffects.createWaveBlastEffect(
                window.player.x + window.player.width / 2,
                window.player.y + window.player.height / 2
            );
        }
    }

    createPickupEffect(boost) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–¥–±–æ—Ä–∞
    }

    createExpireEffect(boostType) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    }

    updateEnemySpeeds() {
        // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ game.js - —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        // SPEED_TAMER: Speed calculation delegated to game.js
    }

    updateSpeedTamerUI() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Speed Tamer
    }

    // üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    clearForNewLevel() {
        // –û—á–∏—â–∞–µ–º –ø–∞–¥–∞—é—â–∏–µ –±–æ–Ω—É—Å—ã
        this.droppingBoosts = [];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–Ω—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        const persistentBoosts = new Map();
        
        for (const [boostType, boost] of this.activeBoosts) {
            // Speed Tamer –∏ Shield Barrier —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
            if (boostType === 'SPEED_TAMER' || boostType === 'SHIELD_BARRIER') {
                persistentBoosts.set(boostType, boost);
            }
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –≤—Ä–µ–º—è
            else if (boost.duration > 0) {
                const elapsed = Date.now() - boost.startTime;
                if (elapsed < boost.duration) {
                    persistentBoosts.set(boostType, boost);
                }
            }
        }

        this.activeBoosts = persistentBoosts;
    }

    // üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    canStartNextLevel() {
        return this.droppingBoosts.length === 0;
    }

    // üé® –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    drawRoundRect(ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
    }

    // üî• –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ MULTI_SHOT –¥–ª—è –≤—Å–µ—Ö –ø—É–ª—å
    resetMultiShotBullets() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É–ª—å –≤ –æ–±—ä–µ–∫—Ç–Ω–æ–º –ø—É–ª–µ
        if (window.performanceOptimizer && window.performanceOptimizer.pools) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É–ª—ã –ø—É–ª—å
            const poolNames = ['bullets', 'playerBullets'];
            for (const poolName of poolNames) {
                if (window.performanceOptimizer.pools[poolName]) {
                    const bullets = window.performanceOptimizer.pools[poolName];
                    for (let bullet of bullets) {
                        if (bullet && bullet.multiShot) {
                            bullet.multiShot = false;
                            bullet.vx = 0;
                            bullet.vy = -Math.abs(bullet.speed || 5); // –í—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö
                            bullet.autoTarget = false; // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
                            delete bullet.originalVx;
                            delete bullet.originalVy;
                        }
                    }
                }
            }
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –ø—É–ª—å
        if (window.bullets) {
            for (let bullet of window.bullets) {
                if (bullet && bullet.multiShot) {
                    bullet.multiShot = false;
                    bullet.vx = 0;
                    bullet.vy = -Math.abs(bullet.speed || 5); // –í—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö
                    bullet.autoTarget = false; // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
                    delete bullet.originalVx;
                    delete bullet.originalVy;
                }
            }
        }

        // MULTI_SHOT —Å—Ç–∞—Ç—É—Å –ø—É–ª—å —Å–±—Ä–æ—à–µ–Ω
    }

    // üéØ –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ AUTO_TARGET –¥–ª—è –≤—Å–µ—Ö –ø—É–ª—å
    resetAutoTargetBullets() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É–ª—å –≤ –æ–±—ä–µ–∫—Ç–Ω–æ–º –ø—É–ª–µ
        if (window.performanceOptimizer && window.performanceOptimizer.pools) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É–ª—ã –ø—É–ª—å
            const poolNames = ['bullets', 'playerBullets'];
            for (const poolName of poolNames) {
                if (window.performanceOptimizer.pools[poolName]) {
                    const bullets = window.performanceOptimizer.pools[poolName];
                    for (let bullet of bullets) {
                        if (bullet && bullet.autoTarget) {
                            bullet.autoTarget = false;
                            bullet.vx = 0;
                            bullet.vy = -Math.abs(bullet.speed || 5); // –í—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö
                            bullet.multiShot = false; // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
                            delete bullet.originalVx;
                            delete bullet.originalVy;
                        }
                    }
                }
            }
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –ø—É–ª—å
        if (window.bullets) {
            for (let bullet of window.bullets) {
                if (bullet && bullet.autoTarget) {
                    bullet.autoTarget = false;
                    bullet.vx = 0;
                    bullet.vy = -Math.abs(bullet.speed || 5); // –í—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö
                    bullet.multiShot = false; // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
                    delete bullet.originalVx;
                    delete bullet.originalVy;
                }
            }
        }

        // AUTO_TARGET —Å—Ç–∞—Ç—É—Å –ø—É–ª—å —Å–±—Ä–æ—à–µ–Ω
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.boostManager = new BoostManager();