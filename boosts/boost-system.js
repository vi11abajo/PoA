// ‚≠ê BOOST SYSTEM
// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤-–±—É—Å—Ç–µ—Ä–æ–≤

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤
function initializeBoostSystem() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!window.BOOST_CONSTANTS) {
        console.error('BOOST_CONSTANTS not loaded');
        return false;
    }

    if (!window.boostManager) {
        console.error('BoostManager not loaded');
        return false;
    }

    if (!window.boostEffects) {
        console.error('BoostEffects not loaded');
        return false;
    }

    if (!window.boostIntegration) {
        console.error('BoostIntegration not loaded');
        return false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    window.boostIntegration.initialize();

    return true;
}

// üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∏–∑ –∏–≥—Ä—ã

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫—Ä–∞–±–∞)
function tryCreateBoost(x, y) {
    const roll = Math.random();
    const dropChance = BOOST_CONSTANTS.SPAWN.DROP_CHANCE;
    
    if (roll < dropChance && window.boostManager) {
        const boost = window.boostManager.createDroppingBoost(x, y);
        return boost;
    }
    
    return null;
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
function createSpecificBoost(x, y, boostType) {
    if (window.boostManager) {
        return window.boostManager.createDroppingBoost(x, y, boostType);
    }
    return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–Ω—É—Å–∞
function isBoostActive(boostType) {
    return window.boostManager ? window.boostManager.isBoostActive(boostType) : false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
function getActiveBoost(boostType) {
    return window.boostManager ? window.boostManager.getActiveBoost(boostType) : null;
}

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–Ω—É—Å–∞
function deactivateBoost(boostType) {
    if (window.boostManager) {
        window.boostManager.deactivateBoost(boostType);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–∫–æ–≤ Speed Tamer
function getSpeedTamerStacks() {
    return window.boostManager ? window.boostManager.speedTamerStacks : 0;
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤
function clearAllBoosts() {
    if (window.boostManager) {
        window.boostManager.activeBoosts.clear();
        window.boostManager.droppingBoosts = [];
        window.boostManager.speedTamerStacks = 0;
    }
    
    if (window.boostEffects) {
        window.boostEffects.clear();
    }
}

// üéØ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ç—Ä–µ–ª—å–±—ã (–¥–ª—è Rapid Fire)
function getModifiedShotCooldown(baseCooldown) {
    if (isBoostActive('RAPID_FIRE')) {
        return baseCooldown / BOOST_CONSTANTS.EFFECTS.RAPID_FIRE.multiplier;
    }
    return baseCooldown;
}

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –ø—É–ª—å (–¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
function getModifiedBulletColor(defaultColor) {
    if (isBoostActive('RAPID_FIRE')) {
        return '#ffff00'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è Rapid Fire
    } else if (isBoostActive('MULTI_SHOT')) {
        return '#ff4444'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è Multi-Shot
    } else if (isBoostActive('PIERCING_BULLETS')) {
        return '#ffffff'; // –ë–µ–ª—ã–π –¥–ª—è Piercing
    }
    return defaultColor;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–∏–≤–∞–Ω–∏—è –ø—É–ª—å (–¥–ª—è Piercing Bullets)
function shouldBulletPierce() {
    return isBoostActive('PIERCING_BULLETS');
}

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –æ—á–∫–æ–≤ (–¥–ª—è Score Multiplier)
function getScoreMultiplier() {
    if (isBoostActive('SCORE_MULTIPLIER')) {
        return BOOST_CONSTANTS.EFFECTS.SCORE_MULTIPLIER.multiplier;
    }
    return 1;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ decay (–¥–ª—è Points Freeze)
function isPointsDecayFrozen() {
    return isBoostActive('POINTS_FREEZE');
}

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä–∞–≥–æ–≤ (–¥–ª—è Ice Freeze –∏ Speed Tamer)
function getEnemySpeedMultiplier() {
    let multiplier = 1;
    
    // Ice Freeze
    if (isBoostActive('ICE_FREEZE')) {
        multiplier *= BOOST_CONSTANTS.EFFECTS.ICE_FREEZE.slowdown;
    }
    
    // Speed Tamer
    const stacks = getSpeedTamerStacks();
    if (stacks > 0) {
        const reduction = stacks * BOOST_CONSTANTS.EFFECTS.SPEED_TAMER.reduction;
        multiplier *= (1 - reduction);
    }
    
    return Math.max(0.1, multiplier); // –ú–∏–Ω–∏–º—É–º 10% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–¥–ª—è Invincibility)
function isPlayerInvincible() {
    return isBoostActive('INVINCIBILITY');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —â–∏—Ç–∞ (–¥–ª—è Shield Barrier)
function hasActiveShield() {
    return isBoostActive('SHIELD_BARRIER');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–Ω–∞ –ø–æ —â–∏—Ç—É
function processShieldDamage() {
    const shield = getActiveBoost('SHIELD_BARRIER');
    if (!shield) return false;
    
    const hitsBlocked = shield.hitsBlocked || 0;
    shield.hitsBlocked = hitsBlocked + 1;
    
    if (shield.hitsBlocked >= BOOST_CONSTANTS.EFFECTS.SHIELD_BARRIER.hits) {
        deactivateBoost('SHIELD_BARRIER');
    }
    
    return true; // –£—Ä–æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
}

// üé® –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å—Ü–µ–ª–µ–Ω–∏—è
function createHealEffect(x, y) {
    if (window.boostEffects) {
        window.boostEffects.createHealthBoostEffect(x, y);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–Ω–µ—Ç
function createCoinEffect(points) {
    if (window.boostEffects) {
        window.boostEffects.createCoinShowerEffect(points);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ª–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
function createWaveEffect() {
    if (window.boostEffects) {
        window.boostEffects.createWaveBlastEffect();
    }
}

// üìä –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function activateAllBoosts() {
    const allBoosts = [];
    for (const boosts of Object.values(BOOST_CONSTANTS.RARITY.DISTRIBUTION)) {
        allBoosts.push(...boosts);
    }
    
    for (const boostType of allBoosts) {
        if (window.boostManager) {
            window.boostManager.activateBoost(boostType);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–æ–≤
function getBoostStats() {
    const stats = {
        activeBoosts: window.boostManager ? window.boostManager.activeBoosts.size : 0,
        droppingBoosts: window.boostManager ? window.boostManager.droppingBoosts.length : 0,
        speedTamerStacks: getSpeedTamerStacks(),
        particles: window.boostEffects ? window.boostEffects.particles.length : 0,
        effects: window.boostEffects ? window.boostEffects.effects.length : 0
    };
    
    return stats;
}

// –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function debugBoosts() {
    const stats = getBoostStats();
    return stats; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
}

// üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
function setBoostDropChance(chance) {
    BOOST_CONSTANTS.SPAWN.DROP_CHANCE = Math.max(0, Math.min(1, chance));
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –ø–∞–¥–∞—é—â–∏—Ö –±–æ–Ω—É—Å–æ–≤
function setBoostLifetime(milliseconds) {
    BOOST_CONSTANTS.SPAWN.LIFETIME = Math.max(1000, milliseconds);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ —Ä–µ–¥–∫–æ—Å—Ç–∏
function setRarityChances(common, rare, epic, legendary) {
    const total = common + rare + epic + legendary;
    if (total !== 100) {
        console.warn('Rarity chances should sum to 100%');
        return false;
    }
    
    BOOST_CONSTANTS.RARITY.CHANCES.COMMON = common;
    BOOST_CONSTANTS.RARITY.CHANCES.RARE = rare;
    BOOST_CONSTANTS.RARITY.CHANCES.EPIC = epic;
    BOOST_CONSTANTS.RARITY.CHANCES.LEGENDARY = legendary;
    
    return true;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.initializeBoostSystem = initializeBoostSystem;
window.tryCreateBoost = tryCreateBoost;
window.createSpecificBoost = createSpecificBoost;
window.isBoostActive = isBoostActive;
window.getActiveBoost = getActiveBoost;
window.deactivateBoost = deactivateBoost;
window.getSpeedTamerStacks = getSpeedTamerStacks;
window.clearAllBoosts = clearAllBoosts;

window.getModifiedShotCooldown = getModifiedShotCooldown;
window.getModifiedBulletColor = getModifiedBulletColor;
window.shouldBulletPierce = shouldBulletPierce;
window.getScoreMultiplier = getScoreMultiplier;
window.isPointsDecayFrozen = isPointsDecayFrozen;
window.getEnemySpeedMultiplier = getEnemySpeedMultiplier;
window.isPlayerInvincible = isPlayerInvincible;
window.hasActiveShield = hasActiveShield;
window.processShieldDamage = processShieldDamage;

window.createHealEffect = createHealEffect;
window.createCoinEffect = createCoinEffect;
window.createWaveEffect = createWaveEffect;

window.activateAllBoosts = activateAllBoosts;
window.getBoostStats = getBoostStats;
window.debugBoosts = debugBoosts;
window.setBoostDropChance = setBoostDropChance;
window.setBoostLifetime = setBoostLifetime;
window.setRarityChances = setRarityChances;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (!initializeBoostSystem()) {
            console.error('‚ùå Failed to initialize Boost System');
        }
    }, 2000);
});

// Boost System loaded silently