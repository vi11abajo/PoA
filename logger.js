// üìù PHAROS INVADERS - LOGGING SYSTEM
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É—Ä–æ–≤–Ω–µ–π

class Logger {
    constructor() {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.debugMode = window.GAME_CONFIG?.DEBUG_MODE ?? false;
        this.logLevel = window.GAME_CONFIG?.LOG_LEVEL ?? 'INFO'; // DEBUG, INFO, WARN, ERROR
        
        // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        this.colors = {
            DEBUG: 'color: #888; font-style: italic;',
            INFO: 'color: #00ddff; font-weight: bold;',
            WARN: 'color: #ffaa00; font-weight: bold;',
            ERROR: 'color: #ff4444; font-weight: bold; background: rgba(255,68,68,0.1); padding: 2px 4px; border-radius: 3px;'
        };
        
        // –ò–µ—Ä–∞—Ä—Ö–∏—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.levelPriority = {
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ª–æ–≥ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    shouldLog(level) {
        return this.levelPriority[level] >= this.levelPriority[this.logLevel];
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    formatMessage(level, message, emoji = '') {
        const timestamp = new Date().toLocaleTimeString();
        const prefix = emoji ? `${emoji} ` : '';
        return `[${timestamp}] ${prefix}${message}`;
    }
    
    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    debug(message, ...args) {
        if (this.debugMode && this.shouldLog('DEBUG')) {
            const formattedMessage = this.formatMessage('DEBUG', message, 'üîç');
            console.log(`%c${formattedMessage}`, this.colors.DEBUG, ...args);
        }
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
     */
    info(message, ...args) {
        if (this.shouldLog('INFO')) {
            const formattedMessage = this.formatMessage('INFO', message, 'üéÆ');
            console.log(`%c${formattedMessage}`, this.colors.INFO, ...args);
        }
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —ç–º–æ–¥–∑–∏
     */
    log(message, emoji = 'üéÆ', ...args) {
        if (this.shouldLog('INFO')) {
            const formattedMessage = this.formatMessage('INFO', message, emoji);
            console.log(`%c${formattedMessage}`, this.colors.INFO, ...args);
        }
    }
    
    /**
     * –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
     */
    warn(message, ...args) {
        if (this.shouldLog('WARN')) {
            const formattedMessage = this.formatMessage('WARN', message, '‚ö†Ô∏è');
            console.warn(`%c${formattedMessage}`, this.colors.WARN, ...args);
        }
    }
    
    /**
     * –û—à–∏–±–∫–∏ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
     */
    error(message, ...args) {
        if (this.shouldLog('ERROR')) {
            const formattedMessage = this.formatMessage('ERROR', message, '‚ùå');
            console.error(`%c${formattedMessage}`, this.colors.ERROR, ...args);
        }
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    perf(label, timeMs) {
        if (this.debugMode && this.shouldLog('DEBUG')) {
            const message = `Performance: ${label} took ${timeMs.toFixed(2)}ms`;
            const formattedMessage = this.formatMessage('DEBUG', message, '‚ö°');
            console.log(`%c${formattedMessage}`, this.colors.DEBUG);
        }
    }
    
    /**
     * –ì—Ä—É–ø–ø–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    group(title, callback) {
        if (this.debugMode) {
            console.group(`üéÆ ${title}`);
            callback();
            console.groupEnd();
        }
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
     */
    state(objectName, state) {
        if (this.debugMode && this.shouldLog('DEBUG')) {
            console.group(`üîç ${objectName} State`);
            console.table(state);
            console.groupEnd();
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    setLogLevel(level) {
        if (this.levelPriority.hasOwnProperty(level)) {
            this.logLevel = level;
        } else {
            this.error(`Invalid log level: ${level}. Available: DEBUG, INFO, WARN, ERROR`);
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
     */
    setDebugMode(enabled) {
        this.debugMode = enabled;
    }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
window.Logger = new Logger();

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
Logger.log = (...args) => window.Logger.log(...args);
Logger.info = (...args) => window.Logger.info(...args);
Logger.debug = (...args) => window.Logger.debug(...args);
Logger.warn = (...args) => window.Logger.warn(...args);
Logger.error = (...args) => window.Logger.error(...args);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = Logger;
}

