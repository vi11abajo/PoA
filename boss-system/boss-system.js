// üëë PHAROS INVADERS - –°–ò–°–¢–ï–ú–ê –ë–û–°–û–í
// –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏, —Ñ–∞–∑–∞–º–∏ –∏ —Å–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏


class BossSystemV2 {
    constructor() {
        this.currentBoss = null;
        this.bossBullets = [];
        this.bossParticles = [];
        this.bossImages = {};
        this.bossImagesLoaded = {};
        this.canvas = null;
        this.ctx = null;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.playerBlindness = 0;
        this.playerFrozenBullets = [];
        this.frozenBulletsTime = 0;
        
        this.initBossImages();
    }

    // üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–°–û–í
    getBossConfig() {
        return {
            // –£—Ä–æ–≤–Ω–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å–æ–≤
            BOSS_LEVELS: [3, 6, 9, 12, 15],
            
            // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            BASE_HP: 50,
            HP_INCREASE_PER_BOSS: 25,
            BASE_SCORE: 1000,
            
            // –†–∞–∑–º–µ—Ä—ã –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
            WIDTH: 200,
            HEIGHT: 160,
            START_Y: 70,
            SPEED: 2.0, // Match old boss system speed
            
            // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫
            BULLET_SPEED: 3,
            BULLET_SIZE: 10,
            
            // –î–∞–Ω–Ω—ã–µ –±–æ—Å–æ–≤
            BOSSES: {
                1: {
                    name: 'Emerald Warlord',
                    color: '#33cc66',
                    image: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBOSSGreen.png',
                    phases: 1
                },
                2: {
                    name: 'Azure Leviathan', 
                    color: '#3366ff',
                    image: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossBlue.png',
                    phases: 2
                },
                3: {
                    name: 'Solar Kraken',
                    color: '#ffdd33',
                    image: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossYellow.png',
                    phases: 3
                },
                4: {
                    name: 'Crimson Behemoth',
                    color: '#ff3333', 
                    image: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossRed.png',
                    phases: 4
                },
                5: {
                    name: 'Void Sovereign',
                    color: '#9966ff',
                    image: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossViolet.png',
                    phases: 5
                }
            }
        };
    }

    // üñºÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    initBossImages() {
        const config = this.getBossConfig();
        Object.keys(config.BOSSES).forEach(bossNumber => {
            const bossData = config.BOSSES[bossNumber];
            const img = new Image();
            
            this.bossImages[bossNumber] = img;
            this.bossImagesLoaded[bossNumber] = false;
            
            img.src = bossData.image;
            img.onload = () => {
                this.bossImagesLoaded[bossNumber] = true;
            };
            img.onerror = () => {
                this.bossImagesLoaded[bossNumber] = false;
                Logger.error(`‚ùå Failed to load boss ${bossNumber} image`);
            };
        });
    }

    // üéØ –°–û–ó–î–ê–ù–ò–ï –ë–û–°–ê
    createBoss(level) {
        if (!this.isBossLevel(level)) return null;
        
        const bossNumber = this.getBossNumber(level);
        const config = this.getBossConfig();
        const bossData = config.BOSSES[bossNumber];
        
        // –ü–æ–ª—É—á–∞–µ–º canvas
        this.canvas = this.getCanvas();
        if (!this.canvas) {
            Logger.error('‚ùå Canvas not found for boss creation');
            return null;
        }
        this.ctx = this.canvas.getContext('2d');
        
        const maxHP = config.BASE_HP + (bossNumber - 1) * config.HP_INCREASE_PER_BOSS;
        
        this.currentBoss = {
            // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            x: this.canvas.width / 2 - config.WIDTH / 2,
            y: -config.HEIGHT,
            width: config.WIDTH,
            height: config.HEIGHT,
            
            // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            bossNumber: bossNumber,
            name: bossData.name,
            color: bossData.color,
            maxHP: maxHP,
            currentHP: maxHP,
            
            // –§–∞–∑—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            maxPhases: bossData.phases,
            currentPhase: 1,
            state: 'appearing',
            
            // –î–≤–∏–∂–µ–Ω–∏–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—è
            speed: config.SPEED,
            direction: 1,
            baseY: config.START_Y,
            animationTime: 0,
            
            // –ê—Ç–∞–∫–∏
            lastAttackTime: 0,
            nextAttackDelay: 2000,
            
            // –°–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            lastSpecialAbility: Date.now(), // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —á—Ç–æ–±—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å —Å—Ä–∞–∑—É
            specialCooldown: this.getInitialSpecialCooldown(bossNumber),
            
            // –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ—á–∫–æ–≤
            spawnTime: Date.now(),
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã
            damageFlash: 0,
            damageSlowdown: 0, // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
            phaseTransition: false,
            invulnerable: false,
            
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Å—Å–∞
            uniqueData: this.initBossUniqueData(bossNumber)
        };
        
        return this.currentBoss;
    }

    // üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ë–û–°–°–ê
    initBossUniqueData(bossNumber) {
        switch(bossNumber) {
            case 1: // Emerald Warlord
                return {
                    lastRegenTime: 0,
                    regenCooldown: 5000 + Math.random() * 5000, // –û—Ç 5 –¥–æ 10 —Å–µ–∫—É–Ω–¥
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ (–∑–∏–≥–∑–∞–≥ –∫–ª–µ—à–Ω–∏)
                    lastSecondaryAttack: 0,
                    secondaryAttackDelay: 1000 + Math.random() * 1200 // –û—Ç 1.0 –¥–æ 2.2 —Å–µ–∫—É–Ω–¥
                };
            case 2: // Azure Leviathan
                return {
                    shieldHP: 0,
                    maxShieldHP: 5
                };
            case 3: // Solar Kraken
                return {
                    explosiveBullets: [],
                    lastMeteorShower: 0,
                    meteorShowerCooldown: 12000 + Math.random() * 6000 // –û—Ç 12 –¥–æ 18 —Å–µ–∫—É–Ω–¥
                };
            case 4: // Crimson Behemoth
                return {
                    rageMode: false,
                    rageDuration: 0,
                    rageSpeedMultiplier: 1.0,
                    rageFrequencyMultiplier: 1.0,
                    immuneToSlowdown: false // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ù–ï–¢ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
                };
            case 5: // Void Sovereign
                return {
                    clones: [],
                    portals: []
                };
            default:
                return {};
        }
    }

    // üîç –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    getCanvas() {
        return window.canvas || 
               document.getElementById('gameCanvas') || 
               document.getElementById('tournamentGameCanvas');
    }

    isBossLevel(level) {
        return this.getBossConfig().BOSS_LEVELS.includes(level);
    }

    getBossNumber(level) {
        const index = this.getBossConfig().BOSS_LEVELS.indexOf(level);
        return index !== -1 ? index + 1 : 0;
    }

    getBossHP(level) {
        const bossNumber = this.getBossNumber(level);
        const config = this.getBossConfig();
        return config.BASE_HP + (bossNumber - 1) * config.HP_INCREASE_PER_BOSS;
    }

    getBossScore(bossNumber) {
        const config = this.getBossConfig();
        return config.BASE_SCORE * bossNumber * 10;
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ—á–∫–∏ –±–æ—Å—Å–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    getDynamicBossScore(boss) {
        const baseScore = this.getBossScore(boss.bossNumber);
        const currentTime = Date.now();
        const elapsedTime = currentTime - boss.spawnTime;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫—Ä–∞–±–æ–≤
        const DECAY_INTERVAL = 2500;  // 2.5 —Å–µ–∫—É–Ω–¥—ã
        const DECAY_RATE = 0.01;      // 1% –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const MIN_PERCENTAGE = 0.01;  // –º–∏–Ω–∏–º—É–º 1%
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const intervalsPassed = Math.floor(elapsedTime / DECAY_INTERVAL);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        const decayAmount = intervalsPassed * DECAY_RATE;
        const scoreMultiplier = Math.max(MIN_PERCENTAGE, 1.0 - decayAmount);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1)
        return Math.max(1, Math.floor(baseScore * scoreMultiplier));
    }

    // ‚ö° –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–û–°–ê
    update(deltaTime) {
        if (!this.currentBoss) return;
        
        const boss = this.currentBoss;
        boss.animationTime += deltaTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.updateSpecialEffects(deltaTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
        switch(boss.state) {
            case 'appearing':
                this.updateAppearing(boss, deltaTime);
                break;
            case 'fighting':
                this.updateFighting(boss, deltaTime);
                break;
            case 'phase_transition':
                this.updatePhaseTransition(boss, deltaTime);
                break;
            case 'dying':
                this.updateDying(boss, deltaTime);
                break;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª–∏ –∏ —á–∞—Å—Ç–∏—Ü—ã
        this.updateBossBullets(deltaTime);
        this.updateBossParticles(deltaTime);
    }

    // üìà –ü–û–Ø–í–õ–ï–ù–ò–ï –ë–û–°–ê
    updateAppearing(boss, deltaTime) {
        boss.y += 60 * deltaTime;
        
        if (boss.y >= boss.baseY) {
            boss.y = boss.baseY;
            boss.state = 'fighting';
        }
    }

    // ‚öîÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–Ø
    updateFighting(boss, deltaTime) {
        // –î–≤–∏–∂–µ–Ω–∏–µ –±–æ—Å—Å–∞
        this.updateBossMovement(boss, deltaTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Ñ–∞–∑—ã
        this.checkPhaseTransition(boss);
        
        // –ê—Ç–∞–∫–∏
        this.updateBossAttacks(boss);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–æ—Å–æ–≤)
        this.updateSecondaryAttacks(boss);
        
        // –°–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        this.updateSpecialAbilities(boss);
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–µ—à —ç—Ñ—Ñ–µ–∫—Ç —É—Ä–æ–Ω–∞
        if (boss.damageFlash > 0) {
            boss.damageFlash -= deltaTime;
        }
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –æ—Ç Rage Mode)
        if (boss.damageSlowdown > 0 && !boss.uniqueData.immuneToSlowdown) {
            boss.damageSlowdown -= deltaTime;
        } else if (boss.uniqueData.immuneToSlowdown) {
            boss.damageSlowdown = 0; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —è—Ä–æ—Å—Ç–∏
        }
    }

    // üîÑ –ü–ï–†–ï–•–û–î –ú–ï–ñ–î–£ –§–ê–ó–ê–ú–ò
    updatePhaseTransition(boss, deltaTime) {
        if (!boss.phaseTransition) {
            boss.phaseTransition = true;
            boss.invulnerable = true;
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
            this.createPhaseTransitionEffect(boss);
            
            setTimeout(() => {
                boss.currentPhase++;
                boss.state = 'fighting';
                boss.phaseTransition = false;
                boss.invulnerable = false;
            }, 2000);
        }
    }

    // üíÄ –°–û–°–¢–û–Ø–ù–ò–ï –°–ú–ï–†–¢–ò
    updateDying(boss, deltaTime) {
        boss.y += 30 * deltaTime;
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Å–º–µ—Ä—Ç–∏
        if (Math.random() < 0.3) {
            this.createDeathParticles(boss);
        }
        
        setTimeout(() => {
            this.currentBoss = null;
        }, 3000);
    }

    // üö∂ –î–í–ò–ñ–ï–ù–ò–ï –ë–û–°–ê
    updateBossMovement(boss, deltaTime) {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Ä–æ–Ω–µ
        let currentSpeed = boss.speed;
        if (boss.damageSlowdown > 0 && !boss.uniqueData.immuneToSlowdown) {
            currentSpeed = boss.speed * 0.5; // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞)
        }
        boss.x += currentSpeed * boss.direction * deltaTime;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if (boss.x <= 0) {
            boss.x = 0;
            boss.direction = 1;
        } else if (boss.x >= this.canvas.width - boss.width) {
            boss.x = this.canvas.width - boss.width;
            boss.direction = -1;
        }
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
        const bobbing = Math.sin(boss.animationTime * 0.002) * 10;
        boss.y = boss.baseY + bobbing;
    }

    // üìä –ü–†–û–í–ï–†–ö–ê –°–ú–ï–ù–´ –§–ê–ó–´
    checkPhaseTransition(boss) {
        if (boss.currentPhase >= boss.maxPhases) return;
        
        const phaseThreshold = boss.maxHP * (boss.maxPhases - boss.currentPhase) / boss.maxPhases;
        
        if (boss.currentHP <= phaseThreshold && boss.state === 'fighting') {
            boss.state = 'phase_transition';
        }
    }

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–¢–ê–ö
    updateBossAttacks(boss) {
        const now = Date.now();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∞—Ç–∞–∫ –¥–ª—è Rage Mode (—É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É)
        let effectiveAttackDelay = boss.nextAttackDelay;
        if (boss.uniqueData.rageFrequencyMultiplier) {
            effectiveAttackDelay = boss.nextAttackDelay / boss.uniqueData.rageFrequencyMultiplier;
        }
        
        if (now - boss.lastAttackTime >= effectiveAttackDelay) {
            this.performBossAttack(boss);
            boss.lastAttackTime = now;
            boss.nextAttackDelay = this.getAttackDelay(boss);
        }
    }

    // üî´ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ê–¢–ê–ö
    updateSecondaryAttacks(boss) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Å—Å–∞
        if (boss.bossNumber === 1) {
            const now = Date.now();
            
            if (now - boss.uniqueData.lastSecondaryAttack >= boss.uniqueData.secondaryAttackDelay) {
                this.performSecondaryAttack(boss);
                boss.uniqueData.lastSecondaryAttack = now;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                boss.uniqueData.secondaryAttackDelay = 1000 + Math.random() * 1200; // 1.0-2.2 —Å–µ–∫—É–Ω–¥
            }
        }
    }

    // ‚≠ê –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
    updateSpecialAbilities(boss) {
        const now = Date.now();
        
        if (now - boss.lastSpecialAbility >= boss.specialCooldown) {
            this.activateSpecialAbility(boss);
            boss.lastSpecialAbility = now;
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞ (—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            boss.specialCooldown = this.getNextSpecialCooldown(boss.bossNumber);
        }
    }

    // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–û–ì–û –ö–£–õ–î–ê–£–ù–ê –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ò
    getInitialSpecialCooldown(bossNumber) {
        switch(bossNumber) {
            case 1: // Emerald Warlord - —á–∞—Å—Ç—ã–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                return 5000 + Math.random() * 4000; // 5-9 —Å–µ–∫—É–Ω–¥
            case 2: // Azure Leviathan
                return 7000 + Math.random() * 8000; // 7-15 —Å–µ–∫—É–Ω–¥
            case 3: // Solar Kraken - Meteor Shower
                return 12000 + Math.random() * 6000; // 12-18 —Å–µ–∫—É–Ω–¥
            case 4: // Crimson Behemoth - Rage Mode
                return 6000 + Math.random() * 4000; // 6-10 —Å–µ–∫—É–Ω–¥
            case 5: // Void Sovereign - Temporal Freeze
                return 7000 + Math.random() * 8000; // 7-15 —Å–µ–∫—É–Ω–¥
            default:
                return 15000;
        }
    }

    // üîÑ –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–ï–î–£–Æ–©–ï–ì–û –ö–£–õ–î–ê–£–ù–ê –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ò
    getNextSpecialCooldown(bossNumber) {
        switch(bossNumber) {
            case 1: // Emerald Warlord - –≤–∞—Ä—å–∏—Ä—É–µ–º—ã–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                return 5000 + Math.random() * 4000; // 5-9 —Å–µ–∫—É–Ω–¥
            case 2: // Azure Leviathan
                return 7000 + Math.random() * 8000; // 7-15 —Å–µ–∫—É–Ω–¥
            case 3: // Solar Kraken - Meteor Shower
                return 12000 + Math.random() * 6000; // 12-18 —Å–µ–∫—É–Ω–¥
            case 4: // Crimson Behemoth - Rage Mode
                return 6000 + Math.random() * 4000; // 6-10 —Å–µ–∫—É–Ω–¥
            case 5: // Void Sovereign - Temporal Freeze
                return 7000 + Math.random() * 8000; // 7-15 —Å–µ–∫—É–Ω–¥
            default:
                return 15000;
        }
    }

    // üí• –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–¢–ê–ö–ò –ë–û–°–ê
    performBossAttack(boss) {
        switch(boss.bossNumber) {
            case 1: // Emerald Warlord
                this.emeraldWarlordAttack(boss);
                break;
            case 2: // Azure Leviathan
                this.azureLeviathan(boss);
                break;
            case 3: // Solar Kraken
                this.solarKrakenAttack(boss);
                break;
            case 4: // Crimson Behemoth
                this.crimsonBehemothAttack(boss);
                break;
            case 5: // Void Sovereign
                this.voidSovereignAttack(boss);
                break;
        }
    }

    // üî´ –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ê–¢–ê–ö–ò
    performSecondaryAttack(boss) {
        switch(boss.bossNumber) {
            case 1: // Emerald Warlord - –∑–∏–≥–∑–∞–≥ –∫–ª–µ—à–Ω–∏
                this.emeraldWarlordSecondaryAttack(boss);
                break;
            // –î—Ä—É–≥–∏–µ –±–æ—Å—Å—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏
        }
    }

    // üî¢ –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–î–ï–†–ñ–ö–ò –ú–ï–ñ–î–£ –ê–¢–ê–ö–ê–ú–ò
    getAttackDelay(boss) {
        const baseDelay = 2000;
        const phaseMultiplier = 1 - (boss.currentPhase - 1) * 0.2; // –ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ = -20% –∫ –∑–∞–¥–µ—Ä–∂–∫–µ
        return baseDelay * phaseMultiplier + Math.random() * 1000;
    }

    // ‚≠ê –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ò
    activateSpecialAbility(boss) {
        switch(boss.bossNumber) {
            case 1: // Regeneration
                this.regenerationAbility(boss);
                break;
            case 2: // Water Shield
                this.waterShieldAbility(boss);
                break;
            case 3: // Meteor Shower
                this.meteorShowerAbility(boss);
                break;
            case 4: // Rage Mode
                this.rageModeAbility(boss);
                break;
            case 5: // Temporal Freeze
                this.temporalFreezeAbility(boss);
                break;
        }
    }

    // üåü –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–§–§–ï–ö–¢–û–í –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
    updateSpecialEffects(deltaTime) {
        // –û—Å–ª–µ–ø–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        if (this.playerBlindness > 0) {
            this.playerBlindness -= deltaTime;
        }
        
        // –ó–∞–º–æ—Ä–æ–∑–∫–∞ –ø—É–ª—å
        if (this.frozenBulletsTime > 0) {
            this.frozenBulletsTime -= deltaTime;
            if (this.frozenBulletsTime <= 0) {
                this.unfreezeBullets();
            }
        }
        
        // –†–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –¥–ª—è –±–æ—Å—Å–∞ 4 - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        if (this.currentBoss && this.currentBoss.uniqueData.rageMode) {
            const now = Date.now();
            const elapsed = now - this.currentBoss.uniqueData.rageStartTime;
            
            if (elapsed >= this.currentBoss.uniqueData.rageDuration) {
                // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                this.currentBoss.uniqueData.rageMode = false;
                this.currentBoss.speed = this.getBossConfig().SPEED; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                this.currentBoss.uniqueData.rageSpeedMultiplier = 1.0; 
                this.currentBoss.uniqueData.rageFrequencyMultiplier = 1.0;
                this.currentBoss.uniqueData.immuneToSlowdown = false; // –£–±–∏—Ä–∞–µ–º –∏–º–º—É–Ω–∏—Ç–µ—Ç
                
            }
        }
    }

    // üí• –ù–ê–ù–ï–°–ï–ù–ò–ï –£–†–û–ù–ê –ë–û–°–°–£
    damageBoss(damage) {
        if (!this.currentBoss || this.currentBoss.invulnerable || this.currentBoss.state === 'dying') {
            return { hit: false, killed: false, score: 0 };
        }
        
        const boss = this.currentBoss;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —â–∏—Ç –¥–ª—è –±–æ—Å—Å–∞ 2
        if (boss.bossNumber === 2 && boss.uniqueData.shieldHP > 0) {
            boss.uniqueData.shieldHP--;
            this.createShieldHitEffect(boss);
            
            // –ï—Å–ª–∏ —â–∏—Ç —Ä–∞–∑—Ä—É—à–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∞—Ç–∞–∫—É
            if (boss.uniqueData.shieldHP <= 0) {
                this.azureLeviathanceShieldBreakAttack(boss);
            }
            
            return { hit: true, killed: false, score: 0 };
        }
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        boss.currentHP -= damage;
        boss.damageFlash = 300; // –≠—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è –Ω–∞ 300–º—Å
        
        // –ó–∞–º–µ–¥–ª—è–µ–º –±–æ—Å—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ)
        boss.damageSlowdown = 2000; // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è
        this.createHitParticles(boss);
        
        // –Ø—Ä–æ—Å—Ç—å —É –±–æ—Å—Å–∞ 4 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        if (boss.currentHP <= 0) {
            boss.currentHP = 0;
            boss.state = 'dying';
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—É–ª–∏ –±–æ—Å—Å–∞ –ø—Ä–∏ –µ–≥–æ —Å–º–µ—Ä—Ç–∏
            this.bossBullets = [];
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HP –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –±–æ—Å—Å 1 = +1 HP, –±–æ—Å—Å 2 = +2 HP, –∏ —Ç.–¥.
            const healAmount = boss.bossNumber;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ—á–∫–∏ —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const score = this.getDynamicBossScore(boss);
            
            return { hit: true, killed: true, score: score, healAmount: healAmount };
        }
        
        return { hit: true, killed: false, score: 0 };
    }

    // üéØ –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ò–ó–ò–ô –° –ü–£–õ–Ø–ú–ò –ò–ì–†–û–ö–ê
    checkCollisionWithPlayerBullets(playerBullets) {
        if (!this.currentBoss) return { bulletsToRemove: [], result: { hit: false, killed: false, score: 0 } };
        
        const boss = this.currentBoss;
        const bulletsToRemove = [];
        let result = { hit: false, killed: false, score: 0 };
        
        for (let i = 0; i < playerBullets.length; i++) {
            const bullet = playerBullets[i];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            if (bullet.x < boss.x + boss.width &&
                bullet.x + bullet.width > boss.x &&
                bullet.y < boss.y + boss.height &&
                bullet.y + bullet.height > boss.y) {
                
                bulletsToRemove.push(i);
                result = this.damageBoss(1);
                break; // –û–¥–Ω–∞ –ø—É–ª—è = –æ–¥–∏–Ω —É—Ä–æ–Ω
            }
        }
        
        return { bulletsToRemove, result };
    }

    // üéØ –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ò–ó–ò–ô –ü–£–õ–¨ –ë–û–°–ê –° –ò–ì–†–û–ö–û–ú
    checkCollisionWithPlayer(player) {
        const bulletsToRemove = [];
        let playerHit = false;
        
        for (let i = this.bossBullets.length - 1; i >= 0; i--) {
            const bullet = this.bossBullets[i];
            
            if (bullet.x < player.x + player.width &&
                bullet.x + bullet.width > player.x &&
                bullet.y < player.y + player.height &&
                bullet.y + bullet.height > player.y) {
                
                bulletsToRemove.push(i);
                this.bossBullets.splice(i, 1);
                playerHit = true;
            }
        }
        
        return playerHit;
    }

    // üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–£–õ–¨ –ë–û–°–ê
    updateBossBullets(deltaTime) {
        if (!this.canvas) return;
        
        this.bossBullets = this.bossBullets.filter(bullet => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            bullet.x += bullet.vx * deltaTime;
            bullet.y += bullet.vy * deltaTime;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥
            if (!bullet.trail) bullet.trail = [];
            bullet.trail.push({ x: bullet.x + bullet.width/2, y: bullet.y + bullet.height/2 });
            if (bullet.trail.length > 6) bullet.trail.shift();
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–ª—å
            this.updateSpecialBullet(bullet, deltaTime);
            
            // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –≤—ã—à–ª–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            return bullet.y < this.canvas.height + 50 &&
                   bullet.x > -50 &&
                   bullet.x < this.canvas.width + 50 &&
                   bullet.y > -50;
        });
    }

    // ‚ú® –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ü–£–õ–¨
    updateSpecialBullet(bullet, deltaTime) {
        switch(bullet.type) {
            case 'zigzag':
                bullet.zigzagTime += deltaTime;
                const zigzagInterval = 30; // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30–º—Å
                const nextChangeTime = zigzagInterval * (bullet.zigzagCounter + 1);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 5–π –∫–∞–¥—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if (Math.floor(bullet.zigzagTime) % 5 === 0) {
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if (bullet.zigzagTime >= nextChangeTime && bullet.zigzagCounter < 6) { // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 6 –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –≥—É—Å—Ç–æ–≥–æ –∑–∏–≥–∑–∞–≥–∞
                    const oldVx = bullet.vx;
                    bullet.vx = -bullet.vx; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    bullet.zigzagCounter++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    
                }
                break;
            case 'explosive':
                if (bullet.timer) {
                    bullet.timer -= deltaTime;
                    if (bullet.timer <= 0) {
                        this.explodeBullet(bullet);
                    }
                }
                break;
            case 'homing':
                // –ü—Ä–æ—Å—Ç–æ–π —Å–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–∫–∞
                if (window.player) {
                    const dx = (window.player.x + window.player.width/2) - (bullet.x + bullet.width/2);
                    const dy = (window.player.y + window.player.height/2) - (bullet.y + bullet.height/2);
                    const distance = Math.sqrt(dx*dx + dy*dy);
                    
                    if (distance > 0) {
                        const homingStrength = 0.5;
                        bullet.vx += (dx / distance) * homingStrength * deltaTime;
                        bullet.vy += (dy / distance) * homingStrength * deltaTime;
                    }
                }
                break;
        }
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–¶
    updateBossParticles(deltaTime) {
        this.bossParticles = this.bossParticles.filter(particle => {
            particle.x += particle.vx * deltaTime;
            particle.y += particle.vy * deltaTime;
            particle.vy += 0.1 * deltaTime; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            particle.life -= deltaTime;
            
            return particle.life > 0;
        });
    }

    // üî• –°–û–ó–î–ê–ù–ò–ï –≠–§–§–ï–ö–¢–û–í –ò –ß–ê–°–¢–ò–¶

    // üéØ –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è
    createHitParticles(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 8; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * boss.width * 0.6,
                y: centerY + (Math.random() - 0.5) * boss.height * 0.6,
                vx: (Math.random() - 0.5) * 6,
                vy: (Math.random() - 0.5) * 6,
                life: 30,
                maxLife: 30,
                size: Math.random() * 2 + 1,
                color: '#ffff00',
                type: 'hit'
            });
        }
    }

    // üõ°Ô∏è –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —â–∏—Ç
    createShieldHitEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 6; i++) {
            this.bossParticles.push({
                x: centerX,
                y: centerY,
                vx: (Math.random() - 0.5) * 4,
                vy: (Math.random() - 0.5) * 4,
                life: 25,
                maxLife: 25,
                size: Math.random() * 3 + 2,
                color: '#0099ff',
                type: 'shield_hit'
            });
        }
        
    }

    // üíÄ –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–º–µ—Ä—Ç–∏
    createDeathParticles(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 5; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * boss.width,
                y: centerY + (Math.random() - 0.5) * boss.height,
                vx: (Math.random() - 0.5) * 10,
                vy: (Math.random() - 0.5) * 10,
                life: 40,
                maxLife: 40,
                size: Math.random() * 4 + 2,
                color: boss.color,
                type: 'death'
            });
        }
    }

    // üåü –≠—Ñ—Ñ–µ–∫—Ç —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
    createPhaseTransitionEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –≤–æ–ª–Ω—É —á–∞—Å—Ç–∏—Ü
        for (let i = 0; i < 32; i++) {
            const angle = (i / 32) * Math.PI * 2;
            const radius = 20;
            
            this.bossParticles.push({
                x: centerX + Math.cos(angle) * radius,
                y: centerY + Math.sin(angle) * radius,
                vx: Math.cos(angle) * 3,
                vy: Math.sin(angle) * 3,
                life: 60,
                maxLife: 60,
                size: 4,
                color: boss.color,
                type: 'phase_transition'
            });
        }
        
    }

    // üí• –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
    createExplosionParticles(x, y, color) {
        for (let i = 0; i < 12; i++) {
            this.bossParticles.push({
                x: x,
                y: y,
                vx: (Math.random() - 0.5) * 10,
                vy: (Math.random() - 0.5) * 10,
                life: 40,
                maxLife: 40,
                size: Math.random() * 4 + 2,
                color: color,
                type: 'explosion'
            });
        }
    }

    // üåÄ –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
    createTeleportEffect(x, y) {
        for (let i = 0; i < 15; i++) {
            this.bossParticles.push({
                x: x,
                y: y,
                vx: (Math.random() - 0.5) * 6,
                vy: (Math.random() - 0.5) * 6,
                life: 30,
                maxLife: 30,
                size: Math.random() * 3 + 1,
                color: '#9966ff',
                type: 'teleport'
            });
        }
    }

    getCurrentBoss() {
        return this.currentBoss;
    }

    getBossBullets() {
        return this.bossBullets;
    }

    getBossParticles() {
        return this.bossParticles;
    }

    clearBoss() {
        this.currentBoss = null;
        this.bossBullets = [];
        this.bossParticles = [];
        this.playerBlindness = 0;
        this.playerFrozenBullets = [];
        this.frozenBulletsTime = 0;
    }

    getBossStatus() {
        if (!this.currentBoss) return null;
        
        return {
            name: this.currentBoss.name,
            currentHP: this.currentBoss.currentHP,
            maxHP: this.currentBoss.maxHP,
            currentPhase: this.currentBoss.currentPhase,
            maxPhases: this.currentBoss.maxPhases,
            state: this.currentBoss.state
        };
    }

}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–æ—Å–æ–≤
window.BossSystemV2 = BossSystemV2;
window.BossSystem = BossSystemV2; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
