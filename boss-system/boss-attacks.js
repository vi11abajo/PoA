// üî• PHAROS INVADERS - –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ê–¢–ê–ö–ò –ë–û–°–û–í
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ 5 –±–æ—Å–æ–≤


// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫ –≤ –∫–ª–∞—Å—Å BossSystemV2
Object.assign(BossSystemV2.prototype, {
    // üü¢ –ë–û–°–° 1 - EMERALD WARLORD - –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∞—Ç–∞–∫–∞
    emeraldWarlordAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∞—Ç–∞–∫–∞ - –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–æ—á–Ω–∞—è –ø—É–ª—è
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - –æ–¥–Ω–∞ –ø—Ä—è–º–∞—è –ø—É–ª—è
                this.createStraightBullet(centerX, centerY, boss.color);
                break;
        }
        
    },

    // üü¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ Emerald Warlord - "Claw Strike" (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è)
    emeraldWarlordSecondaryAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - –∑–∏–≥–∑–∞–≥ –∫–ª–µ—à–Ω–∏
                this.createZigzagBullet(centerX - 50, centerY, boss.color, 'left', 'A');
                this.createZigzagBullet(centerX + 50, centerY, boss.color, 'right', 'B');
                break;
        }
        
    },

    // üîµ –ë–û–°–° 2 - AZURE LEVIATHAN - "Tidal Wave" (–≤–æ–ª–Ω–∞ –ø—É–ª—å —Å–∏–Ω—É—Å–æ–∏–¥–æ–π)
    azureLeviathan(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - –º–µ–¥–ª–µ–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ –ø—É–ª–∏
                this.createLargeBullet(centerX, centerY, boss.color);
                break;
                
            case 2: // –§–∞–∑–∞ 2 - –≤–æ–ª–Ω–∞ –∏–∑ 7 –ø—É–ª—å
                this.createTidalWave(centerX, centerY, boss.color);
                break;
        }
        
    },

    // üîµ –°–ü–ï–¶–ê–¢–ê–ö–ê –ü–†–ò –†–ê–ó–†–£–®–ï–ù–ò–ò –©–ò–¢–ê - Azure Leviathan
    azureLeviathanceShieldBreakAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        // –ú–æ—â–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ —â–∏—Ç–∞
        const bulletCount = 12;
        for (let i = 0; i < bulletCount; i++) {
            const angle = (i / bulletCount) * Math.PI * 2;
            const bullet = {
                x: centerX - this.getBossConfig().BULLET_SIZE / 2,
                y: centerY,
                width: this.getBossConfig().BULLET_SIZE + 3,
                height: this.getBossConfig().BULLET_SIZE + 3,
                vx: Math.cos(angle) * this.getBossConfig().BULLET_SPEED * 1.2,
                vy: Math.sin(angle) * this.getBossConfig().BULLET_SPEED * 1.2,
                color: boss.color,
                type: 'shield_break',
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ —â–∏—Ç–∞
        this.createShieldBreakEffect(boss);
        
    },

    // üü° –ë–û–°–° 3 - SOLAR KRAKEN - "Solar Flare" (–≤–∑—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø—É–ª–∏)
    solarKrakenAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - –ø—Ä—è–º—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã (—Å–∫–æ—Ä–æ—Å—Ç—å +22%)
                this.createStraightBullet(centerX, centerY, boss.color, 1.22);
                break;
                
            case 2: // –§–∞–∑–∞ 2 - –∫—Ä—É–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å +11%)
                this.createCircularAttack(centerX, centerY, boss.color, 1.11);
                break;
                
            case 3: // –§–∞–∑–∞ 3 - –≤–∑—Ä—ã–≤–Ω—ã–µ –ø—É–ª–∏ (—Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑)
                this.createExplosiveBullets(centerX, centerY, boss.color, 5);
                break;
        }
        
    },

    // üî¥ –ë–û–°–° 4 - CRIMSON BEHEMOTH - "Crimson Meteor" (–º–µ—Ç–µ–æ—Ä–∏—Ç—ã —Å rage —Ä–µ–∂–∏–º–æ–º)
    crimsonBehemothAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—É–ª—å –Ω–∞ 55%
        const speedMultiplier = boss.uniqueData.rageMode ? 1.55 : 1.0;
        
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ—Ç–µ–æ—Ä–∏—Ç—ã
                this.createMeteorBullet(centerX, centerY, boss.color, speedMultiplier);
                break;
                
            case 2: // –§–∞–∑–∞ 2 - –¥–≤–æ–π–Ω—ã–µ –º–µ—Ç–µ–æ—Ä–∏—Ç—ã
                this.createMeteorBullet(centerX - 40, centerY, boss.color, speedMultiplier);
                this.createMeteorBullet(centerX + 40, centerY, boss.color, speedMultiplier);
                break;
                
            case 3: // –§–∞–∑–∞ 3 - —Ç—Ä–æ–π–Ω—ã–µ –º–µ—Ç–µ–æ—Ä–∏—Ç—ã
                this.createMeteorBullet(centerX - 60, centerY, boss.color, speedMultiplier);
                this.createMeteorBullet(centerX, centerY, boss.color, speedMultiplier);
                this.createMeteorBullet(centerX + 60, centerY, boss.color, speedMultiplier);
                break;
                
            case 4: // –§–∞–∑–∞ 4 - –±–µ—Ä—Å–µ—Ä–∫ —Ä–µ–∂–∏–º
                this.createBerserkAttack(centerX, centerY, boss.color, speedMultiplier);
                break;
        }
        
    },

    // üü£ –ë–û–°–° 5 - VOID SOVEREIGN - "Void Rift" (–ø–æ—Ä—Ç–∞–ª–∏ –∑ –∫—É–ª—è–º–∏)
    voidSovereignAttack(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height;
        
        switch(boss.currentPhase) {
            case 1: // –§–∞–∑–∞ 1 - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è + –ø—Ä—è–º—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
                this.createTeleportAttack(boss, centerX, centerY);
                break;
                
            case 2: // –§–∞–∑–∞ 2 - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è + —Å–ø–∏—Ä–∞–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏
                this.createTeleportAttack(boss, centerX, centerY);
                setTimeout(() => {
                    this.createSpiralAttack(boss.x + boss.width/2, boss.y + boss.height, boss.color);
                }, 200);
                break;
                
            case 3: // –§–∞–∑–∞ 3 - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è + –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                this.createTeleportAttack(boss, centerX, centerY);
                setTimeout(() => {
                    this.createCloneAttack(boss);
                }, 300);
                break;
                
            case 4: // –§–∞–∑–∞ 4 - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è + –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ª–Ω—ã
                this.createTeleportAttack(boss, centerX, centerY);
                setTimeout(() => {
                    this.createGravityWave(boss.x + boss.width/2, boss.y + boss.height, boss.color);
                }, 250);
                break;
                
            case 5: // –§–∞–∑–∞ 5 - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–∞–æ—Å (–±–µ–∑ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏)
                this.createChaosAttack(boss);
                break;
        }
        
    },

    // ====== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –¢–ò–ü–û–í –ü–£–õ–¨ ======

    // üîß –ó–∏–≥–∑–∞–≥ –ø—É–ª–∏ (–¥–ª—è Emerald Warlord)
    createZigzagBullet(x, y, color, direction, zigzagPattern) {
        const config = this.getBossConfig();
        
        const bullet = {
            x: x - config.BULLET_SIZE / 2,
            y: y,
            width: config.BULLET_SIZE,
            height: config.BULLET_SIZE,
            vx: zigzagPattern === 'A' ? -2.0 : 2.0, // –í–æ–∑–≤—Ä–∞—â–∞—é –ø—Ä–æ—à–ª—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            vy: config.BULLET_SPEED, // –í–æ–∑–≤—Ä–∞—â–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            color: color,
            type: 'zigzag',
            zigzagTime: 0, // –í—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 0
            zigzagPattern: zigzagPattern, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            zigzagCounter: 0, // –°—á–µ—Ç—á–∏–∫ —Å–º–µ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            trail: []
        };
        
        this.bossBullets.push(bullet);
    },

    // üåä –ü—Ä–∏–ª–∏–≤–Ω–∞—è –≤–æ–ª–Ω–∞ (–¥–ª—è Azure Leviathan)
    createTidalWave(centerX, centerY, color) {
        const config = this.getBossConfig();
        const bulletCount = 7;
        
        for (let i = 0; i < bulletCount; i++) {
            const angle = (i - 3) * 0.5; // –û—Ç -1.5 –¥–æ +1.5 —Ä–∞–¥–∏–∞–Ω (~172¬∞ –≤–µ–µ—Ä)
            const bullet = {
                x: centerX - config.BULLET_SIZE / 2,
                y: centerY,
                width: config.BULLET_SIZE,
                height: config.BULLET_SIZE,
                vx: Math.sin(angle) * config.BULLET_SPEED * 0.73,
                vy: Math.cos(angle) * config.BULLET_SPEED,
                color: color,
                type: 'wave',
                waveTime: i * 200,
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // üåä –ë–æ–ª—å—à–∞—è –ø—É–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã
    createLargeBullet(centerX, centerY, color) {
        const config = this.getBossConfig();
        const bullet = {
            x: centerX - (config.BULLET_SIZE + 10) / 2,
            y: centerY,
            width: config.BULLET_SIZE + 10,
            height: config.BULLET_SIZE + 10,
            vx: 0,
            vy: config.BULLET_SPEED * 0.85,
            color: color,
            type: 'large',
            trail: []
        };
        
        this.bossBullets.push(bullet);
    },

    // üéØ –ü—Ä—è–º–∞—è –ø—É–ª—è
    createStraightBullet(centerX, centerY, color, speedMultiplier = 1) {
        const config = this.getBossConfig();
        const bullet = {
            x: centerX - config.BULLET_SIZE / 2,
            y: centerY,
            width: config.BULLET_SIZE,
            height: config.BULLET_SIZE,
            vx: 0,
            vy: config.BULLET_SPEED * speedMultiplier,
            color: color,
            type: 'straight',
            trail: []
        };
        
        this.bossBullets.push(bullet);
    },

    // ‚≠ï –ö—Ä—É–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞
    createCircularAttack(centerX, centerY, color, speedMultiplier = 0.8) {
        const config = this.getBossConfig();
        const bulletCount = 8;
        
        for (let i = 0; i < bulletCount; i++) {
            const angle = (i / bulletCount) * Math.PI * 2;
            const bullet = {
                x: centerX - config.BULLET_SIZE / 2,
                y: centerY,
                width: config.BULLET_SIZE,
                height: config.BULLET_SIZE,
                vx: Math.cos(angle) * config.BULLET_SPEED * speedMultiplier,
                vy: Math.sin(angle) * config.BULLET_SPEED * speedMultiplier,
                color: color,
                type: 'circular',
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // üí• –í–∑—Ä—ã–≤—á–∞—Ç—ã–µ –ø—É–ª–∏
    createExplosiveBullets(centerX, centerY, color, count) {
        const config = this.getBossConfig();
        
        for (let i = 0; i < count; i++) {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≥–æ–ª —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–µ–π –ø–æ–ª—É—Å—Ñ–µ—Ä–æ–π (–æ—Ç 0 –¥–æ œÄ)
            const angle = Math.random() * Math.PI; // –¢–æ–ª—å–∫–æ –≤–Ω–∏–∑ (0-180¬∞)
            const speedVariation = 0.5 + Math.random() * 0.5; // –†–∞–Ω–¥–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ 0.5-1.0
            const bullet = {
                x: centerX - config.BULLET_SIZE / 2,
                y: centerY,
                width: config.BULLET_SIZE + 4,
                height: config.BULLET_SIZE + 4,
                vx: Math.cos(angle) * config.BULLET_SPEED * speedVariation,
                vy: Math.abs(Math.sin(angle) * config.BULLET_SPEED * speedVariation), // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–≤–Ω–∏–∑)
                color: color,
                type: 'explosive',
                timer: 2000 + Math.random() * 1000,
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // ‚òÑÔ∏è –ú–µ—Ç–µ–æ—Ä (–±–æ–ª—å—à–∞—è –ø—É–ª—è —Å –æ–≥–Ω–µ–Ω–Ω—ã–º —Å–ª–µ–¥–æ–º)
    createMeteorBullet(x, y, color, speedMultiplier = 1) {
        const config = this.getBossConfig();
        const bullet = {
            x: x - (config.BULLET_SIZE + 8) / 2,
            y: y,
            width: config.BULLET_SIZE + 8,
            height: config.BULLET_SIZE + 8,
            vx: 0,
            vy: config.BULLET_SPEED * 1.0 * speedMultiplier, // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.7 –¥–æ 1.0
            color: color,
            type: 'meteor',
            trail: []
        };
        
        this.bossBullets.push(bullet);
    },

    // üå™Ô∏è –ë–µ—Ä—Å–µ—Ä–∫ –∞—Ç–∞–∫–∞ (–º–Ω–æ–≥–æ –ø—É–ª—å –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã)
    createBerserkAttack(centerX, centerY, color, speedMultiplier = 1) {
        const config = this.getBossConfig();
        const bulletCount = 12;
        
        for (let i = 0; i < bulletCount; i++) {
            const angle = (i / bulletCount) * Math.PI * 2;
            const speed = config.BULLET_SPEED * (1 + Math.random() * 0.5) * speedMultiplier;
            
            const bullet = {
                x: centerX - config.BULLET_SIZE / 2,
                y: centerY,
                width: config.BULLET_SIZE,
                height: config.BULLET_SIZE,
                vx: Math.cos(angle) * speed,
                vy: Math.sin(angle) * speed,
                color: color,
                type: 'berserk',
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // üåÄ –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞
    createSpiralAttack(centerX, centerY, color) {
        const config = this.getBossConfig();
        const bulletCount = 6;
        const spiralTime = Date.now() * 0.001;
        
        for (let i = 0; i < bulletCount; i++) {
            const angle = spiralTime + (i / bulletCount) * Math.PI * 2;
            const bullet = {
                x: centerX - config.BULLET_SIZE / 2,
                y: centerY,
                width: config.BULLET_SIZE,
                height: config.BULLET_SIZE,
                vx: Math.cos(angle) * config.BULLET_SPEED * 0.8,
                vy: Math.sin(angle) * config.BULLET_SPEED * 0.8 + config.BULLET_SPEED * 0.3,
                color: color,
                type: 'spiral',
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // üì° –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è + –∞—Ç–∞–∫–∞
    createTeleportAttack(boss, oldX, oldY) {
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Å—Å–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
        const newX = Math.random() * (this.canvas.width - boss.width);
        boss.x = newX;
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        this.createTeleportEffect(oldX + boss.width/2, oldY + boss.height/2);
        this.createTeleportEffect(newX + boss.width/2, boss.y + boss.height/2);
        
        // –°—Ç—Ä–µ–ª—è–µ–º —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        this.createStraightBullet(newX + boss.width/2, boss.y + boss.height, boss.color);
    },

    // üåä –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–ª–Ω–∞
    createGravityWave(centerX, centerY, color) {
        const config = this.getBossConfig();
        const bulletCount = 16;
        
        for (let i = 0; i < bulletCount; i++) {
            const angle = (i / bulletCount) * Math.PI * 2;
            const radius = 50 + i * 10;
            
            const bullet = {
                x: centerX + Math.cos(angle) * radius,
                y: centerY + Math.sin(angle) * radius,
                width: config.BULLET_SIZE,
                height: config.BULLET_SIZE,
                vx: Math.cos(angle) * config.BULLET_SPEED * 0.5,
                vy: Math.sin(angle) * config.BULLET_SPEED * 0.5,
                color: color,
                type: 'gravity',
                trail: []
            };
            
            this.bossBullets.push(bullet);
        }
    },

    // üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–Ω–æ–≤
    createCloneAttack(boss) {
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø—É–ª—å
        this.createCircularAttack(boss.x + boss.width/2, boss.y + boss.height, boss.color);
    },

    // üå™Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è —Ö–∞–æ—Ç–∏—á–Ω–∞—è –∞—Ç–∞–∫–∞
    createChaosAttack(boss) {
        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
        this.createSpiralAttack(boss.x + boss.width/2, boss.y + boss.height, boss.color);
        
        setTimeout(() => {
            this.createBerserkAttack(boss.x + boss.width/2, boss.y + boss.height, boss.color);
        }, 500);
        
        setTimeout(() => {
            this.createExplosiveBullets(boss.x + boss.width/2, boss.y + boss.height, boss.color, 3);
        }, 1000);
    },

    // üí• –í–∑—Ä—ã–≤ –ø—É–ª–∏
    explodeBullet(bullet) {
        // –°–æ–∑–¥–∞–µ–º 4 –æ—Å–∫–æ–ª–∫–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        const fragmentCount = 4;
        for (let i = 0; i < fragmentCount; i++) {
            const angle = (i / fragmentCount) * Math.PI * 2;
            const fragment = {
                x: bullet.x,
                y: bullet.y,
                width: bullet.width / 2,
                height: bullet.height / 2,
                vx: Math.cos(angle) * 2,
                vy: Math.sin(angle) * 2,
                color: bullet.color,
                type: 'fragment',
                trail: []
            };
            
            this.bossBullets.push(fragment);
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
        this.createExplosionParticles(bullet.x + bullet.width/2, bullet.y + bullet.height/2, bullet.color);
        
        // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—É–ª—é
        const index = this.bossBullets.indexOf(bullet);
        if (index > -1) {
            this.bossBullets.splice(index, 1);
        }
    }
});

