// ‚≠ê PHAROS INVADERS - –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ò –ë–û–°–û–í


Object.assign(BossSystemV2.prototype, {
    // üü¢ –ë–û–°–° 1 - EMERALD WARLORD - "Regeneration" (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP)
    regenerationAbility(boss) {
        const now = Date.now();
        
        if (now - boss.uniqueData.lastRegenTime < boss.uniqueData.regenCooldown) {
            return;
        }
        
        const regenAmount = Math.ceil(boss.maxHP * 0.1);
        boss.currentHP = Math.min(boss.maxHP, boss.currentHP + regenAmount);
        
        this.createRegenerationEffect(boss);
        
        boss.uniqueData.lastRegenTime = now;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        boss.uniqueData.regenCooldown = 5000 + Math.random() * 5000; // –û—Ç 5 –¥–æ 10 —Å–µ–∫—É–Ω–¥
        
    },

    // üîµ –ë–û–°–° 2 - AZURE LEVIATHAN - "Water Shield" (–±–ª–æ–∫–∏—Ä—É–µ—Ç 3 –ø–æ–ø–∞–¥–∞–Ω–∏—è)
    waterShieldAbility(boss) {
        if (boss.uniqueData.shieldHP <= 0) {
            boss.uniqueData.shieldHP = boss.uniqueData.maxShieldHP;
            
            this.createWaterShieldEffect(boss);
            
        }
    },

    // üü° –ë–û–°–° 3 - SOLAR KRAKEN - "Meteor Shower" (–º–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å)
    meteorShowerAbility(boss) {
        const meteorCount = 8 + Math.floor(Math.random() * 5); // 8-12 –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for (let i = 0; i < meteorCount; i++) {
            const x = Math.random() * (this.canvas.width - 60) + 30; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            this.meteorWarnings = this.meteorWarnings || [];
            this.meteorWarnings.push({
                x: x,
                y: this.canvas.height - 10, // –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                timer: 1500, // 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–æ –ø–∞–¥–µ–Ω–∏—è
                maxTimer: 1500,
                size: 30,
                alpha: 1.0
            });
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.createMeteorBullet(x, -20, boss.color, 0.8); // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –º–µ—Ç–µ–æ—Ä–∏—Ç—ã
            }, 1500);
        }
        
        this.createMeteorShowerEffect(boss);
        
    },

    // üî¥ –ë–û–°–° 4 - CRIMSON BEHEMOTH - "Rage" (—Ä–∞–Ω–¥–æ–º–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è 7-15 —Å–µ–∫, +30% –∫–æ –≤—Å–µ–º—É)
    rageModeAbility(boss) {
        boss.uniqueData.rageMode = true;
        boss.uniqueData.rageDuration = 6000 + Math.random() * 3000; // 6-9 —Å–µ–∫—É–Ω–¥
        boss.uniqueData.rageStartTime = Date.now();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ 55% (1.55x)
        boss.speed = this.getBossConfig().SPEED * 1.55;
        boss.uniqueData.rageSpeedMultiplier = 1.55; // –î–ª—è –ø—É–ª—å
        boss.uniqueData.rageFrequencyMultiplier = 1.55; // –î–ª—è —á–∞—Å—Ç–æ—Ç—ã –∞—Ç–∞–∫
        boss.uniqueData.immuneToSlowdown = true; // –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∑–∞–º–µ–¥–ª–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –≤ rage
        
        this.createRageModeEffect(boss);
        
    },

    // üü£ –ë–û–°–° 5 - VOID SOVEREIGN - "Temporal Freeze" (–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –ø—É–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã)
    temporalFreezeAbility(boss) {
        if (window.bullets && window.bullets.length > 0) {
            this.playerFrozenBullets = [...window.bullets];
            this.frozenBulletsTime = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
            
            window.bullets.forEach(bullet => {
                bullet.frozenVy = bullet.vy || bullet.speed || 8;
                bullet.vy = 0;
                bullet.speed = 0;
            });
            
            this.createTemporalFreezeEffect();
            
        }
    },

    // üîì –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ –ø—É–ª—å –∏–≥—Ä–æ–∫–∞
    unfreezeBullets() {
        if (window.bullets) {
            window.bullets.forEach(bullet => {
                if (bullet.frozenVy !== undefined) {
                    bullet.vy = bullet.frozenVy;
                    bullet.speed = bullet.frozenVy;
                    delete bullet.frozenVy;
                }
            });
        }
        
        this.playerFrozenBullets = [];
    },

    // ====== –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –°–ü–ï–¶–°–ü–û–°–û–ë–ù–û–°–¢–ï–ô ======

    // üíö –≠—Ñ—Ñ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    createRegenerationEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 20; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * boss.width,
                y: centerY + (Math.random() - 0.5) * boss.height,
                vx: (Math.random() - 0.5) * 2,
                vy: -Math.random() * 3 - 1,
                life: 60,
                maxLife: 60,
                size: Math.random() * 3 + 2,
                color: '#00ff88',
                type: 'regeneration'
            });
        }
    },

    // üíß –≠—Ñ—Ñ–µ–∫—Ç –≤–æ–¥–Ω–æ–≥–æ —â–∏—Ç–∞
    createWaterShieldEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 16; i++) {
            const angle = (i / 16) * Math.PI * 2;
            const radius = boss.width * 0.344; // –£–º–µ–Ω—å—à–∏–ª–∏ –Ω–∞ 18% –æ—Ç 0.42 (0.42 * 0.82 = 0.344)
            
            this.bossParticles.push({
                x: centerX + Math.cos(angle) * radius,
                y: centerY + Math.sin(angle) * radius,
                vx: Math.cos(angle) * 0.5,
                vy: Math.sin(angle) * 0.5,
                life: 90,
                maxLife: 90,
                size: 4,
                color: '#0099ff',
                type: 'shield'
            });
        }
    },

    // ‚òÑÔ∏è –≠—Ñ—Ñ–µ–∫—Ç –º–µ—Ç–µ–æ—Ä–∏—Ç–Ω–æ–≥–æ –¥–æ–∂–¥—è
    createMeteorShowerEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        // –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é –∞—É—Ä—É –≤–æ–∫—Ä—É–≥ –±–æ—Å—Å–∞
        for (let i = 0; i < 25; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * boss.width,
                y: centerY + (Math.random() - 0.5) * boss.height,
                vx: (Math.random() - 0.5) * 3,
                vy: (Math.random() - 0.5) * 3,
                life: 80,
                maxLife: 80,
                size: Math.random() * 4 + 2,
                color: Math.random() > 0.5 ? '#ff6600' : '#ffaa00',
                type: 'meteor_aura'
            });
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫—Ä—ã –ø–æ–¥–Ω–∏–º–∞—é—â–∏–µ—Å—è –≤–≤–µ—Ä—Ö
        for (let i = 0; i < 15; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * boss.width * 0.8,
                y: centerY + boss.height / 2,
                vx: (Math.random() - 0.5) * 2,
                vy: -Math.random() * 4 - 2,
                life: 60,
                maxLife: 60,
                size: Math.random() * 3 + 1,
                color: '#ffcc33',
                type: 'meteor_sparks'
            });
        }
    },
    
    // üí• –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–µ–æ—Ä–∏—Ç–Ω–æ–π –ø—É–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ boss-attacks.js)
    createMeteorBullet(x, y, color, speedMultiplier = 1) {
        const config = this.getBossConfig();
        const bullet = {
            x: x - (config.BULLET_SIZE + 8) / 2,
            y: y,
            width: config.BULLET_SIZE + 8,
            height: config.BULLET_SIZE + 8,
            vx: 0,
            vy: config.BULLET_SPEED * 0.7 * speedMultiplier,
            color: color,
            type: 'meteor',
            trail: []
        };
        
        this.bossBullets.push(bullet);
    },

    // üî• –≠—Ñ—Ñ–µ–∫—Ç —Ä–µ–∂–∏–º–∞ —è—Ä–æ—Å—Ç–∏
    createRageModeEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        for (let i = 0; i < 30; i++) {
            this.bossParticles.push({
                x: centerX,
                y: centerY,
                vx: (Math.random() - 0.5) * 8,
                vy: (Math.random() - 0.5) * 8,
                life: 45,
                maxLife: 45,
                size: Math.random() * 4 + 2,
                color: Math.random() > 0.5 ? '#ff3333' : '#ff8800',
                type: 'rage'
            });
        }
    },

    // üï∞Ô∏è –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    createTemporalFreezeEffect() {
        if (!this.canvas) return;
        
        for (let i = 0; i < 40; i++) {
            this.bossParticles.push({
                x: Math.random() * this.canvas.width,
                y: Math.random() * this.canvas.height * 0.8,
                vx: (Math.random() - 0.5) * 2,
                vy: Math.random() * 2 + 1,
                life: 120,
                maxLife: 120,
                size: Math.random() * 3 + 1,
                color: '#9966ff',
                type: 'freeze'
            });
        }
    },

    // üõ°Ô∏èüí• –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —â–∏—Ç–∞
    createShieldBreakEffect(boss) {
        const centerX = boss.x + boss.width / 2;
        const centerY = boss.y + boss.height / 2;
        
        // –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ —á–∞—Å—Ç–∏—Ü
        for (let i = 0; i < 24; i++) {
            const angle = (i / 24) * Math.PI * 2;
            const speed = 3 + Math.random() * 4;
            
            this.bossParticles.push({
                x: centerX,
                y: centerY,
                vx: Math.cos(angle) * speed,
                vy: Math.sin(angle) * speed,
                life: 60,
                maxLife: 60,
                size: Math.random() * 5 + 3,
                color: '#0099ff',
                type: 'shield_break'
            });
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è—Ä–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 12; i++) {
            this.bossParticles.push({
                x: centerX + (Math.random() - 0.5) * 40,
                y: centerY + (Math.random() - 0.5) * 40,
                vx: (Math.random() - 0.5) * 8,
                vy: (Math.random() - 0.5) * 8,
                life: 45,
                maxLife: 45,
                size: Math.random() * 4 + 2,
                color: '#ffffff',
                type: 'shield_break_flash'
            });
        }
        
    },

    // üåü –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–¥–ª—è UI –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
    getSpecialEffectsState() {
        return {
            frozenBulletsTime: this.frozenBulletsTime
        };
    }
});

