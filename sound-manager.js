// üéµ PHAROS INVADERS - SOUND MANAGER
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞–º–∏ –∏ –º—É–∑—ã–∫–æ–π

class SoundManager {
    // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ sounds –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    detectSoundsPath() {
        const currentPath = window.location.pathname;

        // –ï—Å–ª–∏ –º—ã –≤ –ø–æ–¥–ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tournament/), –Ω—É–∂–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        if (currentPath.includes('/tournament/') || currentPath.includes('\\tournament\\')) {
            Logger.info('üéµ Detected tournament page, using ../sounds path');
            return '../sounds';
        }

        // –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å
        Logger.info('üéµ Detected main page, using sounds path');
        return 'sounds';
    }

    constructor() {
        // üîä –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.masterVolume = 0.7;
        this.musicVolume = 0.5; // 50% –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        this.sfxVolume = 0.8;
        this.ambientVolume = 0.3;

        // üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        this.currentMusic = null;
        this.musicPaused = false;
        this.musicStates = new Map(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤

        // üéõÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤—É–∫–∞ (0.0 - 1.0)
        this.soundVolumes = {
            // –ú—É–∑—ã–∫–∞ - –≤—Å–µ —Ç—Ä–µ–∫–∏ –Ω–∞ 6% (–Ω–∞ 20% —Ç–∏—à–µ —á–µ–º –±—ã–ª–æ)
            menu: 0.06,
            tournamentLobby: 0.06,
            gameplay: 0.06,
            boss: 0.06,

            // –ò–≥—Ä–æ–∫
            playerShoot: 0.6,
            player1: 0.7,
            player3: 0.7,
            player12: 0.7,

            // –í—Ä–∞–≥–∏
            crabDeath: 0.8,

            // UI
            buttonClick: 0.8,
            toasty: 0.9, // –ì—Ä–æ–º–∫–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!
            cu: 0.9, // –ì—Ä–æ–º–∫–æ –∫–∞–∫ sailor!

            // –£—Å–∏–ª–µ–Ω–∏—è (–Ω–∞ 20% —Ç–∏—à–µ)
            boostDefault: 0.56,
            boostCoinShower: 0.48,
            boostAutoTarget: 0.56,
            boostGravityWell: 0.64,
            boostHealthBoost: 0.48,
            boostIceFreeze: 0.56,
            boostInvincibility: 0.64,
            boostMultiShot: 0.56,
            boostPiercingBullets: 0.56,
            boostPointsFreeze: 0.48,
            boostRapidFire: 0.64,
            boostRicochet: 0.56,
            boostScoreMultiplier: 0.48,
            boostShieldBarrier: 0.64,
            boostSpeedTamer: 0.56,
            boostWaveBlast: 0.72
        };

        // üìÇ –ü—É—Ç–∏ –∫ –∑–≤—É–∫–æ–≤—ã–º —Ñ–∞–π–ª–∞–º (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã)
        const soundsBasePath = this.detectSoundsPath();
        this.soundPaths = {
            music: {
                menu: `${soundsBasePath}/music/menu.mp3`,
                tournamentLobby: `${soundsBasePath}/music/tournamentLobby.mp3`,
                gameplay: `${soundsBasePath}/music/gameplay.mp3`,
                boss: `${soundsBasePath}/music/boss.mp3`
                // victory - –¥–æ–±–∞–≤–∏–º –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ñ–∞–π–ª
            },
            sfx: {
                // –ò–≥—Ä–æ–∫
                playerShoot: `${soundsBasePath}/sfx/player/shoot.wav`,
                player1: `${soundsBasePath}/sfx/player/1.wav`,
                player3: `${soundsBasePath}/sfx/player/3.wav`,
                player12: `${soundsBasePath}/sfx/player/12.wav`,

                // –í—Ä–∞–≥–∏
                crabDeath: `${soundsBasePath}/sfx/enemies/crab-death.wav`,

                // UI
                buttonClick: `${soundsBasePath}/sfx/ui/button.wav`,
                toasty: `${soundsBasePath}/sfx/ui/toasty.wav`,
                cu: `${soundsBasePath}/sfx/ui/CU.wav`,

                // –£—Å–∏–ª–µ–Ω–∏—è - –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                boostDefault: `${soundsBasePath}/sfx/boosts/default.wav`,
                boostCoinShower: `${soundsBasePath}/sfx/boosts/coinShower.wav`,
                boostAutoTarget: `${soundsBasePath}/sfx/boosts/Auto-Target.wav`,
                boostGravityWell: `${soundsBasePath}/sfx/boosts/GravityWell.wav`,
                boostHealthBoost: `${soundsBasePath}/sfx/boosts/HealthBoost.wav`,
                boostIceFreeze: `${soundsBasePath}/sfx/boosts/IceFreeze.wav`,
                boostInvincibility: `${soundsBasePath}/sfx/boosts/Invincibility.wav`,
                boostMultiShot: `${soundsBasePath}/sfx/boosts/Multi-Shot.wav`,
                boostPiercingBullets: `${soundsBasePath}/sfx/boosts/PiercingBullets.wav`,
                boostPointsFreeze: `${soundsBasePath}/sfx/boosts/PointsFreeze.wav`,
                boostRapidFire: `${soundsBasePath}/sfx/boosts/RapidFire.wav`,
                boostRicochet: `${soundsBasePath}/sfx/boosts/Ricochet.wav`,
                boostScoreMultiplier: `${soundsBasePath}/sfx/boosts/ScoreMultiplier.wav`,
                boostShieldBarrier: `${soundsBasePath}/sfx/boosts/ShieldBarrier.wav`,
                boostSpeedTamer: `${soundsBasePath}/sfx/boosts/timeFramer.wav`, // timeFramer.wav = speedTamer
                boostWaveBlast: `${soundsBasePath}/sfx/boosts/WaveBlast.wav`
            }
            // ambient - –¥–æ–±–∞–≤–∏–º –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Ñ–∞–π–ª—ã
        };

        // üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏
        this.loadedSounds = new Map();
        this.loadedMusic = new Map();

        // üîá –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞
        this.muted = false;
        this.enabled = true;

        // üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        this.audioContext = null;
        this.unlocked = false;

        this.init();
    }

    // üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    async init() {
        try {
            // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
            this.loadSettings();

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            this.setupMobileAudio();

            Logger.info('üéµ Sound Manager initialized successfully');
        } catch (error) {
            Logger.error('‚ùå Sound Manager initialization failed:', error);
            this.enabled = false;
        }
    }

    // üì± –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ë–ò–õ–¨–ù–û–ì–û –ê–£–î–ò–û
    setupMobileAudio() {
        const unlockAudio = () => {
            if (this.unlocked) return;

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–∏—à–∏–Ω—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            const buffer = this.audioContext.createBuffer(1, 1, 22050);
            const source = this.audioContext.createBufferSource();
            source.buffer = buffer;
            source.connect(this.audioContext.destination);
            source.start(0);

            this.unlocked = true;
            Logger.info('üì± Mobile audio unlocked');

            // üéµ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—É–∑—ã–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            setTimeout(() => {
                const button = document.getElementById('musicToggleBtn');
                if (button && !this.currentMusic) {
                    button.innerHTML = 'üéµ MUSIC: OFF';
                    button.style.background = 'rgba(255,100,100,0.2)';
                    button.style.borderColor = 'rgba(255,100,100,0.5)';
                }
                Logger.info('üéµ Audio unlocked - user can now start music manually');
            }, 100);

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            document.removeEventListener('touchstart', unlockAudio);
            document.removeEventListener('touchend', unlockAudio);
            document.removeEventListener('mousedown', unlockAudio);
            document.removeEventListener('keydown', unlockAudio);
            document.removeEventListener('click', unlockAudio);
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
        document.addEventListener('touchstart', unlockAudio, false);
        document.addEventListener('touchend', unlockAudio, false);
        document.addEventListener('mousedown', unlockAudio, false);
        document.addEventListener('keydown', unlockAudio, false);
        document.addEventListener('click', unlockAudio, false);
    }

    // üìÇ –ó–ê–ì–†–£–ó–ö–ê –ó–í–£–ö–ê
    async loadSound(key, path, isMusic = false) {
        if (!this.enabled) return null;

        try {
            const audio = new Audio();
            audio.crossOrigin = 'anonymous';

            return new Promise((resolve, reject) => {
                audio.onloadeddata = () => {
                    const individualVolume = this.getSoundVolume(key);

                    if (isMusic) {
                        audio.loop = true;
                        audio.volume = this.musicVolume * this.masterVolume * individualVolume;
                        this.loadedMusic.set(key, audio);
                        // Logger.info(`üéµ Music loaded: ${key}, volume: ${(individualVolume * 100).toFixed(0)}%`);
                    } else {
                        audio.volume = this.sfxVolume * this.masterVolume * individualVolume;
                        this.loadedSounds.set(key, audio);
                        // Logger.info(`üîä Sound loaded: ${key}, volume: ${(individualVolume * 100).toFixed(0)}%`);
                    }
                    resolve(audio);
                };

                audio.onerror = () => {
                    // Logger.warn(`‚ö†Ô∏è Failed to load sound: ${path}`); // –£–±–∏—Ä–∞–µ–º —Å–ø–∞–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    resolve(null); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–≤—É–∫–æ–≤
                };

                audio.src = path;
            });
        } catch (error) {
            Logger.error(`‚ùå Error loading sound ${key}:`, error);
            return null;
        }
    }

    // üîÑ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–í–£–ö–û–í
    async preloadSounds() {
        if (!this.enabled) return;

        const loadPromises = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º—É–∑—ã–∫—É
        for (const [key, path] of Object.entries(this.soundPaths.music)) {
            loadPromises.push(this.loadSound(key, path, true));
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for (const [key, path] of Object.entries(this.soundPaths.sfx)) {
            loadPromises.push(this.loadSound(key, path, false));
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –∑–≤—É–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.soundPaths.ambient) {
            for (const [key, path] of Object.entries(this.soundPaths.ambient)) {
                loadPromises.push(this.loadSound(key, path, false));
            }
        }

        try {
            await Promise.all(loadPromises);
            const loadedMusic = this.loadedMusic.size;
            const loadedSounds = this.loadedSounds.size;
            Logger.info(`üéµ Sound system ready: ${loadedMusic} music tracks, ${loadedSounds} sound effects`);
        } catch (error) {
            Logger.error('‚ùå Error preloading sounds:', error);
        }
    }

    // üéµ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ú–£–ó–´–ö–ò –° –ö–†–û–°–°–§–ï–ô–î–û–ú
    playMusic(track, fadeIn = false, crossfade = false) {
        if (!this.enabled || this.muted) {
            Logger.warn(`‚ö†Ô∏è Music playback blocked: enabled=${this.enabled}, muted=${this.muted}`);
            return;
        }

        const music = this.loadedMusic.get(track);
        if (!music) {
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏ - –Ω–µ —Å–ø–∞–º–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            return;
        }

        // –ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç —ç—Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.currentMusic === music && !music.paused) {
            Logger.info(`üéµ Track ${track} already playing, continuing...`);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
        if (this.currentMusic && !this.currentMusic.paused) {
            const currentTrackName = this.getCurrentTrackName();
            if (currentTrackName) {
                this.musicStates.set(currentTrackName, {
                    currentTime: this.currentMusic.currentTime,
                    volume: this.currentMusic.volume
                });
                Logger.info(`üíæ Saved state for ${currentTrackName}: ${this.currentMusic.currentTime.toFixed(2)}s`);
            }
        }

        // –ö—Ä–æ—Å—Å—Ñ–µ–π–¥: –ø–ª–∞–≤–Ω–æ –∑–∞—Ç—É—Ö–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–µ–∫
        if (crossfade && this.currentMusic && !this.currentMusic.paused) {
            this.fadeOut(this.currentMusic, 1000);
        } else if (this.currentMusic) {
            // –û–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞
            this.currentMusic.pause();
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
        const savedState = this.musicStates.get(track);
        if (savedState) {
            music.currentTime = savedState.currentTime;
            Logger.info(`üîÑ Restored ${track} from ${savedState.currentTime.toFixed(2)}s`);
        } else {
            music.currentTime = 0;
        }

        this.currentMusic = music;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞
        const individualVolume = this.getSoundVolume(track);
        const finalVolume = this.musicVolume * this.masterVolume * individualVolume;
        music.volume = fadeIn ? 0 : finalVolume;

        Logger.info(`üéµ Playing music: ${track}, individual: ${individualVolume}, final: ${finalVolume.toFixed(2)}`);

        music.play().then(() => {
            if (fadeIn) {
                this.fadeIn(music, finalVolume, 1000);
            }
            Logger.info(`‚úÖ Music playing successfully: ${track}`);
        }).catch(error => {
            Logger.error(`‚ùå Error playing music ${track}:`, error);
            Logger.info(`Audio context state: ${this.audioContext?.state}, unlocked: ${this.unlocked}`);
        });
    }

    // üéõÔ∏è –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ì–†–û–ú–ö–û–°–¢–ò –ó–í–£–ö–ê
    getSoundVolume(trackName) {
        return this.soundVolumes[trackName] || 1.0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100% –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    }

    // üéµ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ï–ù–ò –¢–ï–ö–£–©–ï–ì–û –¢–†–ï–ö–ê
    getCurrentTrackName() {
        if (!this.currentMusic) return null;

        for (const [trackName, audio] of this.loadedMusic.entries()) {
            if (audio === this.currentMusic) {
                return trackName;
            }
        }
        return null;
    }

    // üîä –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ó–í–£–ö–û–í–û–ì–û –≠–§–§–ï–ö–¢–ê
    playSound(effect, volume = 1.0, pitch = 1.0) {
        if (!this.enabled || this.muted) return;

        const sound = this.loadedSounds.get(effect);
        if (!sound) {
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–≤—É–∫–∏ - –Ω–µ —Å–ø–∞–º–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            return;
        }

        try {
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            const audioClone = sound.cloneNode();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤—É–∫–∞
            const individualVolume = this.getSoundVolume(effect);
            const finalVolume = Math.min(1.0, (this.sfxVolume * this.masterVolume * volume * individualVolume));
            audioClone.volume = finalVolume;

            // –ò–∑–º–µ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Ç–æ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (pitch !== 1.0) {
                audioClone.playbackRate = pitch;
            }

            audioClone.play().catch(error => {
                Logger.error(`‚ùå Error playing sound ${effect}:`, error);
            });
        } catch (error) {
            Logger.error(`‚ùå Error cloning sound ${effect}:`, error);
        }
    }

    // üéÅ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ó–í–£–ö–ê –£–°–ò–õ–ï–ù–ò–Ø –° FALLBACK
    playBoostSound(boostName, volume = 0.7, pitch = 1.0) {
        if (!this.enabled || this.muted) return;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —É—Å–∏–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –∑–≤—É–∫–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        const specificSoundKey = `boost${boostName.charAt(0).toUpperCase()}${boostName.slice(1)}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–≤—É–∫ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å–∏–ª–µ–Ω–∏—è
        if (this.loadedSounds.has(specificSoundKey)) {
            this.playSound(specificSoundKey, volume, pitch);
            Logger.info(`üéµ Playing specific boost sound: ${specificSoundKey}`);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∑–≤—É–∫ —É—Å–∏–ª–µ–Ω–∏—è
            this.playSound('boostDefault', volume, pitch);
            Logger.info(`üéµ Playing default boost sound for: ${boostName} (${specificSoundKey} not found)`);
        }
    }

    // üéöÔ∏è –ü–õ–ê–í–ù–û–ï –ü–û–Ø–í–õ–ï–ù–ò–ï –ó–í–£–ö–ê
    fadeIn(audio, targetVolume, duration) {
        const startVolume = 0;
        const volumeStep = targetVolume / (duration / 50);
        let currentVolume = startVolume;

        const fadeInterval = setInterval(() => {
            currentVolume += volumeStep;
            if (currentVolume >= targetVolume) {
                currentVolume = targetVolume;
                clearInterval(fadeInterval);
            }
            audio.volume = currentVolume;
        }, 50);
    }

    // üéöÔ∏è –ü–õ–ê–í–ù–û–ï –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –ó–í–£–ö–ê
    fadeOut(audio, duration, pauseAtEnd = true) {
        const startVolume = audio.volume;
        const volumeStep = startVolume / (duration / 50);
        let currentVolume = startVolume;

        const fadeInterval = setInterval(() => {
            currentVolume -= volumeStep;
            if (currentVolume <= 0) {
                currentVolume = 0;
                if (pauseAtEnd) {
                    audio.pause();
                    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentTime –¥–ª—è –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞
                }
                clearInterval(fadeInterval);
            }
            audio.volume = currentVolume;
        }, 50);
    }

    // ‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –ú–£–ó–´–ö–ò
    stopMusic(fadeOut = false) {
        if (!this.currentMusic) return;

        if (fadeOut) {
            this.fadeOut(this.currentMusic, 1000);
        } else {
            this.currentMusic.pause();
            this.currentMusic.currentTime = 0;
        }

        this.currentMusic = null;
        Logger.info('üîá Music stopped');
    }

    // ‚è∏Ô∏è –ü–ê–£–ó–ê/–í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–£–ó–´–ö–ò
    pauseMusic() {
        if (this.currentMusic && !this.musicPaused) {
            this.currentMusic.pause();
            this.musicPaused = true;
        }
    }

    resumeMusic() {
        if (this.currentMusic && this.musicPaused) {
            this.currentMusic.play();
            this.musicPaused = false;
        }
    }

    // üîá –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–í–£–ö–û–ú
    mute() {
        this.muted = true;
        if (this.currentMusic) {
            this.currentMusic.volume = 0;
        }
        this.saveSettings();
    }

    unmute() {
        this.muted = false;
        if (this.currentMusic) {
            this.currentMusic.volume = this.musicVolume * this.masterVolume;
        }
        this.saveSettings();
    }

    toggleMute() {
        if (this.muted) {
            this.unmute();
        } else {
            this.mute();
        }
    }

    // üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ì–†–û–ú–ö–û–°–¢–ò
    setMasterVolume(volume) {
        this.masterVolume = Math.max(0, Math.min(1, volume));
        this.updateAllVolumes();
        this.saveSettings();
    }

    setMusicVolume(volume) {
        this.musicVolume = Math.max(0, Math.min(1, volume));
        if (this.currentMusic) {
            this.currentMusic.volume = this.musicVolume * this.masterVolume;
        }
        this.saveSettings();
    }

    setSfxVolume(volume) {
        this.sfxVolume = Math.max(0, Math.min(1, volume));
        this.saveSettings();
    }

    setAmbientVolume(volume) {
        this.ambientVolume = Math.max(0, Math.min(1, volume));
        this.saveSettings();
    }

    // üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –ì–†–û–ú–ö–û–°–¢–ï–ô
    updateAllVolumes() {
        if (this.currentMusic) {
            this.currentMusic.volume = this.musicVolume * this.masterVolume;
        }
    }

    // üéõÔ∏è –£–°–¢–ê–ù–û–í–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ì–†–û–ú–ö–û–°–¢–ò –ó–í–£–ö–ê
    setSoundVolume(soundName, volume) {
        this.soundVolumes[soundName] = Math.max(0, Math.min(1, volume));
        this.saveSettings();
        Logger.info(`üéõÔ∏è Set ${soundName} volume to ${(volume * 100).toFixed(0)}%`);
    }

    // üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö
    saveSettings() {
        const settings = {
            masterVolume: this.masterVolume,
            musicVolume: this.musicVolume,
            sfxVolume: this.sfxVolume,
            ambientVolume: this.ambientVolume,
            muted: this.muted,
            soundVolumes: this.soundVolumes // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        };
        localStorage.setItem('pharosInvadersSoundSettings', JSON.stringify(settings));
    }

    // üìÅ –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö
    loadSettings() {
        try {
            const saved = localStorage.getItem('pharosInvadersSoundSettings');
            if (saved) {
                const settings = JSON.parse(saved);
                this.masterVolume = settings.masterVolume || 0.7;
                this.musicVolume = settings.musicVolume || 0.5;
                this.sfxVolume = settings.sfxVolume || 0.8;
                this.ambientVolume = settings.ambientVolume || 0.3;
                this.muted = settings.muted || false;

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                if (settings.soundVolumes) {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±–∞–∑–æ–≤—ã–º–∏
                    this.soundVolumes = { ...this.soundVolumes, ...settings.soundVolumes };
                }
            }
        } catch (error) {
            Logger.error('‚ùå Error loading sound settings:', error);
        }
    }

    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò
    getStatus() {
        return {
            enabled: this.enabled,
            muted: this.muted,
            currentMusic: this.currentMusic ? 'playing' : 'none',
            volumes: {
                master: this.masterVolume,
                music: this.musicVolume,
                sfx: this.sfxVolume,
                ambient: this.ambientVolume
            },
            individualVolumes: this.soundVolumes,
            loadedSounds: this.loadedSounds.size,
            loadedMusic: this.loadedMusic.size
        };
    }

    // üßπ –û–ß–ò–°–¢–ö–ê
    destroy() {
        this.stopMusic();
        this.loadedSounds.clear();
        this.loadedMusic.clear();
        if (this.audioContext) {
            this.audioContext.close();
        }
    }
}

// üåê –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.soundManager = new SoundManager();

// üéõÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏)
window.setSoundVolume = (soundName, volume) => {
    if (window.soundManager) {
        window.soundManager.setSoundVolume(soundName, volume);
    }
};

window.getSoundStatus = () => {
    if (window.soundManager) {
        console.table(window.soundManager.soundVolumes);
        return window.soundManager.getStatus();
    }
};

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SoundManager;
}