// üèÜ PHAROS INVADERS - TOURNAMENT MANAGER
// Client-side tournament management system

class TournamentManager {
    constructor() {
        this.web3 = null;
        this.contract = null;
        this.account = null;
        this.connected = false;
        this.currentTournamentId = null;
        this.gameHash = null;
        this.attemptCount = 0;
        
        // üóÑÔ∏è –ö–µ—à –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        this.cache = new Map();
        this.cacheTimeout = TOURNAMENT_CONSTANTS.CACHE.DEFAULT_TTL;
        
        // üîÑ –ë–∞—Ç—á–∏–Ω–≥ blockchain –∑–∞–ø—Ä–æ—Å–æ–≤
        this.batchQueue = [];
        this.batchTimeout = null;
        this.batchDelay = TOURNAMENT_CONSTANTS.CACHE.BATCH_DELAY;

        this.config = {
            NETWORK_NAME: 'Pharos Testnet',
            RPC_URL: 'https://testnet.dplabs-internal.com',
            CHAIN_ID: TOURNAMENT_CONSTANTS.BLOCKCHAIN.PHAROS_TESTNET_CHAIN_ID,
            CONTRACT_ADDRESS: '0x454064eA4517A80b0388EEeFFFBf2Efb85a86061',
            ENTRY_FEE: '0.005'
        };

        // Smart contract ABI –¥–ª—è PharosInvadersTournament
        this.contractABI = [
            // ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_playerName", "type": "bytes32"}
                ],
                "name": "registerForTournament",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_score", "type": "uint256"},
                    {"name": "_playerName", "type": "bytes32"},
                    {"name": "_gameHash", "type": "bytes32"}
                ],
                "name": "submitScore",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_nonce", "type": "uint256"}
                ],
                "name": "generateGameHash",
                "outputs": [{"name": "", "type": "bytes32"}],
                "stateMutability": "view",
                "type": "function"
            },

            // ========== –ß–¢–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò ==========
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "getTournamentInfo",
                "outputs": [
                    {"name": "entryFee", "type": "uint256"},
                    {"name": "startTime", "type": "uint256"},
                    {"name": "endTime", "type": "uint256"},
                    {"name": "prizePool", "type": "uint256"},
                    {"name": "isActive", "type": "bool"},
                    {"name": "isFinished", "type": "bool"},
                    {"name": "participantCount", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "getTournamentLeaderboard",
                "outputs": [
                    {"name": "players", "type": "address[]"},
                    {"name": "scores", "type": "uint256[]"},
                    {"name": "names", "type": "bytes32[]"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_limit", "type": "uint256"}
                ],
                "name": "getTopPlayers",
                "outputs": [
                    {"name": "players", "type": "address[]"},
                    {"name": "scores", "type": "uint256[]"},
                    {"name": "names", "type": "bytes32[]"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_player", "type": "address"}
                ],
                "name": "isPlayerRegistered",
                "outputs": [{"name": "", "type": "bool"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_player", "type": "address"}
                ],
                "name": "getPlayerScore",
                "outputs": [
                    {"name": "score", "type": "uint256"},
                    {"name": "playerName", "type": "bytes32"},
                    {"name": "attempts", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "getPrizeDistribution",
                "outputs": [
                    {"name": "first", "type": "uint256"},
                    {"name": "second", "type": "uint256"},
                    {"name": "third", "type": "uint256"},
                    {"name": "ownerFee", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            },

            // ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========
            {
                "inputs": [
                    {"name": "_tournamentId", "type": "uint256"},
                    {"name": "_entryFee", "type": "uint256"},
                    {"name": "_duration", "type": "uint256"}
                ],
                "name": "startTournament",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "endTournament",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "autoEndTournament",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "distributePrizes",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_newGameContractAddress", "type": "address"}],
                "name": "updateGameContract",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {"name": "_user", "type": "address"},
                    {"name": "_permission", "type": "bool"}
                ],
                "name": "setAutoEndPermission",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "enableRefunds",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "claimRefund",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"name": "_tournamentId", "type": "uint256"}],
                "name": "emergencyStopTournament",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "withdrawFees",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },

            // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
            {
                "inputs": [],
                "name": "owner",
                "outputs": [{"name": "", "type": "address"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"name": "newOwner", "type": "address"}],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getContractBalance",
                "outputs": [{"name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "tournamentCounter",
                "outputs": [{"name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },

            // ========== –°–û–ë–´–¢–ò–Ø ==========
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": false, "name": "entryFee", "type": "uint256"},
                    {"indexed": false, "name": "startTime", "type": "uint256"},
                    {"indexed": false, "name": "endTime", "type": "uint256"}
                ],
                "name": "TournamentStarted",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": true, "name": "player", "type": "address"},
                    {"indexed": false, "name": "playerName", "type": "bytes32"}
                ],
                "name": "PlayerRegistered",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": true, "name": "player", "type": "address"},
                    {"indexed": false, "name": "score", "type": "uint256"},
                    {"indexed": false, "name": "attemptNumber", "type": "uint256"}
                ],
                "name": "ScoreSubmitted",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": false, "name": "totalParticipants", "type": "uint256"},
                    {"indexed": false, "name": "totalPrizePool", "type": "uint256"}
                ],
                "name": "TournamentEnded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": false, "name": "winners", "type": "address[]"},
                    {"indexed": false, "name": "prizes", "type": "uint256[]"},
                    {"indexed": false, "name": "totalPrizePool", "type": "uint256"}
                ],
                "name": "PrizesDistributed",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "tournamentId", "type": "uint256"},
                    {"indexed": true, "name": "player", "type": "address"},
                    {"indexed": false, "name": "amount", "type": "uint256"}
                ],
                "name": "RefundIssued",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": false, "name": "oldAddress", "type": "address"},
                    {"indexed": false, "name": "newAddress", "type": "address"}
                ],
                "name": "GameContractUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "name": "user", "type": "address"},
                    {"indexed": false, "name": "permission", "type": "bool"}
                ],
                "name": "AutoEndPermissionUpdated",
                "type": "event"
            }
        ];

    }

    // Connect to Web3
    async connect(walletConnector) {
        try {
            if (!walletConnector || !walletConnector.web3) {
                throw new Error('Wallet not connected');
            }

            this.web3 = walletConnector.web3;
            this.account = walletConnector.account;
            this.contract = new this.web3.eth.Contract(
                this.contractABI,
                this.config.CONTRACT_ADDRESS
            );
            this.connected = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            await this.testContractAccess();

            console.log('‚úÖ Tournament contract connected');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to connect tournament contract:', error);
            this.connected = false;
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    async testContractAccess() {
        try {

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const code = await this.web3.eth.getCode(this.config.CONTRACT_ADDRESS);
            
            if (code === '0x' || code === '0x0') {
                console.warn('‚ö†Ô∏è Contract not found at this address!');
                return false;
            }

            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π read-only –≤—ã–∑–æ–≤
            const counter = await this.contract.methods.tournamentCounter().call();
            return true;

        } catch (error) {
            console.error('‚ùå Contract access test failed:', error);
            
            if (error.message && error.message.includes('circuit breaker')) {
                console.error('üö® MetaMask Circuit Breaker is active for this contract!');
                console.error('üí° Most likely cause: Contract not deployed at this address');
                console.error('üîß Solutions:');
                console.error('   1. Check tournament/check-contracts.html to verify contract existence');
                console.error('   2. Use tournament/debug-contract.html for detailed diagnostics');
                console.error('   3. Verify you are on Pharos Testnet (Chain ID: 688688)');
                console.error('   4. Confirm contract address is correct');
            }
            
            return false;
        }
    }

    // ========== CACHE FUNCTIONS ==========
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    setCacheData(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏)
    getCacheData(key) {
        const cached = this.cache.get(key);
        if (!cached) {
            return null;
        }
        
        const age = Date.now() - cached.timestamp;
        if (age > this.cacheTimeout) {
            this.cache.delete(key);
            return null;
        }
        return cached.data;
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö)
    invalidateCache(tournamentId) {
        const keysToDelete = [];
        for (const key of this.cache.keys()) {
            if (key.includes(`_${tournamentId}`)) {
                keysToDelete.push(key);
            }
        }
        keysToDelete.forEach(key => this.cache.delete(key));
    }

    // ========== BATCH FUNCTIONS ==========
    
    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–∞—Ç—á
    batchCall(contractMethod, ...args) {
        return new Promise((resolve, reject) => {
            this.batchQueue.push({
                method: contractMethod,
                args: args,
                resolve: resolve,
                reject: reject
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if (!this.batchTimeout) {
                this.batchTimeout = setTimeout(() => {
                    this.processBatch();
                }, this.batchDelay);
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á –∑–∞–ø—Ä–æ—Å–æ–≤
    async processBatch() {
        if (this.batchQueue.length === 0) {
            this.batchTimeout = null;
            return;
        }
        
        const currentBatch = this.batchQueue.splice(0); // –ë–µ—Ä–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        this.batchTimeout = null;
        
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const promises = currentBatch.map(item => 
                item.method(...item.args)
            );
            
            const results = await Promise.allSettled(promises);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–∏—Å—É
            currentBatch.forEach((item, index) => {
                const result = results[index];
                if (result.status === 'fulfilled') {
                    item.resolve(result.value);
                } else {
                    item.reject(result.reason);
                }
            });
            
            
        } catch (error) {
            console.error('‚ùå Batch processing failed:', error);
            currentBatch.forEach(item => item.reject(error));
        }
    }
    
    // –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
    async flushBatch() {
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
            await this.processBatch();
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    async loadMultipleTournaments(tournamentIds) {
        
        try {
            const results = await Promise.all(
                tournamentIds.map(async id => {
                    const [info, leaderboard] = await Promise.all([
                        this.getTournamentInfo(id).catch(e => ({ error: e.message })),
                        this.getTournamentLeaderboard(id).catch(e => [])
                    ]);
                    
                    return {
                        tournamentId: id,
                        info,
                        leaderboard
                    };
                })
            );
            
            return results;
            
        } catch (error) {
            console.error('‚ùå Failed to load multiple tournaments:', error);
            throw error;
        }
    }

    // ========== GAME FUNCTIONS ==========

    // Register for tournament with circuit breaker bypass attempts
    async registerForTournament(tournamentId, playerName = null) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            // Check if already registered
            const isRegistered = await this.contract.methods
                .isPlayerRegistered(tournamentId, this.account)
                .call();

            if (isRegistered) {
                throw new Error('Already registered for this tournament');
            }

            // Get tournament info
            const info = await this.getTournamentInfo(tournamentId);

            // Convert player name to bytes32
            let playerNameBytes32;
            if (playerName && playerName.trim()) {
                playerNameBytes32 = this.web3.utils.padRight(
                    this.web3.utils.toHex(playerName.trim()), 
                    64
                );
            } else {
                // Default name based on address
                const defaultName = `Player${this.account.slice(-4)}`;
                playerNameBytes32 = this.web3.utils.padRight(
                    this.web3.utils.toHex(defaultName), 
                    64
                );
            }


            // Method 1: Try standard contract call
            try {
                const tx = await this.contract.methods
                    .registerForTournament(tournamentId, playerNameBytes32)
                    .send({
                        from: this.account,
                        value: info.entryFee,
                        gas: TOURNAMENT_CONSTANTS.GAS.TOURNAMENT_REGISTRATION
                    });
                
                console.log('‚úÖ Registration successful! TX:', tx.transactionHash);
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
                this.invalidateCache(tournamentId);
                
                return tx.transactionHash;
                
            } catch (standardError) {
                console.warn('‚ö†Ô∏è Standard method failed:', standardError.message);
                
                if (!standardError.message.includes('circuit breaker')) {
                    // If it's not circuit breaker, throw the error
                    throw standardError;
                }
                
                console.log('üîÑ Attempting circuit breaker bypass...');
            }

            // Method 2: Try raw transaction
            try {
                const methodId = '0x' + this.web3.utils.keccak256('registerForTournament(uint256,bytes32)').substring(2, 10);
                const tournamentIdHex = this.web3.utils.padLeft(this.web3.utils.numberToHex(tournamentId), 64);
                const data = methodId + tournamentIdHex.substring(2) + playerNameBytes32.substring(2);
                
                const txParams = {
                    from: this.account,
                    to: this.config.CONTRACT_ADDRESS,
                    value: info.entryFee,
                    data: data,
                    gas: '0x30D40' // TOURNAMENT_CONSTANTS.GAS.TOURNAMENT_REGISTRATION
                };

                const txHash = await window.ethereum.request({
                    method: 'eth_sendTransaction',
                    params: [txParams]
                });

                console.log('‚úÖ Raw transaction successful! TX:', txHash);
                return txHash;
                
            } catch (rawError) {
                console.warn('‚ö†Ô∏è Raw transaction failed:', rawError.message);
            }

            // Method 3: Try minimal ABI
            try {
                const minimalABI = [{
                    "name": "registerForTournament",
                    "type": "function",
                    "inputs": [
                        {"name": "tournamentId", "type": "uint256"},
                        {"name": "playerName", "type": "bytes32"}
                    ],
                    "payable": true
                }];
                
                const minimalContract = new this.web3.eth.Contract(minimalABI, this.config.CONTRACT_ADDRESS);
                const tx = await minimalContract.methods.registerForTournament(tournamentId, playerNameBytes32).send({
                    from: this.account,
                    value: info.entryFee,
                    gas: 200000
                });
                
                console.log('‚úÖ Minimal ABI successful! TX:', tx.transactionHash);
                return tx.transactionHash;
                
            } catch (minimalError) {
                console.warn('‚ö†Ô∏è Minimal ABI failed:', minimalError.message);
            }

            // If all methods failed, throw the original error with instructions
            throw new Error(`‚ùå All registration methods failed due to MetaMask Circuit Breaker.\n\nüîß Solutions:\n1. Open tournament/bypass-circuit-breaker.html\n2. Try "Reset MetaMask State"\n3. Use OKX Wallet instead of MetaMask\n4. Wait 15-30 minutes and try again`);

        } catch (error) {
            console.error('‚ùå Failed to register:', error);
            
            // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            if (error.message && error.message.includes('circuit breaker')) {
                throw new Error(`‚ùå Contract Blocked: MetaMask Circuit Breaker is active for contract ${this.config.CONTRACT_ADDRESS}. This usually means:\n\n1. Contract is not deployed at this address\n2. Wrong network selected\n3. Contract has issues\n\nüîß Check: Open tournament/debug-contract.html or tournament/check-contracts.html to diagnose the issue.`);
            } else if (error.message && error.message.includes('revert')) {
                throw new Error('Transaction failed: ' + error.message);
            } else if (error.message && error.message.includes('insufficient funds')) {
                throw new Error('Insufficient funds to pay tournament entry fee.');
            }
            
            throw error;
        }
    }

    // Submit tournament score
    async submitTournamentScore(tournamentId, score, playerName) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            console.log('üìä Submitting score:', {
                tournamentId: tournamentId,
                score: score,
                playerName: playerName,
                account: this.account,
                contractAddress: this.contract._address
            });
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
            
            try {
                const currentPlayerInfo = await this.contract.methods
                    .getPlayerScore(tournamentId, this.account)
                    .call();
                
                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                let currentScore = 0;
                let currentAttempts = 0;
                
                if (Array.isArray(currentPlayerInfo)) {
                    currentScore = parseInt(currentPlayerInfo[0] || 0);
                    currentAttempts = parseInt(currentPlayerInfo[2] || 0);
                } else if (typeof currentPlayerInfo === 'object') {
                    currentScore = parseInt(currentPlayerInfo.score || 0);
                    currentAttempts = parseInt(currentPlayerInfo.attempts || 0);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                if (currentAttempts >= 3) {
                    console.warn(`‚ö†Ô∏è Player has ${currentAttempts}/3 attempts used. Contract may reject.`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—á–µ—Ç–∞ 
                if (currentScore > 0 && score <= currentScore) {
                    console.warn(`‚ö†Ô∏è New score ${score} ‚â§ current score ${currentScore}. Contract may reject.`);
                }
                
            } catch (scoreCheckError) {
                console.warn('‚ö†Ô∏è Score check warning:', scoreCheckError.message);
                // ‚ö° –í–°–ï–ì–î–ê –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º - –ø—É—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–µ—à–∞–µ—Ç
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            try {
                const tournamentInfo = await this.getTournamentInfo(tournamentId);
                
                if (!tournamentInfo.isActive) {
                    const errorMsg = `Tournament ${tournamentId} is not active`;
                    console.error('‚ùå', errorMsg);
                    throw new Error(errorMsg);
                }
                
                if (tournamentInfo.isFinished) {
                    const errorMsg = `Tournament ${tournamentId} is already finished`;
                    console.error('‚ùå', errorMsg);
                    throw new Error(errorMsg);
                }
            } catch (checkError) {
                console.warn('‚ö†Ô∏è Tournament info check failed:', checkError.message);
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
            try {
                const isRegistered = await this.isPlayerRegistered(tournamentId, this.account);
                
                if (!isRegistered) {
                    throw new Error(`Player ${this.account} is not registered for tournament ${tournamentId}`);
                }
            } catch (regError) {
                console.warn('‚ö†Ô∏è Registration check failed:', regError.message);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–≥—Ä–æ–∫–∞
            try {
                const playerAttempts = await this.getPlayerAttempts(tournamentId, this.account);
                
                if (playerAttempts >= 3) {
                    throw new Error(`Player ${this.account} has already used all attempts (${playerAttempts}/3) for tournament ${tournamentId}`);
                }
            } catch (attemptsError) {
                console.warn('‚ö†Ô∏è Attempts check failed:', attemptsError.message);
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                try {
                    const playerScore = await this.contract.methods
                        .getPlayerScore(tournamentId, this.account)
                        .call();
                } catch (directError) {
                    console.warn('‚ö†Ô∏è Direct contract check failed:', directError.message);
                }
            }

            // Convert player name to bytes32
            let playerNameBytes32;
            let finalPlayerName;
            if (playerName && playerName.trim()) {
                finalPlayerName = playerName.trim();
                playerNameBytes32 = this.web3.utils.padRight(
                    this.web3.utils.toHex(finalPlayerName), 
                    64
                );
            } else {
                // Default name based on address
                finalPlayerName = `Player${this.account.slice(-4)}`;
                playerNameBytes32 = this.web3.utils.padRight(
                    this.web3.utils.toHex(finalPlayerName), 
                    64
                );
            }
            
            console.log('üè∑Ô∏è Player name conversion:', {
                originalName: playerName,
                finalPlayerName: finalPlayerName,
                playerNameBytes32: playerNameBytes32,
                hexString: this.web3.utils.toHex(finalPlayerName),
                length: playerNameBytes32.length
            });

            // Generate game hash
            const nonce = Date.now() + Math.floor(Math.random() * 1000);
            const gameHash = await this.generateGameHash(tournamentId, nonce);
            
            // –ü–†–û–í–ï–†–ö–ê GAME CONTRACT (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
            
            // –§–ò–ù–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–ø—ã—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            try {
                const finalAttempts = await this.getPlayerAttempts(tournamentId, this.account);
                
                if (finalAttempts >= 3) {
                    throw new Error(`FINAL CHECK FAILED: Player has ${finalAttempts}/3 attempts used`);
                }
            } catch (finalError) {
                console.error('‚ö° FINAL: Attempt check failed:', finalError.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–ª–æ–∫—á–µ–π–Ω –∑–∞–ø—Ä–æ—Å–æ–º
            }

            // Try gas estimation first, fallback if it fails
            let gasLimit = 300000; // Default gas limit
            try {
                console.log('‚õΩ Estimating gas for submitScore...');
                const gasEstimate = await this.contract.methods
                    .submitScore(tournamentId, score, playerNameBytes32, gameHash)
                    .estimateGas({ from: this.account });
                    
                gasLimit = Math.round(gasEstimate * 1.2);
                console.log('‚õΩ Gas estimate successful:', gasEstimate, 'using:', gasLimit);
            } catch (gasError) {
                console.warn('‚ö†Ô∏è Gas estimation failed, using default gas limit:', gasLimit);
                console.warn('‚ö†Ô∏è Gas estimation error:', gasError.message);
            }

            // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ submitScore –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            try {
                const submitScoreMethod = this.contract.methods.submitScore;
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å dry-run –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                await this.contract.methods
                    .submitScore(tournamentId, score, playerNameBytes32, gameHash)
                    .call({ from: this.account });
                console.log('‚úÖ Dry-run call successful - parameters are valid');
                
            } catch (dryRunError) {
                console.error('‚ùå DRY-RUN FAILED:', dryRunError.message);
                console.error('‚ùå This indicates why the real transaction will fail:', {
                    message: dryRunError.message,
                    code: dryRunError.code,
                    data: dryRunError.data
                });
                
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
                console.warn('‚ö†Ô∏è Continuing with transaction despite dry-run failure...');
            }

            // Submit score
            console.log('üì§ Sending submitScore transaction with gas:', gasLimit);
            const tx = await this.contract.methods
                .submitScore(tournamentId, score, playerNameBytes32, gameHash)
                .send({
                    from: this.account,
                    gas: gasLimit
                });

            console.log('‚úÖ Score submitted! TX:', tx.transactionHash);
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ (–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
            this.invalidateCache(tournamentId);
            
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to submit score:', error);
            throw error;
        }
    }

    // Generate game hash
    async generateGameHash(tournamentId, nonce) {
        try {
            console.log('üîß generateGameHash inputs:', {
                tournamentId: tournamentId,
                nonce: nonce,
                tournamentIdType: typeof tournamentId,
                nonceType: typeof nonce,
                account: this.account
            });

            const gameHash = await this.contract.methods
                .generateGameHash(tournamentId, nonce)
                .call({ from: this.account });

            console.log('üîí Game hash generated successfully:', {
                gameHash: gameHash,
                length: gameHash.length,
                isValidHex: gameHash.startsWith('0x')
            });
            
            return gameHash;
        } catch (error) {
            console.error('‚ùå Failed to generate game hash:', error);
            console.error('‚ùå Hash generation error details:', {
                message: error.message,
                code: error.code,
                data: error.data
            });
            throw error;
        }
    }

    // Get game contract address from tournament contract
    async getGameContractAddress() {
        try {
            const gameContractAddress = await this.contract.methods.gameContractAddress().call();
            console.log('üéÆ Game contract address from tournament contract:', gameContractAddress);
            return gameContractAddress;
        } catch (error) {
            console.error('‚ùå Failed to get game contract address:', error);
            throw error;
        }
    }

    // Update game contract address (admin only)
    async updateGameContract(newAddress) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üîß Updating game contract address to: ${newAddress}`);

            const tx = await this.contract.methods
                .updateGameContract(newAddress)
                .send({
                    from: this.account,
                    gas: 100000
                });

            console.log('‚úÖ Game contract address updated! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to update game contract:', error);
            throw error;
        }
    }

    // Find active tournament by checking recent tournament IDs
    async findActiveTournament() {
        try {
            if (!this.contract) {
                throw new Error('Contract not connected');
            }


            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
            const tournamentCounter = await this.contract.methods.tournamentCounter().call();
            const currentCount = parseInt(tournamentCounter);
            console.log('üìä Tournament counter:', currentCount);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (max 10)
            const checkRange = Math.min(10, currentCount);
            const startId = Math.max(1, currentCount - checkRange + 1);
            

            for (let tournamentId = currentCount; tournamentId >= startId; tournamentId--) {
                try {
                    const tournamentInfo = await this.getTournamentInfo(tournamentId);
                    
                    const now = Math.floor(Date.now() / 1000);
                    const isActive = tournamentInfo.isActive && 
                                   now >= tournamentInfo.startTime && 
                                   now <= tournamentInfo.endTime;

                    console.log(`üîç Tournament ${tournamentId}:`, {
                        isActive: tournamentInfo.isActive,
                        isFinished: tournamentInfo.isFinished,
                        startTime: new Date(tournamentInfo.startTime * 1000).toLocaleString(),
                        endTime: new Date(tournamentInfo.endTime * 1000).toLocaleString(),
                        timeActive: isActive,
                        participantCount: tournamentInfo.participantCount
                    });

                    if (isActive) {
                        console.log(`‚úÖ Found active tournament: ${tournamentId}`);
                        return {
                            tournamentId: tournamentId,
                            ...tournamentInfo
                        };
                    }
                } catch (tournamentError) {
                    console.log(`‚ö†Ô∏è Tournament ${tournamentId} not found or error:`, tournamentError.message);
                    continue;
                }
            }

            console.log('‚ùå No active tournaments found');
            return null;

        } catch (error) {
            console.error('‚ùå Failed to find active tournament:', error);
            throw error;
        }
    }

    // Check if player is registered for specific tournament
    async checkPlayerRegistration(tournamentId, playerAddress = null) {
        try {
            const address = playerAddress || this.account;
            if (!address) {
                throw new Error('No player address provided');
            }

            const isRegistered = await this.contract.methods
                .isPlayerRegistered(tournamentId, address)
                .call();

            return isRegistered;

        } catch (error) {
            console.error('‚ùå Failed to check player registration:', error);
            return false;
        }
    }

    // Get tournament information (with caching)
    async getTournamentInfo(tournamentId) {
        try {
            const cacheKey = `tournamentInfo_${tournamentId}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cachedData = this.getCacheData(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (—á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥)
            const info = await this.batchCall(
                this.contract.methods.getTournamentInfo(tournamentId).call
            );

            const result = {
                entryFee: info.entryFee,
                startTime: parseInt(info.startTime),
                endTime: parseInt(info.endTime),
                prizePool: info.prizePool,
                isActive: info.isActive,
                isFinished: info.isFinished,
                participantCount: parseInt(info.participantCount)
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.setCacheData(cacheKey, result);
            return result;
            
        } catch (error) {
            console.error('‚ùå Failed to get tournament info:', error);
            throw error;
        }
    }

    // Get tournament leaderboard (with caching)
    async getTournamentLeaderboard(tournamentId) {
        try {
            const cacheKey = `leaderboard_${tournamentId}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cachedData = this.getCacheData(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (—á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥)
            const result = await this.batchCall(
                this.contract.methods.getTournamentLeaderboard(tournamentId).call
            );

            const players = result.players || result[0] || [];
            const scores = result.scores || result[1] || [];
            const names = result.names || result[2] || [];

            // Convert bytes32 names to strings and format data
            const leaderboard = [];
            for (let i = 0; i < players.length; i++) {
                let playerName = 'Player';
                try {
                    if (names[i] && names[i] !== '0x0000000000000000000000000000000000000000000000000000000000000000') {
                        playerName = this.web3.utils.hexToUtf8(names[i]).replace(/\0/g, '');
                    }
                } catch (e) {
                    playerName = `Player${players[i].slice(-4)}`;
                }

                leaderboard.push({
                    player: players[i],
                    score: parseInt(scores[i]),
                    playerName: playerName || `Player${players[i].slice(-4)}`
                });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.setCacheData(cacheKey, leaderboard);
            return leaderboard;
        } catch (error) {
            console.error('‚ùå Failed to get tournament leaderboard:', error);
            return [];
        }
    }

    // Get top players (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async getTopPlayers(tournamentId, limit = 10) {
        try {
            const result = await this.contract.methods
                .getTopPlayers(tournamentId, limit)
                .call();

            const players = result.players || result[0] || [];
            const scores = result.scores || result[1] || [];
            const names = result.names || result[2] || [];

            // Convert bytes32 names to strings and format data
            const topPlayers = [];
            for (let i = 0; i < players.length; i++) {
                let playerName = 'Player';
                try {
                    if (names[i] && names[i] !== '0x0000000000000000000000000000000000000000000000000000000000000000') {
                        playerName = this.web3.utils.hexToUtf8(names[i]).replace(/\0/g, '');
                    }
                } catch (e) {
                    playerName = `Player${players[i].slice(-4)}`;
                }

                topPlayers.push({
                    player: players[i],
                    score: parseInt(scores[i]),
                    playerName: playerName || `Player${players[i].slice(-4)}`
                });
            }

            return topPlayers;
        } catch (error) {
            console.error('‚ùå Failed to get top players:', error);
            return [];
        }
    }

    // Backward compatibility: —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è getLeaderboard —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç getTournamentLeaderboard
    async getLeaderboard(tournamentId) {
        return this.getTournamentLeaderboard(tournamentId);
    }

    // Check if player is registered
    async isPlayerRegistered(tournamentId, playerAddress) {
        try {
            return await this.contract.methods
                .isPlayerRegistered(tournamentId, playerAddress || this.account)
                .call();
        } catch (error) {
            return false;
        }
    }

    // Get player score and info (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async getPlayerScore(tournamentId, playerAddress) {
        try {
            const result = await this.contract.methods
                .getPlayerScore(tournamentId, playerAddress || this.account)
                .call();

            let playerName = 'Player';
            try {
                if (result.playerName && result.playerName !== '0x0000000000000000000000000000000000000000000000000000000000000000') {
                    playerName = this.web3.utils.hexToUtf8(result.playerName).replace(/\0/g, '');
                }
            } catch (e) {
                playerName = `Player${(playerAddress || this.account).slice(-4)}`;
            }

            return {
                score: parseInt(result.score),
                playerName: playerName || `Player${(playerAddress || this.account).slice(-4)}`,
                attempts: parseInt(result.attempts)
            };
        } catch (error) {
            console.error('‚ùå Failed to get player score:', error);
            return {
                score: 0,
                playerName: `Player${(playerAddress || this.account).slice(-4)}`,
                attempts: 0
            };
        }
    }

    // Backward compatibility: —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è getPlayerAttempts
    async getPlayerAttempts(tournamentId, playerAddress) {
        try {
            const playerInfo = await this.getPlayerScore(tournamentId, playerAddress);
            return playerInfo.attempts;
        } catch (error) {
            return 0;
        }
    }

    // Get prize distribution (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async getPrizeDistribution(tournamentId) {
        try {
            const result = await this.contract.methods
                .getPrizeDistribution(tournamentId)
                .call();

            return {
                first: this.web3.utils.fromWei(result.first, 'ether'),
                second: this.web3.utils.fromWei(result.second, 'ether'),
                third: this.web3.utils.fromWei(result.third, 'ether'),
                ownerFee: this.web3.utils.fromWei(result.ownerFee, 'ether')
            };
        } catch (error) {
            console.error('‚ùå Failed to get prize distribution:', error);
            return {
                first: '0',
                second: '0',
                third: '0',
                ownerFee: '0'
            };
        }
    }

    // Get contract balance (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async getContractBalance() {
        try {
            const balance = await this.contract.methods
                .getContractBalance()
                .call();

            return this.web3.utils.fromWei(balance, 'ether');
        } catch (error) {
            console.error('‚ùå Failed to get contract balance:', error);
            return '0';
        }
    }

    // Get tournament counter (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async getTournamentCounter() {
        try {
            const counter = await this.contract.methods
                .tournamentCounter()
                .call();

            return parseInt(counter);
        } catch (error) {
            console.error('‚ùå Failed to get tournament counter:', error);
            return 0;
        }
    }

    // ========== ADMIN FUNCTIONS ==========

    // Start tournament (admin only) with circuit breaker bypass
    // If tournamentId is null/undefined, will auto-generate
    async startTournament(tournamentId = null, entryFee, duration) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            // Auto-generate Tournament ID if not provided
            if (tournamentId === null || tournamentId === undefined) {
                console.log('üé≤ Auto-generating Tournament ID...');
                tournamentId = await this.generateSmartTournamentId('timestamp');
            }

            console.log(`üöÄ Starting tournament ${tournamentId}...`);

            const entryFeeWei = this.web3.utils.toWei(entryFee.toString(), 'ether');
            
            console.log('üöÄ Starting tournament with params:', {
                tournamentId: tournamentId,
                entryFee: entryFee,
                entryFeeWei: entryFeeWei,
                duration: duration,
                account: this.account,
                contractAddress: this.contract._address
            });

            // Method 1: Try standard contract call
            try {
                const tx = await this.contract.methods
                    .startTournament(tournamentId, entryFeeWei, duration)
                    .send({
                        from: this.account,
                        gas: TOURNAMENT_CONSTANTS.GAS.TOURNAMENT_REGISTRATION
                    });

                console.log('‚úÖ Tournament started! TX:', tx.transactionHash);
                return { 
                    transactionHash: tx.transactionHash,
                    tournamentId: tournamentId 
                };
                
            } catch (standardError) {
                console.warn('‚ö†Ô∏è Standard startTournament failed:', standardError.message);
                
                if (!standardError.message.includes('circuit breaker')) {
                    throw standardError;
                }
                
                console.log('üîÑ Attempting circuit breaker bypass for startTournament...');
            }

            // Method 2: Try raw transaction
            try {
                const methodId = '0x' + this.web3.utils.keccak256('startTournament(uint256,uint256,uint256)').substring(2, 10);
                const tournamentIdHex = this.web3.utils.padLeft(this.web3.utils.numberToHex(tournamentId), 64);
                const entryFeeHex = this.web3.utils.padLeft(this.web3.utils.toHex(entryFeeWei), 64);
                const durationHex = this.web3.utils.padLeft(this.web3.utils.numberToHex(duration), 64);
                
                const data = methodId + tournamentIdHex.substring(2) + entryFeeHex.substring(2) + durationHex.substring(2);
                
                const txParams = {
                    from: this.account,
                    to: this.config.CONTRACT_ADDRESS,
                    data: data,
                    gas: '0x30D40' // TOURNAMENT_CONSTANTS.GAS.TOURNAMENT_REGISTRATION
                };

                const txHash = await window.ethereum.request({
                    method: 'eth_sendTransaction',
                    params: [txParams]
                });

                console.log('‚úÖ Raw startTournament successful! TX:', txHash);
                return {
                    transactionHash: txHash,
                    tournamentId: tournamentId
                };
                
            } catch (rawError) {
                console.warn('‚ö†Ô∏è Raw startTournament failed:', rawError.message);
            }

            // Method 3: Try minimal ABI
            try {
                const minimalABI = [{
                    "name": "startTournament",
                    "type": "function",
                    "inputs": [
                        {"name": "tournamentId", "type": "uint256"},
                        {"name": "entryFee", "type": "uint256"},
                        {"name": "duration", "type": "uint256"}
                    ]
                }];
                
                const minimalContract = new this.web3.eth.Contract(minimalABI, this.config.CONTRACT_ADDRESS);
                const tx = await minimalContract.methods.startTournament(tournamentId, entryFeeWei, duration).send({
                    from: this.account,
                    gas: 200000
                });
                
                console.log('‚úÖ Minimal ABI startTournament successful! TX:', tx.transactionHash);
                return {
                    transactionHash: tx.transactionHash,
                    tournamentId: tournamentId
                };
                
            } catch (minimalError) {
                console.warn('‚ö†Ô∏è Minimal ABI startTournament failed:', minimalError.message);
            }

            throw new Error('‚ùå All startTournament methods failed. Check if you have admin rights and tournament is not already started.');

        } catch (error) {
            console.error('‚ùå Failed to start tournament:', error);
            throw error;
        }
    }

    // End tournament (admin only)
    async endTournament(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üèÅ Ending tournament ${tournamentId}...`);

            const gasEstimate = await this.contract.methods
                .endTournament(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .endTournament(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Tournament ended! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to end tournament:', error);
            throw error;
        }
    }

    // Distribute prizes (admin only)
    async distributePrizes(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üí∞ Distributing prizes for tournament ${tournamentId}...`);
            
            // ‚ö° –ù–û–í–û–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            try {
                const tournamentInfo = await this.getTournamentInfo(tournamentId);
                if (!tournamentInfo.isFinished) {
                    throw new Error(`Tournament ${tournamentId} is not finished (isFinished: ${tournamentInfo.isFinished})`);
                }
                if (!tournamentInfo.prizePool || tournamentInfo.prizePool === 0) {
                    throw new Error(`Tournament ${tournamentId} has no prize pool (prizePool: ${tournamentInfo.prizePool})`);
                }
                console.log(`‚úÖ Pre-check passed. Prize pool: ${tournamentInfo.prizePool} wei, isFinished: ${tournamentInfo.isFinished}`);
            } catch (preCheckError) {
                console.warn('‚ö†Ô∏è Pre-check failed:', preCheckError.message);
                throw new Error(`Cannot distribute prizes: ${preCheckError.message}`);
            }

            const gasEstimate = await this.contract.methods
                .distributePrizes(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .distributePrizes(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Prizes distributed! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to distribute prizes:', error);
            
            // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            if (error.message.includes('Tournament not finished')) {
                throw new Error('Tournament is not finished yet. Please end the tournament first.');
            } else if (error.message.includes('No prize pool')) {
                throw new Error('Tournament has no prize pool to distribute.');
            } else if (error.message.includes('revert')) {
                throw new Error(`Smart contract rejected: ${error.message}`);
            } else {
                throw error;
            }
        }
    }

    // Transfer ownership (owner only)
    async transferOwnership(newOwnerAddress) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üëë Transferring ownership to ${newOwnerAddress}...`);

            const gasEstimate = await this.contract.methods
                .transferOwnership(newOwnerAddress)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .transferOwnership(newOwnerAddress)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Ownership transferred! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to transfer ownership:', error);
            throw error;
        }
    }

    // Auto end tournament (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async autoEndTournament(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`‚è∞ Auto ending tournament ${tournamentId}...`);

            const gasEstimate = await this.contract.methods
                .autoEndTournament(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .autoEndTournament(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Tournament auto-ended! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to auto-end tournament:', error);
            throw error;
        }
    }

    // Update game contract (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async updateGameContract(newGameContractAddress) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üîÑ Updating game contract to ${newGameContractAddress}...`);

            const gasEstimate = await this.contract.methods
                .updateGameContract(newGameContractAddress)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .updateGameContract(newGameContractAddress)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Game contract updated! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to update game contract:', error);
            throw error;
        }
    }

    // Set auto end permission (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async setAutoEndPermission(userAddress, permission) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üîê Setting auto-end permission for ${userAddress}: ${permission}...`);

            const gasEstimate = await this.contract.methods
                .setAutoEndPermission(userAddress, permission)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .setAutoEndPermission(userAddress, permission)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Auto-end permission updated! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to set auto-end permission:', error);
            throw error;
        }
    }

    // Enable refunds (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async enableRefunds(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üí∞ Enabling refunds for tournament ${tournamentId}...`);

            const gasEstimate = await this.contract.methods
                .enableRefunds(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .enableRefunds(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Refunds enabled! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to enable refunds:', error);
            throw error;
        }
    }

    // Claim refund (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
    async claimRefund(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üí∞ Claiming refund for tournament ${tournamentId}...`);

            const gasEstimate = await this.contract.methods
                .claimRefund(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .claimRefund(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Refund claimed! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to claim refund:', error);
            throw error;
        }
    }

    // Emergency stop tournament (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async emergencyStopTournament(tournamentId) {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log(`üö® Emergency stopping tournament ${tournamentId}...`);

            const gasEstimate = await this.contract.methods
                .emergencyStopTournament(tournamentId)
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .emergencyStopTournament(tournamentId)
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Tournament emergency stopped! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to emergency stop tournament:', error);
            throw error;
        }
    }

    // Withdraw fees (–Ω–æ–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async withdrawFees() {
        try {
            if (!this.contract || !this.account) {
                throw new Error('Not connected to contract');
            }

            console.log('üí∞ Withdrawing fees...');

            const gasEstimate = await this.contract.methods
                .withdrawFees()
                .estimateGas({ from: this.account });

            const tx = await this.contract.methods
                .withdrawFees()
                .send({
                    from: this.account,
                    gas: Math.round(gasEstimate * 1.2)
                });

            console.log('‚úÖ Fees withdrawn! TX:', tx.transactionHash);
            return tx.transactionHash;

        } catch (error) {
            console.error('‚ùå Failed to withdraw fees:', error);
            throw error;
        }
    }

    // ========== TOURNAMENT ID GENERATION ==========

    // Generate random 6-character Tournament ID (letters + numbers)
    generateRandomTournamentId() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        // Convert to number (base36 to handle letters)
        const numericId = parseInt(result, 36);
        console.log(`üé≤ Generated Tournament ID: ${result} -> ${numericId}`);
        return numericId;
    }

    // Generate timestamp-based Tournament ID
    generateTimestampTournamentId() {
        const tournamentId = Date.now();
        console.log(`‚è∞ Generated Timestamp Tournament ID: ${tournamentId}`);
        return tournamentId;
    }

    // Find next available Tournament ID by checking existing ones
    async findNextAvailableTournamentId(startFrom = 2) {
        try {
            
            for (let id = startFrom; id <= startFrom + 100; id++) {
                try {
                    const info = await this.getTournamentInfo(id);
                    
                    // If startTime is 0, tournament was never created
                    if (info.startTime === 0 || info.startTime === '0') {
                        console.log(`‚úÖ Found available Tournament ID: ${id}`);
                        return id;
                    } else {
                        console.log(`‚ö†Ô∏è Tournament ID ${id} is already used`);
                    }
                } catch (error) {
                    // If error getting info, probably doesn't exist - safe to use
                    console.log(`‚úÖ Found available Tournament ID: ${id} (error suggests unused)`);
                    return id;
                }
            }
            
            // Fallback to random if no sequential ID found
            console.warn('‚ö†Ô∏è No sequential ID found, using random');
            return this.generateRandomTournamentId();
            
        } catch (error) {
            console.error('‚ùå Error finding available ID:', error);
            // Fallback to timestamp
            return this.generateTimestampTournamentId();
        }
    }

    // Smart Tournament ID generator with multiple strategies
    async generateSmartTournamentId(strategy = 'timestamp') {
        switch (strategy) {
            case 'sequential':
                return await this.findNextAvailableTournamentId();
            
            case 'random':
                return this.generateRandomTournamentId();
            
            case 'timestamp':
                return this.generateTimestampTournamentId();
            
            default:
                console.log('üîÑ Using default sequential strategy');
                return await this.findNextAvailableTournamentId();
        }
    }

    // ========== UTILITY FUNCTIONS ==========

    // Check if tournament is active
    async isTournamentActive(tournamentId) {
        try {
            const info = await this.getTournamentInfo(tournamentId);
            return info.isActive && !info.isFinished;
        } catch (error) {
            return false;
        }
    }

    // Check if tournament exists
    async tournamentExists(tournamentId) {
        try {
            const info = await this.getTournamentInfo(tournamentId);
            return info.startTime > 0; // If startTime > 0, tournament was created
        } catch (error) {
            return false;
        }
    }

    // Get full tournament status
    async getFullTournamentStatus(tournamentId) {
        try {
            const info = await this.getTournamentInfo(tournamentId);
            const exists = info.startTime > 0;

            if (!exists) {
                return {
                    status: 'NOT_CREATED',
                    info: null,
                    canRegister: false,
                    canPlay: false
                };
            }

            const now = Math.floor(Date.now() / 1000);
            let status = 'NOT_STARTED';

            if (info.isFinished) {
                status = 'ENDED';
            } else if (info.isActive) {
                if (now >= info.endTime) {
                    status = 'TIME_EXPIRED';
                } else {
                    status = 'ACTIVE';
                }
            }

            return {
                status,
                info,
                canRegister: status === 'ACTIVE' && now < info.endTime,
                canPlay: status === 'ACTIVE' && now < info.endTime,
                remainingTime: Math.max(0, info.endTime - now)
            };

        } catch (error) {
            console.error('Error getting tournament status:', error);
            return {
                status: 'ERROR',
                info: null,
                canRegister: false,
                canPlay: false
            };
        }
    }

    // Check admin rights
    isAdmin() {
        if (!this.account || !window.TOURNAMENT_CONFIG) return false;
        return window.TOURNAMENT_CONFIG.isAdmin(this.account);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å circuit breaker
    async checkCircuitBreakerStatus() {
        try {
            
            // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π read-only –≤—ã–∑–æ–≤
            const counter = await this.contract.methods.tournamentCounter().call();
            console.log('‚úÖ Circuit breaker OK, tournament counter:', counter);
            return true;
            
        } catch (error) {
            if (error.message && error.message.includes('circuit breaker')) {
                console.error('üö® Circuit breaker is ACTIVE');
                return false;
            } else {
                console.error('‚ùå Other error:', error.message);
                return false;
            }
        }
    }

    // Get contract owner address
    async getOwnerAddress() {
        try {
            const owner = await this.contract.methods
                .owner()
                .call();
            return owner;
        } catch (error) {
            console.error('‚ùå Failed to get owner address:', error);
            return null;
        }
    }

    // Subscribe to tournament events
    subscribeToTournamentEvents(tournamentId, callbacks) {
        if (!this.contract) return;

        // Subscribe to new player registrations
        this.contract.events.PlayerRegistered({
            filter: { tournamentId: tournamentId }
        })
        .on('data', (event) => {
            if (callbacks.onPlayerRegistered) {
                callbacks.onPlayerRegistered(event.returnValues);
            }
        });

        // Subscribe to tournament start
        this.contract.events.TournamentStarted({
            filter: { tournamentId: tournamentId }
        })
        .on('data', (event) => {
            if (callbacks.onTournamentStarted) {
                callbacks.onTournamentStarted(event.returnValues);
            }
        });

        // Subscribe to score submissions
        this.contract.events.ScoreSubmitted({
            filter: { tournamentId: tournamentId }
        })
        .on('data', (event) => {
            if (callbacks.onScoreSubmitted) {
                callbacks.onScoreSubmitted(event.returnValues);
            }
        });

        // Subscribe to tournament end
        this.contract.events.TournamentEnded({
            filter: { tournamentId: tournamentId }
        })
        .on('data', (event) => {
            if (callbacks.onTournamentEnded) {
                callbacks.onTournamentEnded(event.returnValues);
            }
        });

        console.log(`üîî Subscribed to tournament ${tournamentId} events`);
    }
}

// Create global instance
window.tournamentManager = new TournamentManager();

// –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
window.checkGameContract = async function() {
    
    if (!window.tournamentManager.contract) {
        console.log('‚ùå Tournament contract not connected');
        return;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const methods = Object.keys(window.tournamentManager.contract.methods);
    methods.forEach(method => {
        if (!method.includes('(')) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫
            console.log('  -', method);
        }
    });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è gameContractAddress
    try {
        
        // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ public –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        try {
            const gameContractAddress1 = await window.tournamentManager.contract.methods.gameContractAddress().call();
            console.log('‚úÖ Method 1 (gameContractAddress()): ', gameContractAddress1);
        } catch (e) {
            console.log('‚ùå Method 1 failed:', e.message);
        }
        
        // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ call –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try {
            const gameContractAddress2 = await window.tournamentManager.contract.methods['gameContractAddress()']().call();
            console.log('‚úÖ Method 2 (explicit call):', gameContractAddress2);  
        } catch (e) {
            console.log('‚ùå Method 2 failed:', e.message);
        }
        
        // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const hasGameContract = methods.includes('gameContractAddress');
        
        if (!hasGameContract) {
            console.log('‚ö†Ô∏è gameContractAddress method is NOT available in contract ABI');
            console.log('üí° This might mean:');
            console.log('   1. Variable is not public in smart contract');
            console.log('   2. ABI is incomplete');
            console.log('   3. Contract is different version');
            console.log('‚úÖ LIKELY SOLUTION: Game verification is probably DISABLED by default');
        }
        
    } catch (error) {
        console.error('‚ùå Failed to check game contract:', error);
    }
    
};

// –¢–ï–°–¢ –ì–ò–ü–û–¢–ï–ó–´ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å gameHash
window.testGameHashProblem = async function() {
    
    if (!window.tournamentManager.contract) {
        console.log('‚ùå Tournament contract not connected');
        return;
    }
    
    const tournamentId = 9;
    const nonce = Date.now();
    
    console.log('üß™ Testing gameHash generation vs submission timing...');
    
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        const hash1 = await window.tournamentManager.contract.methods
            .generateGameHash(tournamentId, nonce)
            .call({ from: window.tournamentManager.account });
        console.log('üîí Hash 1 (immediate):', hash1);
        
        // –ñ–¥—ë–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É  
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —Å —Ç–µ–º –∂–µ nonce
        const hash2 = await window.tournamentManager.contract.methods
            .generateGameHash(tournamentId, nonce)
            .call({ from: window.tournamentManager.account });
        console.log('üîí Hash 2 (after delay):', hash2);
        
        
        if (hash1 !== hash2) {
            console.log('‚ùå PROBLEM CONFIRMED: gameHash changes over time due to block.timestamp!');
            console.log('üí° SOLUTION: Need to generate hash at submission time, not beforehand');
        } else {
            console.log('‚úÖ Hashes match - not the problem');
        }
        
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }
    
};

// –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è gameHash
window.testHashDuplication = async function() {
    
    if (!window.tournamentManager.contract) {
        console.log('‚ùå Tournament contract not connected');
        return;
    }
    
    const tournamentId = 10; // Current tournament
    
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–µ—à–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ nonce
        const nonce1 = Date.now();
        const nonce2 = Date.now() + 1;
        const nonce3 = Date.now() + 2;
        
        const hash1 = await window.tournamentManager.contract.methods
            .generateGameHash(tournamentId, nonce1)
            .call({ from: window.tournamentManager.account });
            
        const hash2 = await window.tournamentManager.contract.methods
            .generateGameHash(tournamentId, nonce2)
            .call({ from: window.tournamentManager.account });
            
        const hash3 = await window.tournamentManager.contract.methods
            .generateGameHash(tournamentId, nonce3)
            .call({ from: window.tournamentManager.account });
        
        console.log('üîí Generated hashes:');
        console.log('  Hash 1 (nonce', nonce1, '):', hash1);
        console.log('  Hash 2 (nonce', nonce2, '):', hash2);
        console.log('  Hash 3 (nonce', nonce3, '):', hash3);
        
        console.log('  Hash1 == Hash2:', hash1 === hash2);
        console.log('  Hash1 == Hash3:', hash1 === hash3);
        console.log('  Hash2 == Hash3:', hash2 === hash3);
        
        if (hash1 === hash2 || hash1 === hash3 || hash2 === hash3) {
            console.log('‚ùå PROBLEM: Duplicate hashes detected!');
            console.log('üí° This could cause "Hash used" error in contract');
        } else {
            console.log('‚úÖ All hashes are unique');
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        console.log('  Tournament ID:', tournamentId);
        console.log('  Account:', window.tournamentManager.account);
        console.log('  Nonce range:', nonce1, '->', nonce3);
        
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }
    
};

// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–ª—É—á–∞–µ–º gameContractAddress –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
window.getGameContractAddressDirect = async function() {
    
    if (!window.tournamentManager.contract) {
        console.log('‚ùå Tournament contract not connected');
        return;
    }
    
    try {
        // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ Web3 –Ω–∞–ø—Ä—è–º—É—é
        const web3 = window.tournamentManager.web3;
        const contractAddress = window.tournamentManager.contract._address;
        
        // gameContractAddress –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–æ—Ç–µ 0 (–ø–µ—Ä–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ)
        const storageSlot0 = await web3.eth.getStorageAt(contractAddress, 0);
        
        // –ï—Å–ª–∏ —ç—Ç–æ address, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 bytes
        const gameContractFromStorage = '0x' + storageSlot0.slice(-40);
        console.log('üéÆ Game contract address from storage:', gameContractFromStorage);
        
        const isZero = gameContractFromStorage === '0x0000000000000000000000000000000000000000';
        
        if (isZero) {
            console.log('‚úÖ CONFIRMED: Game contract verification is DISABLED');
            console.log('üí° Problem is NOT in game contract verification');
        } else {
            console.log('‚ö†Ô∏è CONFIRMED: Game contract verification is ENABLED');
            const matches = gameContractFromStorage.toLowerCase() === '0xaf655fe9fa8cdf421a024509b1cfc15dee89d85e';
            
            if (!matches) {
                console.log('‚ùå PROBLEM FOUND: Wrong game contract address!');
                console.log('üí° This could be causing verification failures');
            }
        }
        
        return gameContractFromStorage;
        
    } catch (error) {
        console.error('‚ùå Direct storage read failed:', error);
    }
    
};

// –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º—ã —Å gameContract
window.fixGameContract = async function() {
    console.log('üîß === FIXING GAME CONTRACT ADDRESS ===');
    
    if (!window.tournamentManager.contract) {
        console.log('‚ùå Tournament contract not connected');
        return;
    }
    
    console.log('üîß Solution options:');
    console.log('  1. Disable verification: 0x0000000000000000000000000000000000000000');
    console.log('  2. Enable with correct contract: 0xaf655fe9fa8cdf421a024509b1cfc15dee89d85e');
    
    const choice = prompt('Choose option (1 to disable, 2 to enable with correct contract):');
    
    let newAddress;
    if (choice === '1') {
        newAddress = '0x0000000000000000000000000000000000000000';
        console.log('üîß Will DISABLE game verification');
    } else if (choice === '2') {
        newAddress = '0xaf655fe9fa8cdf421a024509b1cfc15dee89d85e';
        console.log('üîß Will ENABLE game verification with correct contract');
    } else {
        console.log('‚ùå Invalid choice. Cancelled.');
        return;
    }
    
    try {
        console.log('üîß Updating game contract address...');
        const txHash = await window.tournamentManager.updateGameContract(newAddress);
        console.log('‚úÖ Game contract address updated successfully!');
        console.log('üí° Now try playing the game again - score submission should work!');
        
    } catch (error) {
        console.error('‚ùå Failed to update game contract:', error.message);
        if (error.message.includes('Ownable')) {
            console.log('üí° Make sure you are connected with the admin wallet');
        }
    }
    
    console.log('üîß === FIX COMPLETE ===');
};

// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
window.testTournamentSearch = async function() {
    
    if (!window.tournamentManager || !window.tournamentManager.connected) {
        console.log('‚ùå Tournament manager not connected');
        return;
    }
    
    try {
        const activeTournament = await window.tournamentManager.findActiveTournament();
        
        if (activeTournament) {
            console.log('‚úÖ Found active tournament:', activeTournament);
            
            if (window.tournamentLobby) {
                await window.tournamentLobby.searchForActiveTournaments();
            }
        } else {
            console.log('‚ùå No active tournaments found');
        }
        
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }
    
};

console.log('üèÜ Tournament Manager loaded');
console.log('üí° Run checkGameContract() in console to diagnose game contract verification');
console.log('üß™ Run testGameHashProblem() to test hash timing issue');
console.log('üîß Run fixGameContract() to fix the game contract address problem!');
