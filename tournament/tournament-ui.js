// üé® PHAROS INVADERS - TOURNAMENT UI
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

class TournamentUI {
    constructor() {
        this.elements = {};
        this.gameModal = null;
        this.game = null;
        this.notifications = [];
        this.timers = {};
        this.isClosing = false;
        this.gameOverProcessed = false;
        this.closeGameTimer = null;
        this.init();
    }



    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    init() {
        this.cacheElements();
        this.createGameModal();
        this.setupEventListeners();
        this.injectStyles();
    }

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    cacheElements() {
        this.elements = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            body: document.body,
            mainContainer: document.querySelector('.main-container'),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ
            tournamentId: document.getElementById('tournamentId'),
            entryFee: document.getElementById('entryFee'),
            participantCount: document.getElementById('participantCount'),

            // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userStatus: document.getElementById('userStatus'),
            attemptIndicators: document.getElementById('attemptIndicators'),
            registerButton: document.getElementById('registerButton'),
            playButton: document.getElementById('playButton'),

            // –¢—É—Ä–Ω–∏—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            tournamentStatus: document.getElementById('tournamentStatus'),
            tournamentTimer: document.getElementById('tournamentTimer'),
            timerDisplay: document.getElementById('timerDisplay'),

            // –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
            totalPrize: document.getElementById('totalPrize'),
            firstPrize: document.getElementById('firstPrize'),
            secondPrize: document.getElementById('secondPrize'),
            thirdPrize: document.getElementById('thirdPrize'),

            // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
            leaderboardBody: document.getElementById('leaderboardBody'),
            refreshButton: document.getElementById('refreshButton'),

            // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            adminPanel: document.getElementById('adminPanel'),
            startTournamentBtn: document.getElementById('startTournamentBtn'),
            endTournamentBtn: document.getElementById('endTournamentBtn'),
            distributePrizesBtn: document.getElementById('distributePrizesBtn')
        };

    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–æ–¥–∞–ª–∞
    createGameModal() {
        const modal = document.createElement('div');
        modal.className = 'tournament-game-modal';
        modal.innerHTML = `
            <div class="game-modal-content">
                <div class="game-header">
                    <h2>üèÜ Tournament Game</h2>
                    <button class="close-game-btn" onclick="tournamentUI.forceExitGame()">‚úñ</button>
                </div>

                <canvas id="tournamentGameCanvas" width="800" height="600"></canvas>

                <div class="game-ui">
                    <div class="game-stats">
                        <span>Score: <span id="gameScore">0</span></span>
                        <span>Lives: <span id="gameLives">3</span></span>
                        <span>Level: <span id="gameLevel">1</span></span>
                    </div>
                    
                    <div class="game-controls">
                        <!-- EXIT button removed - close functionality moved to X button in header -->
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        this.gameModal = modal;

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –±—É—Å—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ, –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.createExternalBoostPanel();

    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –±—É—Å—Ç–æ–≤
    createExternalBoostPanel() {
        const boostPanel = document.createElement('div');
        boostPanel.id = 'boostPanel';
        boostPanel.className = 'tournament-boost-panel-external';
        boostPanel.innerHTML = `
            <div class="boost-panel-header">
                <span>‚≠ê Active Boosts</span>
            </div>
            <div id="boostPanelContent" class="boost-panel-content">
                <!-- –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
        `;

        document.body.appendChild(boostPanel);
        this.boostPanel = boostPanel;

        // –ü–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ BoostManager'–æ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±—É—Å—Ç–æ–≤
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        if (this.gameModal) {
            this.gameModal.addEventListener('click', (e) => {
                if (e.target === this.gameModal) {
                    this.forceExitGame();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Escape' && this.gameModal && this.gameModal.classList.contains('active')) {
                this.forceExitGame();
            }
        });

    }

    // ========== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    updateTournamentInfo(info) {
         if (this.elements.entryFee && tournamentInfo.entryFee) {
            this.elements.entryFee.textContent =
                `${TournamentUtils.formatCurrency(
                    window.web3.utils.fromWei(tournamentInfo.entryFee, 'ether')
                )} PHRS`;
        }

    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserStatus(status) {
        if (!this.elements.userStatus) return;

        let statusText = '';
        let statusClass = '';

        switch (status.status) {
            case 'disconnected':
                statusText = 'üîå Connect Wallet';
                statusClass = 'disconnected';
                break;
            case 'connected':
                statusText = 'üí∞ Register to Play';
                statusClass = 'connected';
                break;
            case 'registered':
                statusText = `üéÆ Ready to Play (${status.attempts}/3 attempts used)`;
                statusClass = 'registered';
                break;
            case 'finished':
                statusText = '‚úÖ All attempts completed';
                statusClass = 'finished';
                break;
        }

        this.elements.userStatus.textContent = statusText;
        this.elements.userStatus.className = `user-status ${statusClass}`;

        this.updateButtons(status);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    updateButtons(status) {
        if (this.elements.registerButton) {
            this.elements.registerButton.style.display =
                status.status === 'connected' ? 'block' : 'none';
        }

        if (this.elements.playButton) {
            this.elements.playButton.style.display =
                status.status === 'registered' && status.attempts < 3 ? 'block' : 'none';
        }
    }

    addBackToTournamentButton() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
        if (document.getElementById('backToTournamentBtn')) {
            return; // –ö–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å
        }

        // –ù–∞–π–¥–µ–º game-ui –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const gameUI = document.querySelector('.game-ui');
        if (gameUI) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            const backButton = document.createElement('button');
            backButton.id = 'backToTournamentBtn';
            backButton.className = 'back-tournament-btn';
            backButton.style.cssText = `
                background: linear-gradient(135deg, #ff6b35, #f7931e);
                color: white;
                border: none;
                padding: 15px 25px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                margin: 10px;
                box-shadow: 0 4px 15px rgba(255, 107, 53, 0.4);
                transition: all 0.3s ease;
            `;
            backButton.textContent = 'üèÜ Back to Tournament';

            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
            backButton.addEventListener('mouseenter', () => {
                backButton.style.transform = 'translateY(-2px)';
                backButton.style.boxShadow = '0 6px 20px rgba(255, 107, 53, 0.6)';
            });

            backButton.addEventListener('mouseleave', () => {
                backButton.style.transform = 'translateY(0)';
                backButton.style.boxShadow = '0 4px 15px rgba(255, 107, 53, 0.4)';
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            backButton.addEventListener('click', () => {
                this.closeGame();
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ UI
            gameUI.appendChild(backButton);

            // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            const closeBtn = gameUI.querySelector('.close-game-btn');
            if (closeBtn) {
                closeBtn.style.display = 'none';
            }

        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ø—ã—Ç–æ–∫
    updateAttemptIndicators(attempts) {
        if (!this.elements.attemptIndicators) {
            return;
        }

        const dots = this.elements.attemptIndicators.querySelectorAll('.attempt-dot');
        
        if (dots.length === 0) {
            return;
        }
        
        dots.forEach((dot, index) => {
            const attemptNumber = index + 1;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π
            dot.className = 'attempt-dot';
            
            if (attemptNumber <= attempts) {
                // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å completed
                dot.classList.add('completed');
            } else if (attemptNumber === attempts + 1 && attempts < 3) {
                // –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è) - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å current
                dot.classList.add('current');
            }
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–º–∏ (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏)
        });
        
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
    updateTournamentStatus(status, timeRemaining, tournamentId = null) {
        if (!this.elements.tournamentStatus) return;

        this.elements.tournamentStatus.className = `tournament-status ${status}`;

        let statusText = TournamentUtils.getStatusText(status);
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if (status.toLowerCase() === 'active' && tournamentId) {
            statusText += ` (ID: ${tournamentId})`;
        }
        
        this.elements.tournamentStatus.textContent = statusText;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        if (status.toLowerCase() === 'active') {
            this.showTimer();
            if (timeRemaining !== undefined && timeRemaining > 0) {
                this.updateTimer(timeRemaining);
            }
        } else {
            this.hideTimer();
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–π–º–µ—Ä
    showTimer() {
        const timerSection = document.getElementById('tournamentTimerSection');
        if (timerSection) {
            timerSection.style.display = 'block';
        }
    }

    // –°–∫—Ä—ã—Ç—å —Ç–∞–π–º–µ—Ä
    hideTimer() {
        const timerSection = document.getElementById('tournamentTimerSection');
        if (timerSection) {
            timerSection.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
    updateTimer(seconds) {
        const timerElement = document.getElementById('tournamentTimer');
        if (!timerElement) return;

        if (seconds <= 0) {
            timerElement.textContent = '00:00';
            timerElement.className = 'info-value timer-display critical';
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        
        timerElement.textContent = timeString;

        // –ú–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        timerElement.className = 'info-value timer-display';
        if (seconds <= 60) {
            timerElement.classList.add('critical');
        } else if (seconds <= 300) { // 5 –º–∏–Ω—É—Ç
            timerElement.classList.add('warning');
        }

    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–π–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
    showTournamentTimer(timeRemaining) {
        if (!this.elements.tournamentTimer || !this.elements.timerDisplay) return;

        this.elements.tournamentTimer.style.display = 'block';

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.timers.countdown) {
            clearInterval(this.timers.countdown);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const updateTimer = () => {
            const remaining = Math.max(0, timeRemaining);
            this.elements.timerDisplay.textContent = TournamentUtils.formatTime(remaining);

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
            if (remaining <= TOURNAMENT_CONFIG.WARNING_TIME_THRESHOLD) {
                this.elements.timerDisplay.classList.add('warning');
            } else {
                this.elements.timerDisplay.classList.remove('warning');
            }

            timeRemaining--;

            if (timeRemaining < 0) {
                clearInterval(this.timers.countdown);
            }
        };

        updateTimer(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º
        this.timers.countdown = setInterval(updateTimer, 1000);
    }

    // –°–∫—Ä—ã—Ç—å —Ç–∞–π–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
    hideTournamentTimer() {
        if (this.elements.tournamentTimer) {
            this.elements.tournamentTimer.style.display = 'none';
        }

        if (this.timers.countdown) {
            clearInterval(this.timers.countdown);
            delete this.timers.countdown;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
    updatePrizePool(totalPrizeWei) {
        if (!totalPrizeWei) return;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º wei –≤ ether
        let totalPrize;
        if (window.web3 && window.web3.utils) {
            totalPrize = window.web3.utils.fromWei(totalPrizeWei, 'ether');
        } else if (window.Web3) {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Web3 –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            const tempWeb3 = new window.Web3();
            totalPrize = tempWeb3.utils.fromWei(totalPrizeWei, 'ether');
        } else {
            // Fallback: –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 10^18
            totalPrize = (parseFloat(totalPrizeWei) / 1e18).toString();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–∏–∑
        if (this.elements.totalPrize) {
            TournamentUtils.animateCurrency(
                this.elements.totalPrize,
                parseFloat(this.elements.totalPrize.textContent.replace(' PHRS', '')) || 0,
                parseFloat(totalPrize)
            );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø—Ä–∏–∑–æ–≤
        this.updatePrizeBreakdown(totalPrize);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
    updatePrizeBreakdown(totalPrizeAmount) {
        if (!totalPrizeAmount) return;

        const total = parseFloat(totalPrizeAmount);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ether –æ–±—Ä–∞—Ç–Ω–æ –≤ wei –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–æ–≤
        let totalPrizeWei;
        if (window.web3 && window.web3.utils) {
            totalPrizeWei = window.web3.utils.toWei(totalPrizeAmount, 'ether');
        } else if (window.Web3) {
            const tempWeb3 = new window.Web3();
            totalPrizeWei = tempWeb3.utils.toWei(totalPrizeAmount, 'ether');
        } else {
            // Fallback: —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 10^18
            totalPrizeWei = (parseFloat(totalPrizeAmount) * 1e18).toString();
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–ª–ª–±–µ–∫ Web3 –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const web3Instance = window.web3 || this.createWeb3Fallback();

        // –†–∞—Å—á–µ—Ç –ø—Ä–∏–∑–æ–≤ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const prizes = TOURNAMENT_CONFIG.calculatePrizes(totalPrizeWei, web3Instance);

        if (this.elements.firstPrize) {
            this.elements.firstPrize.textContent = `${TournamentUtils.formatCurrency(prizes.first)} PHRS`;
        }

        if (this.elements.secondPrize) {
            this.elements.secondPrize.textContent = `${TournamentUtils.formatCurrency(prizes.second)} PHRS`;
        }

        if (this.elements.thirdPrize) {
            this.elements.thirdPrize.textContent = `${TournamentUtils.formatCurrency(prizes.third)} PHRS`;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    updateLeaderboard(leaderboard) {
        if (!this.elements.leaderboardBody || !Array.isArray(leaderboard)) return;

        const sortedBoard = TournamentUtils.sortByScore(leaderboard);
        const topPlayers = sortedBoard.slice(0, TOURNAMENT_CONFIG.LEADERBOARD_MAX_ENTRIES || 100);
        

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        if (this.lastLeaderboardHash && this.isSameLeaderboard(topPlayers)) {
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        this.lastLeaderboardHash = this.generateLeaderboardHash(topPlayers);

        let html = '';

        if (topPlayers.length === 0) {
            html = `
                <tr>
                    <td colspan="4" style="text-align: center; color: #888;">
                        No scores yet. Be the first to play!
                    </td>
                </tr>
            `;
        } else {
            topPlayers.forEach((entry, index) => {
                const rank = index + 1;
                const medal = TournamentUtils.getMedal(rank);
                const percentage = TournamentUtils.getPrizePercentage(rank);
                const rankColor = TournamentUtils.getRankColor(rank);

                html += `
                    <tr style="color: ${rankColor}" data-player="${entry.player}">
                        <td>${medal} ${rank}</td>
                        <td>${entry.playerName || 'Anonymous'}</td>
                        <td title="${entry.player}">${TournamentUtils.formatAddress(entry.player)}</td>
                        <td>${TournamentUtils.formatNumber(entry.score)}</td>
                        <td>${percentage}</td>
                    </tr>
                `;
            });
        }

        this.elements.leaderboardBody.innerHTML = html;
    }

    // üîç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    generateLeaderboardHash(players) {
        if (!players || players.length === 0) return 'empty';
        
        return players
            .map(p => `${p.player}:${p.score}`)
            .join('|');
    }
    
    // üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ª–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    isSameLeaderboard(newPlayers) {
        const newHash = this.generateLeaderboardHash(newPlayers);
        return newHash === this.lastLeaderboardHash;
    }
    
    // ‚ö° –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    updatePlayerInLeaderboard(player, newScore, playerName) {
        const rows = this.elements.leaderboardBody?.querySelectorAll('tr[data-player]');
        if (!rows) return false;
        
        let playerRow = null;
        for (const row of rows) {
            if (row.dataset.player === player) {
                playerRow = row;
                break;
            }
        }
        
        if (playerRow) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            const cells = playerRow.querySelectorAll('td');
            if (cells.length >= 4) {
                cells[3].textContent = TournamentUtils.formatNumber(newScore);
                return true;
            }
        }
        
        return false; // –ù–µ –Ω–∞—à–ª–∏ –∏–≥—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }
    
    // üì± –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–µ—Ä–æ–≤
    updateLeaderboardVirtualized(leaderboard, maxVisible = 100) {
        if (!this.elements.leaderboardBody || !Array.isArray(leaderboard)) return;
        
        const sortedBoard = TournamentUtils.sortByScore(leaderboard);
        
        if (sortedBoard.length <= maxVisible) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            return this.updateLeaderboard(leaderboard);
        }
        
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        const topPlayers = sortedBoard.slice(0, maxVisible);
        const remainingCount = sortedBoard.length - maxVisible;
        
        let html = '';
        
        topPlayers.forEach((entry, index) => {
            const rank = index + 1;
            const medal = TournamentUtils.getMedal(rank);
            const percentage = TournamentUtils.getPrizePercentage(rank);
            const rankColor = TournamentUtils.getRankColor(rank);

            html += `
                <tr style="color: ${rankColor}" data-player="${entry.player}">
                    <td>${medal} ${rank}</td>
                    <td>${entry.playerName || 'Anonymous'}</td>
                    <td title="${entry.player}">${TournamentUtils.formatAddress(entry.player)}</td>
                    <td>${TournamentUtils.formatNumber(entry.score)}</td>
                    <td>${percentage}</td>
                </tr>
            `;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö
        if (remainingCount > 0) {
            html += `
                <tr style="color: #666; font-style: italic;">
                    <td colspan="5" style="text-align: center; padding: 10px;">
                        ... –∏ –µ—â–µ ${remainingCount} –∏–≥—Ä–æ–∫–æ–≤
                        <button onclick="this.style.display='none'; window.tournamentUI?.showAllLeaderboard?.()" 
                                style="margin-left: 10px; padding: 2px 8px; font-size: 12px;">
                            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö
                        </button>
                    </td>
                </tr>
            `;
        }
        
        this.elements.leaderboardBody.innerHTML = html;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö"
        this.fullLeaderboardData = sortedBoard;
    }
    
    // üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    showAllLeaderboard() {
        if (this.fullLeaderboardData) {
            this.updateLeaderboard(this.fullLeaderboardData);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    showAdminPanel(show) {
        if (this.elements.adminPanel) {
            this.elements.adminPanel.style.display = show ? 'block' : 'none';
        }
    }

    // ========== –ò–ì–†–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==========

    // –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É
    openGame() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        this.gameOverProcessed = false;
        this.isClosing = false;
        if (this.closeGameTimer) {
            clearTimeout(this.closeGameTimer);
            this.closeGameTimer = null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–µ—Ä–∞
        if (!window.tournamentAdapter) {
            Logger.error('‚ùå Tournament Adapter not loaded');
            this.showError('Tournament system not ready. Please refresh the page.');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentData = this.getTournamentData();
        if (!tournamentData) {
            Logger.error('‚ùå No tournament data available');
            this.showError('Tournament data not available');
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        const callbacks = {
            onScoreUpdate: (score) => {
                const scoreEl = document.getElementById('gameScore');
                if (scoreEl) scoreEl.textContent = TournamentUtils.formatNumber(score);
            },
            onLivesChange: (lives) => {
                const livesEl = document.getElementById('gameLives');
                if (livesEl) livesEl.textContent = lives;
            },
            onLevelChange: (level) => {
                const levelEl = document.getElementById('gameLevel');
                if (levelEl) levelEl.textContent = level;
            },
            onGameOver: (gameResult) => {
                this.handleGameOver(gameResult);
            }
        };

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        window.tournamentAdapter.activate(tournamentData, callbacks);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DOM
        if (!this.gameModal || !document.body.contains(this.gameModal)) {
            this.createGameModal();
            this.setupEventListeners();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å –±—É—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.boostPanel || !document.body.contains(this.boostPanel)) {
            this.createExternalBoostPanel();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –±—É—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
        if (this.boostPanel) {
            this.boostPanel.style.display = 'block';
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        this.gameModal.style.display = 'flex';
        this.gameModal.classList.add('active');
        

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        this.loadAndStartGame();

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –¥–ª—è –∏–≥—Ä—ã
    initGameCanvas() {

        // –ù–∞–π–¥–µ–º canvas –¥–ª—è –∏–≥—Ä—ã
        const canvas = document.getElementById('tournamentGameCanvas');
        if (!canvas) {
            Logger.error('‚ùå Tournament game canvas not found');
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–≥—Ä—ã)
        canvas.width = 800;
        canvas.height = 600;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const ctx = canvas.getContext('2d');
        if (ctx) {
            // –û—á–∏—â–∞–µ–º canvas
            ctx.fillStyle = '#001122';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            ctx.fillStyle = '#00ddff';
            ctx.font = '24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('üéÆ Loading Tournament Game...', canvas.width / 2, canvas.height / 2);
            
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏–≥—Ä—ã
            window.tournamentCanvas = canvas;
            window.tournamentCtx = ctx;
        }

    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
    loadAndStartGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        if (typeof window.startGame === 'function') {
            this.initGameCanvas();
            setTimeout(() => window.startGame(), 100);
            return;
        }

        if (typeof window.actuallyStartGame === 'function') {
            this.initGameCanvas();
            setTimeout(() => window.actuallyStartGame(), 100);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã
        const gameFunctions = Object.keys(window).filter(key =>
            key.toLowerCase().includes('game') ||
            key.toLowerCase().includes('start') ||
            key.toLowerCase().includes('init')
        );


        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        Logger.error('‚ùå Game files not properly loaded. Available functions:', gameFunctions);
        this.showError('Game engine not available. Please check that all game scripts are loaded correctly.');
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ–ø—ã—Ç–∫–∏
    forceExitGame() {
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏–∑ –∏–≥—Ä—ã
        let currentScore = 0;
        const scoreEl = document.getElementById('gameScore');
        if (scoreEl) {
            currentScore = parseInt(scoreEl.textContent) || 0;
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç–æ–º
        const gameResult = {
            score: currentScore,
            level: 1,
            lives: 0,
            duration: Date.now() - (window.gameStartTime || Date.now()),
            timestamp: Date.now(),
            forceExit: true
        };
        
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (window.tournamentLobby && typeof window.tournamentLobby.submitGameScore === 'function') {
            window.tournamentLobby.submitGameScore(gameResult.score);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
        this.closeGame();
    }

    // –ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É
    closeGame() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        if (this.isClosing) {
            return;
        }
        this.isClosing = true;

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.gameModal.style.display = 'none';
        this.gameModal.classList.remove('active');

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω—é—é –ø–∞–Ω–µ–ª—å –±—É—Å—Ç–æ–≤
        if (this.boostPanel) {
            this.boostPanel.style.display = 'none';
            this.boostPanel.classList.remove('show');
        }

        if (this.game) {
            this.game.destroy();
            this.game = null;
        }

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ game over —ç–∫—Ä–∞–Ω—ã
        const gameOverScreens = document.querySelectorAll('#tournament-game-over, .tournament-game-over');
        gameOverScreens.forEach(screen => {
            screen.style.display = 'none';
            screen.remove();
        });


        // –û—á–∏—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        const backBtn = document.getElementById('backToTournamentBtn');
        if (backBtn && backBtn.parentNode) {
            backBtn.remove();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.querySelector('.close-game-btn');
        if (closeBtn) {
            closeBtn.style.display = 'block';
        }


        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.closeGameTimer) {
            clearTimeout(this.closeGameTimer);
            this.closeGameTimer = null;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.isClosing = false;
            this.gameOverProcessed = false;
        }, 500);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    handleGameOver(gameResult) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (this.gameOverProcessed) {
            return;
        }
        this.gameOverProcessed = true;
        
        // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –ö–ê–ñ–î–û–ô –∏–≥—Ä–µ
        if (window.tournamentLobby && window.tournamentLobby.walletConnector && window.tournamentLobby.walletConnector.connected) {
            const currentAttempts = window.tournamentLobby.playerAttempts || 0;
            window.tournamentLobby.playerAttempts = currentAttempts + 1;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            const attemptKey = `tournament_${window.tournamentLobby.currentTournamentId}_attempts_${window.tournamentLobby.walletConnector.account}`;
            localStorage.setItem(attemptKey, window.tournamentLobby.playerAttempts.toString());
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (window.tournamentLobby && typeof window.tournamentLobby.submitGameScore === 'function') {
            window.tournamentLobby.submitGameScore(gameResult.score);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞
        setTimeout(() => {
            let attempts = 0;
            if (window.tournamentLobby && window.tournamentLobby.storage &&
                window.tournamentLobby.walletConnector && window.tournamentLobby.walletConnector.connected) {
                attempts = window.tournamentLobby.storage.getPlayerAttempts(window.tournamentLobby.walletConnector.account);
            }


            if (attempts >= 3) {
                this.addBackToTournamentButton();
            } else {
                
                // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è
                if (this.closeGameTimer) {
                    clearTimeout(this.closeGameTimer);
                }
                this.closeGameTimer = setTimeout(() => {
                    this.closeGame();
                }, 3000);
            }
        }, 1000);
    }

    // ========== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info', duration = 5000) {
        const notification = document.createElement('div');
        notification.className = `tournament-notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${TournamentUtils.escapeHtml(message)}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">‚úñ</button>
            </div>
        `;

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => notification.classList.add('show'), 100);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, duration);

        this.notifications.push(notification);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    getNotificationIcon(type) {
        switch (type) {
            case 'success': return '‚úÖ';
            case 'error': return '‚ùå';
            case 'warning': return '‚ö†Ô∏è';
            default: return '‚ÑπÔ∏è';
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        this.showNotification(message, 'error');
        Logger.error('üö® UI Error:', message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess(message) {
        // –û—Ç–∫–ª—é—á–µ–Ω–æ: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å success —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    showWarning(message) {
        this.showNotification(message, 'warning');
        Logger.warn('‚ö†Ô∏è UI Warning:', message);
    }

    // ========== –£–¢–ò–õ–ò–¢–´ ==========

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    showLoading(message = 'Loading...') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
        this.hideLoading();

        const loading = document.createElement('div');
        loading.id = 'tournament-loading';
        loading.className = 'tournament-loading-overlay';
        loading.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <p class="loading-message">${TournamentUtils.escapeHtml(message)}</p>
            </div>
        `;

        document.body.appendChild(loading);
        setTimeout(() => loading.classList.add('show'), 100);
    }

    // –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    hideLoading() {
        const loading = document.getElementById('tournament-loading');
        if (loading) {
            loading.classList.remove('show');
            setTimeout(() => {
                if (loading.parentNode) {
                    loading.parentNode.removeChild(loading);
                }
            }, 300);
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateAll(data) {
        if (data.tournamentInfo) {
            this.updateTournamentInfo(data.tournamentInfo);
            this.updatePrizePool(data.tournamentInfo.prizePool);
        }

        if (data.userStatus) {
            this.updateUserStatus(data.userStatus);
            this.updateAttemptIndicators(data.userStatus.attempts);
        }

        if (data.tournamentStatus) {
            this.updateTournamentStatus(data.tournamentStatus, data.timeRemaining);
        }

        if (data.leaderboard) {
            this.updateLeaderboard(data.leaderboard);
        }

        if (data.showAdminPanel !== undefined) {
            this.showAdminPanel(data.showAdminPanel);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
    getState() {
        return {
            gameModalOpen: this.gameModal && this.gameModal.classList.contains('active'),
            gameActive: this.game !== null,
            elementsLoaded: Object.keys(this.elements).length > 0,
            notificationsCount: this.notifications.length,
            timersActive: Object.keys(this.timers).length
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        Object.values(this.timers).forEach(timer => clearInterval(timer));
        this.timers = {};

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.notifications.forEach(notification => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        });
        this.notifications = [];

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
        if (this.game) {
            this.closeGame();
        }

    }

    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–î–ê–ü–¢–ï–†–ê ==========

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    getTournamentData() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const savedData = localStorage.getItem('tournamentMode');
        if (savedData) {
            try {
                return JSON.parse(savedData);
            } catch (error) {
                Logger.error('‚ùå Error parsing tournament data:', error);
            }
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –±–µ—Ä–µ–º –∏–∑ lobby
        if (window.tournamentLobby) {
            const lobby = window.tournamentLobby;
            const attempts = lobby.getUserAttempts ? lobby.getUserAttempts() : 0;

            return {
                tournamentId: lobby.currentTournamentId || 1,
                attempt: attempts + 1,
                maxAttempts: 3,
                playerAddress: lobby.walletConnector?.account
            };
        }

        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            tournamentId: 1,
            attempt: 1,
            maxAttempts: 3,
            playerAddress: null
        };
    }

    // –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
    injectStyles() {
        if (document.getElementById('tournament-ui-styles')) return;

        const style = document.createElement('style');
        style.id = 'tournament-ui-styles';
        style.textContent = `
            /* Tournament Game Modal */
            .tournament-game-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.95);
                z-index: 10000;
                justify-content: center;
                align-items: center;
            }

            .tournament-game-modal.active {
                display: flex;
            }

            .game-modal-content {
                position: relative;
                background: linear-gradient(135deg, rgba(0, 17, 34, 0.95) 0%, rgba(0, 51, 102, 0.9) 100%);
                border: 3px solid #ffd700;
                border-radius: 20px;
                padding: 15px;
                box-shadow: 0 0 50px rgba(255, 215, 0, 0.8);
                width: 850px;
                height: 750px;
                max-width: 95vw;
                max-height: 95vh;
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }

            .game-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 10px;
                color: #ffd700;
                flex-shrink: 0;
            }
            
            #tournamentGameCanvas {
                width: 800px;
                height: 600px;
                border: 2px solid #ffd700;
                border-radius: 10px;
                background: #001122;
                display: block;
                margin: 0 auto;
                flex-shrink: 0;
            }

            .close-game-btn {
                background: #ff4444;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
                font-size: 16px;
            }

            .close-game-btn:hover {
                background: #ff6666;
            }

            .game-ui {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-top: 10px;
                padding: 8px;
                background: rgba(0, 0, 0, 0.3);
                border-radius: 10px;
                flex-shrink: 0;
            }

            .game-stats span {
                margin-right: 20px;
                color: #00ddff;
                font-weight: bold;
            }

            .game-controls button {
                margin-left: 10px;
                background: #007acc;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
            }

            .game-controls button:hover {
                background: #0099ff;
            }

            /* Notifications */
            .tournament-notification {
                position: fixed;
                top: 20px;
                right: -400px;
                width: 350px;
                z-index: 10001;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
                transition: right 0.3s ease-out;
            }

            .tournament-notification.show {
                right: 20px;
            }

            .notification-content {
                display: flex;
                align-items: center;
                padding: 15px;
                color: white;
                font-weight: bold;
            }

            .notification-success .notification-content {
                background: linear-gradient(135deg, #4caf50, #45a049);
            }

            .notification-error .notification-content {
                background: linear-gradient(135deg, #f44336, #d32f2f);
            }

            .notification-warning .notification-content {
                background: linear-gradient(135deg, #ff9800, #f57c00);
            }

            .notification-info .notification-content {
                background: linear-gradient(135deg, #2196f3, #1976d2);
            }

            .notification-icon {
                font-size: 20px;
                margin-right: 10px;
            }

            .notification-message {
                flex: 1;
            }

            .notification-close {
                background: none;
                border: none;
                color: white;
                font-size: 16px;
                cursor: pointer;
                padding: 0;
                margin-left: 10px;
                opacity: 0.7;
            }

            .notification-close:hover {
                opacity: 1;
            }

            /* Loading */
            .tournament-loading-overlay {
                display: flex;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                z-index: 10002;
                justify-content: center;
                align-items: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .tournament-loading-overlay.show {
                opacity: 1;
            }

            .loading-content {
                text-align: center;
                color: white;
            }

            .loading-spinner {
                width: 50px;
                height: 50px;
                border: 4px solid rgba(255, 255, 255, 0.3);
                border-top: 4px solid #ffd700;
                border-radius: 50%;
                margin: 0 auto 20px;
                animation: spin 1s linear infinite;
            }

            .loading-message {
                font-size: 18px;
                font-weight: bold;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            /* Attempt indicators */
            .attempt-dot {
                display: inline-block;
                margin: 0 5px;
                font-size: 20px;
            }

            .attempt-dot.attempt-used {
                opacity: 1;
            }

            .attempt-dot.attempt-available {
                opacity: 0.5;
            }

            /* Tournament status */
            .tournament-status {
                padding: 10px;
                border-radius: 8px;
                font-weight: bold;
                text-align: center;
            }

            .tournament-status.ACTIVE {
                background: rgba(76, 175, 80, 0.2);
                color: #4caf50;
                border: 2px solid #4caf50;
            }

            .tournament-status.TIME_EXPIRED {
                background: rgba(255, 152, 0, 0.2);
                color: #ff9800;
                border: 2px solid #ff9800;
            }

            .tournament-status.ENDED {
                background: rgba(244, 67, 54, 0.2);
                color: #f44336;
                border: 2px solid #f44336;
            }

            .tournament-status.NOT_STARTED {
                background: rgba(158, 158, 158, 0.2);
                color: #9e9e9e;
                border: 2px solid #9e9e9e;
            }

            /* Timer warning */
            .warning {
                color: #ff4444 !important;
                animation: pulse 1s infinite;
            }

            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.5; }
            }

            /* Responsive */
            @media (max-width: 900px) {
                .game-modal-content {
                    margin: 5px;
                    padding: 10px;
                    width: calc(100vw - 20px);
                    height: calc(100vh - 20px);
                    overflow: hidden;
                }

                #tournamentGameCanvas {
                    width: calc(100vw - 60px);
                    height: calc((100vw - 60px) * 0.75);
                    max-width: 750px;
                    max-height: 500px;
                    border: 2px solid #ffd700;
                    border-radius: 10px;
                    background: #001122;
                    display: block;
                    margin: 0 auto;
                }

                .game-ui {
                    flex-direction: column;
                    gap: 5px;
                    padding: 5px;
                }

                .tournament-notification {
                    width: calc(100vw - 40px);
                    right: -100vw;
                }

                .tournament-notification.show {
                    right: 20px;
                }
            }

            /* Tournament Boost Panel - External (outside modal) */
            .tournament-boost-panel-external {
                position: fixed;
                left: 20px;
                top: 50%;
                transform: translateY(-50%);
                background: linear-gradient(135deg, rgba(0, 20, 40, 0.95), rgba(0, 40, 80, 0.95));
                border: 2px solid #00ddff;
                border-radius: 12px;
                padding: 0;
                box-shadow: 0 0 20px rgba(0, 221, 255, 0.3);
                backdrop-filter: blur(10px);
                min-width: 200px;
                max-width: 250px;
                min-height: 40px;
                opacity: 0;
                max-height: 0;
                overflow: hidden;
                transition: all 0.3s ease;
                z-index: 10001;
                display: none;
            }

            .tournament-boost-panel-external.show {
                opacity: 1;
                max-height: 600px;
                padding: 12px;
            }

            .boost-panel-header {
                text-align: center;
                color: #00ddff;
                font-size: 14px;
                font-weight: bold;
                margin-bottom: 8px;
                text-transform: uppercase;
                letter-spacing: 1px;
            }

            .boost-panel-content {
                display: flex;
                flex-direction: column;
                gap: 8px;
                max-height: 500px;
                overflow-y: auto;
            }

            .boost-item {
                background: rgba(0, 221, 255, 0.1);
                border: 1px solid #00ddff;
                border-radius: 8px;
                padding: 8px;
                width: 100%;
                text-align: center;
                backdrop-filter: blur(5px);
                transition: all 0.2s ease;
                box-sizing: border-box;
            }

            .boost-item:hover {
                background: rgba(0, 221, 255, 0.2);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0, 221, 255, 0.4);
            }

            .boost-name {
                color: #00ff88;
                font-size: 12px;
                font-weight: bold;
                display: block;
                margin-bottom: 2px;
            }

            .boost-timer {
                color: #66ccff;
                font-size: 11px;
                display: block;
            }

            .boost-progress {
                width: 100%;
                height: 3px;
                background: rgba(0, 221, 255, 0.2);
                border-radius: 2px;
                margin-top: 4px;
                overflow: hidden;
            }

            .boost-progress-bar {
                height: 100%;
                background: linear-gradient(90deg, #00ff88, #00ddff);
                border-radius: 2px;
                transition: width 0.1s ease;
            }

            .boost-progress-bar.critical {
                background: linear-gradient(90deg, #ff4444, #ff8800);
                animation: criticalPulse 0.5s ease-in-out infinite alternate;
            }

            @keyframes criticalPulse {
                from { opacity: 0.7; }
                to { opacity: 1; }
            }

            /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–æ–Ω—É—Å–æ–≤ */
            .boost-item[data-boost="RAPID_FIRE"] { border-color: #ffff00; }
            .boost-item[data-boost="SHIELD_BARRIER"] { border-color: #0088ff; }
            .boost-item[data-boost="SCORE_MULTIPLIER"] { border-color: #ffd700; }
            .boost-item[data-boost="INVINCIBILITY"] { 
                border-color: #ff00ff; 
                background: linear-gradient(45deg, rgba(255, 0, 255, 0.1), rgba(0, 255, 255, 0.1));
            }
        `;

        document.head.appendChild(style);
    }

    // –°–æ–∑–¥–∞—Ç—å —Ñ–æ–ª–ª–±–µ–∫ Web3 –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    createWeb3Fallback() {
        return {
            utils: {
                fromWei: (value, unit) => {
                    if (unit === 'ether') {
                        return (parseFloat(value) / 1e18).toString();
                    }
                    return value;
                },
                toBN: (value) => {
                    const num = parseFloat(value);
                    return {
                        mul: (other) => ({
                            div: (divisor) => Math.floor(num * parseFloat(other.toString()) / parseFloat(divisor.toString())).toString()
                        }),
                        sub: (other) => (num - parseFloat(other.toString())).toString(),
                        toString: () => Math.floor(num).toString()
                    };
                }
            }
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.tournamentUI = new TournamentUI();

// –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò
window.emergencyCleanup = function() {
    
    // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã
    if (typeof window.stopGame === 'function') window.stopGame();
    window.gameRunning = false;
    window.gameActive = false;
    window.gamePaused = true;
    
    // 2. –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–µ—Ä—ã
    if (window.gameInterval) { clearInterval(window.gameInterval); window.gameInterval = null; }
    if (window.gameLoopId) { cancelAnimationFrame(window.gameLoopId); window.gameLoopId = null; }
    if (window.bossSystemInterval) { clearInterval(window.bossSystemInterval); window.bossSystemInterval = null; }
    if (window.animationId) { cancelAnimationFrame(window.animationId); window.animationId = null; }
    
    // 3. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ Game Over —ç–∫—Ä–∞–Ω—ã, –ù–ï –æ—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const gameOverScreens = document.querySelectorAll(`
        #tournament-game-over,
        .tournament-game-over,
        [id*="game-over"],
        [class*="game-over"]
    `);
    
    gameOverScreens.forEach(screen => {
        screen.style.display = 'none';
        screen.remove();
    });
    
    // 4. –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º
    const tournamentModal = document.querySelector('.tournament-game-modal');
    if (tournamentModal) {
        tournamentModal.style.display = 'none';
        tournamentModal.classList.remove('active');
    }
    
    // 5. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Tournament Adapter
    if (window.tournamentAdapter) {
        window.tournamentAdapter.deactivate();
    }
    
};

// ========== DEBUG –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ==========

// Debug —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
window.debugTournamentUI = {
    // –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞
    testAdapter: () => {

        if (!window.tournamentAdapter) {
            Logger.error('‚ùå Tournament Adapter not found');
            return;
        }

        const testData = {
            tournamentId: 999,
            attempt: 1,
            maxAttempts: 3,
            playerAddress: '0x1234567890123456789012345678901234567890'
        };

        const testCallbacks = {
        };

        window.tournamentAdapter.activate(testData, testCallbacks);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        setTimeout(() => {
        }, 1000);
    },

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä
    deactivateAdapter: () => {
        if (window.tournamentAdapter) {
            window.tournamentAdapter.deactivate();
        }
    },

    // –¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã
    testGameOpen: () => {
        if (window.tournamentUI) {
            window.tournamentUI.openGame();
        }
    },

    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    simulateGameOver: (score = 12345) => {

        const gameResult = {
            score: score,
            level: 5,
            lives: 0,
            duration: 180000,
            timestamp: Date.now()
        };

        if (window.tournamentUI) {
            window.tournamentUI.handleGameOver(gameResult);
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    getSystemStatus: () => {
        const status = {
            tournamentUI: typeof window.tournamentUI !== 'undefined',
            tournamentAdapter: typeof window.tournamentAdapter !== 'undefined',
            tournamentLobby: typeof window.tournamentLobby !== 'undefined',
            gameLoaded: typeof window.startGame === 'function',
            adapterStatus: window.tournamentAdapter ? window.tournamentAdapter.getStatus() : null
        };

        return status;
    }
};

