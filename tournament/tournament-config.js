// üèÜ PHAROS INVADERS - TOURNAMENT CONFIG
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

const TOURNAMENT_CONFIG = {
    // üèóÔ∏è –ö–û–ù–¢–†–ê–ö–¢–´ –ò –°–ï–¢–¨
    NETWORK_NAME: 'Pharos Testnet',
    RPC_URL: 'https://testnet.dplabs-internal.com',
    CHAIN_ID: '688688',
    TOURNAMENT_CONTRACT_ADDRESS: '0x454064eA4517A80b0388EEeFFFBf2Efb85a86061',
    GAME_CONTRACT_ADDRESS: '0xaf655fe9fa8cdf421a024509b1cfc15dee89d85e',

    // üëë –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï
    ADMIN_ADDRESS: '0x59F74eD82A08F80cff5D7E8055f6a24A18595F64',

    // üéØ –¢–£–†–ù–ò–† ID –£–ü–†–ê–í–õ–ï–ù–ò–ï  
    DEFAULT_TOURNAMENT_ID: 2,              // –ë–∞–∑–æ–≤—ã–π Tournament ID (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é)
    CURRENT_ACTIVE_TOURNAMENT_ID: null,    // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    AUTO_GENERATE_TOURNAMENT_ID: true,     // –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID
    ID_GENERATION_STRATEGY: 'sequential',  // sequential, random, timestamp

    // üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    ENTRY_FEE: '0.005', // PHRS
    PRIZE_DISTRIBUTION: {
        FIRST_PLACE: 60,    // 60% –ø—É–ª–∞
        SECOND_PLACE: 25,   // 25% –ø—É–ª–∞
        THIRD_PLACE: 5,     // 5% –ø—É–ª–∞
        OWNER_FEE: 10       // 10% –ø—É–ª–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ 90% —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è)
    },

    // ‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    TOURNAMENT_DURATION: 600,        // 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    AUTO_UPDATE_INTERVAL: 33000,     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 33 —Å–µ–∫
    TIMER_UPDATE_INTERVAL: 1000,     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    WARNING_TIME_THRESHOLD: 120,     // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã

    // üéÆ –ò–ì–†–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    MAX_ATTEMPTS: 3,                 // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    CANVAS_WIDTH: 800,              // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    CANVAS_HEIGHT: 600,
    GAME_TIMEOUT: 300000,           // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É

    // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
    MAX_REASONABLE_SCORE: 999999,    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—É–º–Ω—ã–π —Å—á–µ—Ç
    SCORE_VALIDATION: true,          // –í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—á–µ—Ç–æ–≤
    EVENT_LOGGING: true,             // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    ANTICHEAT_ENABLED: true,         // –°–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏—á–∏—Ç–æ–≤

    // üé® UI –ü–ê–†–ê–ú–ï–¢–†–´
    LEADERBOARD_UPDATE_INTERVAL: 15000,  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫
    LEADERBOARD_MAX_ENTRIES: 100,        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø-100
    NOTIFICATION_DURATION: 5000,         // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å—á–µ–∑–∞—é—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫
    MODAL_ANIMATION_DURATION: 300,       // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω 300–º—Å

    // üè∑Ô∏è –¢–£–†–ù–ò–†–ù–´–ï –°–¢–ê–¢–£–°–´
    TOURNAMENT_STATES: {
        NOT_STARTED: 'not-started',
        ACTIVE: 'active',
        TIME_EXPIRED: 'time-expired',
        ENDED: 'ended'
    },

    // üë§ –°–¢–ê–¢–£–°–´ –ò–ì–†–û–ö–û–í
    PLAYER_STATES: {
        NOT_REGISTERED: 'not-registered',
        REGISTERED: 'registered',
        PLAYING: 'playing',
        FINISHED: 'finished'
    },

    // üéØ –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã)
    GAME_CONFIG: {
        CRAB_SPEED: 60,
        CRAB_FIRE_RATE: 66,
        CRAB_BULLET_SPEED: 87,
        PLAYER_LIVES: 3,              // –í —Ç—É—Ä–Ω–∏—Ä–µ –º–µ–Ω—å—à–µ –∂–∏–∑–Ω–µ–π –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        PLAYER_SPEED: 110,
        PLAYER_FIRE_RATE: 130,
        PLAYER_BULLET_SPEED: 115,
        LEVEL_DIFFICULTY: 83,
        SCORE_MULTIPLIER: 100,
        INVADERS_ROWS: 5,
        INVADERS_COLS: 10
    },

    // üñºÔ∏è –†–ï–°–£–†–°–´
    IMAGES: {
        OCTOPUS: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/octopus.png',
        PHAROS_LOGO: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/pharos.png',
        CRABS: {
            VIOLET: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabViolet.png',
            RED: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabRed.png',
            YELLOW: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabYellow.png',
            BLUE: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBlue.png',
            GREEN: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabGreen.png'
        },
        BOSSES: {
            1: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBOSSGreen.png',
            2: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossBlue.png',
            3: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossYellow.png',
            4: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossRed.png',
            5: 'https://raw.githubusercontent.com/vi11abajo/PoA/main/images/crabBossViolet.png'
        }
    },

    // üì± RESPONSIVE
    MOBILE_BREAKPOINT: 768,
    TABLET_BREAKPOINT: 1024,

    // üåê API ENDPOINTS (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    API: {
        TOURNAMENT_STATS: '/api/tournament/stats',
        LEADERBOARD: '/api/tournament/leaderboard'
    },

    // üîß DEBUG
    DEBUG_MODE: false,
    CONSOLE_LOGGING: true,
    PERFORMANCE_MONITORING: false
};

// üõ†Ô∏è –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò

// –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOURNAMENT_CONFIG.getAdminAddress = () => {
    return TOURNAMENT_CONFIG.ADMIN_ADDRESS.toLowerCase();
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
TOURNAMENT_CONFIG.isAdmin = (address) => {
    if (!address) return false;
    return address.toLowerCase() === TOURNAMENT_CONFIG.getAdminAddress();
};

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –≤ Wei
TOURNAMENT_CONFIG.getEntryFeeWei = (web3) => {
    return web3.utils.toWei(TOURNAMENT_CONFIG.ENTRY_FEE, 'ether');
};

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–∑–æ–≤—ã–µ —Å—É–º–º—ã
TOURNAMENT_CONFIG.calculatePrizes = (totalPrizePool, web3) => {
    const prizePoolBN = web3.utils.toBN(totalPrizePool);
    const ownerFee = prizePoolBN.mul(web3.utils.toBN(TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.OWNER_FEE))
                                .div(web3.utils.toBN(100));
    const remaining = prizePoolBN.sub(ownerFee);

    const distributionSum = TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.FIRST_PLACE +
                           TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.SECOND_PLACE +
                           TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.THIRD_PLACE; // = 90

    return {
        first: web3.utils.fromWei(
            remaining.mul(web3.utils.toBN(TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.FIRST_PLACE))
                    .div(web3.utils.toBN(distributionSum)), 'ether'
        ),
        second: web3.utils.fromWei(
            remaining.mul(web3.utils.toBN(TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.SECOND_PLACE))
                    .div(web3.utils.toBN(distributionSum)), 'ether'
        ),
        third: web3.utils.fromWei(
            remaining.mul(web3.utils.toBN(TOURNAMENT_CONFIG.PRIZE_DISTRIBUTION.THIRD_PLACE))
                    .div(web3.utils.toBN(distributionSum)), 'ether'
        ),
        ownerFee: web3.utils.fromWei(ownerFee, 'ether'),
        total: web3.utils.fromWei(totalPrizePool, 'ether')
    };
};

// –ü–æ–ª—É—á–∏—Ç—å Chain ID –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
TOURNAMENT_CONFIG.getChainIdHex = () => {
    return `0x${parseInt(TOURNAMENT_CONFIG.CHAIN_ID).toString(16)}`;
};

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TOURNAMENT_CONFIG;
} else if (typeof window !== 'undefined') {
    window.TOURNAMENT_CONFIG = TOURNAMENT_CONFIG;
}

console.log('üèÜ Tournament config loaded:', TOURNAMENT_CONFIG);