// üèÜ PHAROS INVADERS - TOURNAMENT LOBBY (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
// –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–º –ª–æ–±–±–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫

class TournamentLobby {
    constructor() {
        this.walletConnector = null;
        this.currentTournamentId = 1;
        this.currentTournamentStatus = 'not-started';
        this.currentUserStatus = 'disconnected';
        this.isRegistering = false;
        this.updateInterval = null;
        this.timerInterval = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        this.leaderboard = null;
        this.storage = null;

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–±–±–∏
    async init() {
        try {

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            await this.sleep(1000);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            this.initDependencies();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.initWalletConnector();
            this.setupUI();
            this.startUpdateLoop();


        } catch (error) {
            Logger.error('‚ùå Failed to initialize Tournament Lobby:', error);
            this.showError('Failed to initialize tournament system. Please refresh the page.');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    initDependencies() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TournamentLeaderboard
            if (typeof TournamentLeaderboard !== 'undefined') {
                this.leaderboard = new TournamentLeaderboard(this.currentTournamentId);
            } else {
                Logger.error('‚ùå TournamentLeaderboard not found');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TournamentStorage
            if (typeof TournamentStorage !== 'undefined') {
                this.storage = new TournamentStorage(this.currentTournamentId);
            } else {
                Logger.error('‚ùå TournamentStorage not found');
            }
        } catch (error) {
            Logger.error('‚ùå Failed to initialize dependencies:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
    initWalletConnector() {
        if (window.tournamentWalletConnector) {
            this.walletConnector = window.tournamentWalletConnector;
        } else {
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    setupUI() {
        this.updateBasicInfo();
        this.setupButtons();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    updateBasicInfo() {
        const tournamentIdEl = document.getElementById('tournamentId');
        if (tournamentIdEl) {
            tournamentIdEl.textContent = `#${this.currentTournamentId}`;
        }

        const entryFeeEl = document.getElementById('entryFee');
        if (entryFeeEl) {
            entryFeeEl.textContent = `${TOURNAMENT_CONFIG.ENTRY_FEE} PHRS`;
        }

        const participantCountEl = document.getElementById('participantCount');
        if (participantCountEl) {
            participantCountEl.textContent = '0';
        }

        const totalPrizeEl = document.getElementById('totalPrize');
        if (totalPrizeEl) {
            totalPrizeEl.textContent = '0 PHRS';
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
    setupButtons() {
        const registerButton = document.getElementById('registerButton');
        const playButton = document.getElementById('playButton');

        if (registerButton) {
            registerButton.onclick = () => this.handleRegisterForTournament();
        }

        if (playButton) {
            playButton.onclick = () => this.handlePlayTournamentGame();
            playButton.disabled = true;
        }

        this.checkAdminStatus();
        this.updateButtonStates();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    checkAdminStatus() {
        const adminPanel = document.getElementById('adminPanel');
        if (!adminPanel) return;

        if (this.walletConnector && this.walletConnector.connected) {
            const isAdmin = TOURNAMENT_CONFIG.isAdmin(this.walletConnector.account);
            adminPanel.style.display = isAdmin ? 'block' : 'none';

            if (isAdmin) {
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    onWalletConnected(account) {

        this.updateUserStatus('connected');
        this.checkAdminStatus();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    onWalletDisconnected() {

        this.updateUserStatus('disconnected');

        const adminPanel = document.getElementById('adminPanel');
        if (adminPanel) {
            adminPanel.style.display = 'none';
        }
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    async handleRegisterForTournament() {
        try {
            if (!this.walletConnector || !this.walletConnector.connected) {
                this.showError('Please connect your wallet first');
                return;
            }

            this.showLoading('Registering for tournament...');

            // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await this.sleep(2000);

            this.hideLoading();
            this.showSuccess('Successfully registered for tournament!');

            this.updateUserStatus('registered');

            // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (this.storage) {
                this.storage.clearPlayerDataOnRegistration(this.walletConnector.account);
            }
            this.resetAttemptIndicators();

        } catch (error) {
            this.hideLoading();
            Logger.error('Registration error:', error);
            this.showError('Failed to register: ' + error.message);
        }
    }

    // –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∏–≥—Ä—É
    handlePlayTournamentGame() {
        if (!this.walletConnector || !this.walletConnector.connected) {
            this.showError('Please connect your wallet first');
            return;
        }

  if (this.storage && !this.storage.canPlayerPlay(this.walletConnector.account)) {
    this.showError('You have used all 3 attempts for this tournament');
    return;
}

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ UI
        if (window.tournamentUI) {
            window.tournamentUI.openGame();
        } else {
            this.showError('Game UI not available');
        }
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    async submitGameScore(score, playerName = null) {
        try {

            if (!this.walletConnector || !this.walletConnector.connected) {
                throw new Error('Wallet not connected');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—á–µ—Ç–∞
            if (typeof score !== 'number' || score < 0 || score > 445000) {
                throw new Error('Invalid score');
            }

            this.showLoading('Submitting score...');

            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω
            await this.sleep(2000);

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            // 1. –°–Ω–∞—á–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ storage
            if (this.storage) {
                this.storage.incrementPlayerAttempts(this.walletConnector.account);
                this.storage.updateUserLastGame(this.walletConnector.account, score);
            }

            // 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–ë–ï–ó —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Ç–∞–º)
            if (this.leaderboard) {
                this.leaderboard.addPlayerScore(this.walletConnector.account, score, playerName);
            }

            this.hideLoading();
            this.showSuccess(`Score ${score} submitted successfully!`);

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateAttemptIndicators();
            this.updateLeaderboard();

        } catch (error) {
            this.hideLoading();
            Logger.error('Score submission error:', error);
            this.showError('Failed to submit score: ' + error.message);
        }
    }

    // –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    async handleStartTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Starting tournament...');
            await this.sleep(2000);

            this.hideLoading();
            this.showSuccess('Tournament started!');

            this.currentTournamentStatus = 'active';
            this.updateTournamentStatus('active');
            this.updateButtonStates();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ storage
            if (this.storage) {
                this.storage.saveTournamentStatus('active');
            }

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to start tournament: ' + error.message);
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    async handleEndTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Ending tournament...');
            await this.sleep(2000);

            this.hideLoading();
            this.showSuccess('Tournament ended and prizes distributed!');

            this.currentTournamentStatus = 'ended';
            this.updateTournamentStatus('ended');
            this.updateButtonStates();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ storage
            if (this.storage) {
                this.storage.saveTournamentStatus('ended');
            }

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to end tournament: ' + error.message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    isAdmin() {
        return this.walletConnector &&
               this.walletConnector.connected &&
               TOURNAMENT_CONFIG.isAdmin(this.walletConnector.account);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserStatus(status) {
        Logger.debug('Call stack for updateUserStatus');

        if (typeof status === 'object') {
            Logger.error('üö® CRITICAL: OBJECT FOUND! Source must be fixed!');
            alert('DEVELOPMENT ERROR: Object passed to updateUserStatus! Check console for details.');
            return;
        }

        if (typeof status !== 'string') {
            Logger.error('‚ùå CRITICAL: Not a string:', status);
            return;
        }

        const oldStatus = this.currentUserStatus;
        this.currentUserStatus = status;

        console.log('User status changed:', {
            from: oldStatus,
            to: status,
            currentTournamentStatus: this.currentTournamentStatus
        });

        setTimeout(() => {
            this.updateButtonStates();
        }, 100);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    updateButtonStates() {
        const registerButton = document.getElementById('registerButton');
        const playButton = document.getElementById('playButton');

        if (!registerButton || !playButton) {
            return;
        }

        const walletConnected = this.walletConnector && this.walletConnector.connected;
        const tournamentStarted = this.currentTournamentStatus === 'active';
        const isRegistered = this.currentUserStatus === 'registered';

        console.log('Updating button states:', {
            walletConnected,
            tournamentStarted,
            isRegistered,
            currentUserStatus: this.currentUserStatus,
            currentTournamentStatus: this.currentTournamentStatus
        });

        // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (isRegistered) {
            registerButton.textContent = 'Registered';
            registerButton.disabled = true;
            registerButton.className = 'action-button';
        } else if (!walletConnected && !tournamentStarted) {
            registerButton.textContent = 'Tournament Not Started';
            registerButton.disabled = true;
            registerButton.className = 'action-button';
        } else if (!walletConnected && tournamentStarted) {
            registerButton.textContent = 'Connect Wallet to Register';
            registerButton.disabled = false;
            registerButton.className = 'action-button';
        } else if (walletConnected && !tournamentStarted) {
            registerButton.textContent = 'Tournament Not Started';
            registerButton.disabled = true;
            registerButton.className = 'action-button';
        } else if (walletConnected && tournamentStarted) {
            registerButton.textContent = 'Register for Tournament';
            registerButton.disabled = false;
            registerButton.className = 'action-button';
        }

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ø—ã—Ç–æ–∫
        const wasPlayButtonDisabled = playButton.disabled;
        let playButtonDisabled = !isRegistered;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if (isRegistered && this.storage && this.walletConnector && this.walletConnector.connected) {
            const canPlay = this.storage.canPlayerPlay(this.walletConnector.account);
            if (!canPlay) {
                playButtonDisabled = true;
                playButton.textContent = 'üö´ No attempts left';
            } else {
                playButton.textContent = 'üéÆ Play Game';
            }
        }

        playButton.disabled = playButtonDisabled;
        playButton.className = 'action-button tournament-play';

        if (wasPlayButtonDisabled && !playButton.disabled) {
        }

        console.log('Button states updated:', {
            registerText: registerButton.textContent,
            registerDisabled: registerButton.disabled,
            playDisabled: playButton.disabled
        });
    }

    // –°–±—Ä–æ—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ø—ã—Ç–æ–∫
    resetAttemptIndicators() {

        const attemptIndicators = document.getElementById('attemptIndicators');
        if (!attemptIndicators) return;

        const dots = attemptIndicators.querySelectorAll('.attempt-dot');
        dots.forEach((dot, index) => {
            dot.className = 'attempt-dot';
        });

    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ø—ã—Ç–æ–∫
    updateAttemptIndicators() {

        const attemptIndicators = document.getElementById('attemptIndicators');
        if (!attemptIndicators) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ storage
        let currentAttempts = 0;
        if (this.storage && this.walletConnector && this.walletConnector.connected) {
            currentAttempts = this.storage.getPlayerAttempts(this.walletConnector.account);
        }

        const dots = attemptIndicators.querySelectorAll('.attempt-dot');
        dots.forEach((dot, index) => {
            const attemptNumber = index + 1;

            dot.className = 'attempt-dot';

            if (attemptNumber <= currentAttempts) {
                dot.classList.add('completed');
            } else if (attemptNumber === currentAttempts + 1 && currentAttempts < 3) {
                dot.classList.add('current');
            }
        });


        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã
        if (currentAttempts >= 3) {
            const playButton = document.getElementById('playButton');
            if (playButton) {
                playButton.disabled = true;
                playButton.textContent = 'üö´ No attempts left';
            }
        } else {
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ tournament UI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.tournamentUI && typeof window.tournamentUI.updateAttemptIndicators === 'function') {
            window.tournamentUI.updateAttemptIndicators(currentAttempts);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    updateTournamentStatus(status) {
        const statusEl = document.getElementById('tournamentStatus');
        const timerEl = document.getElementById('tournamentTimer');

        if (statusEl) {
            statusEl.className = `tournament-status ${status}`;

            switch (status) {
                case 'active':
                    statusEl.textContent = '‚úÖ Tournament Active';
                    if (timerEl) timerEl.style.display = 'block';
                    this.startTimer();
                    break;
                case 'ended':
                    statusEl.textContent = 'üèÅ Tournament Ended';
                    if (timerEl) timerEl.style.display = 'none';
                    this.stopTimer();
                    break;
                default:
                    statusEl.textContent = 'üö´ Tournament Not Started';
                    if (timerEl) timerEl.style.display = 'none';
                    break;
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer() {
        this.stopTimer();

        let timeRemaining = TOURNAMENT_CONFIG.TOURNAMENT_DURATION;

        this.timerInterval = setInterval(() => {
            timeRemaining--;

            const timerDisplay = document.getElementById('timerDisplay');
            if (timerDisplay) {
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = timeRemaining % 60;
                timerDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

                if (timeRemaining <= TOURNAMENT_CONFIG.WARNING_TIME_THRESHOLD) {
                    timerDisplay.classList.add('warning');
                }
            }

            if (timeRemaining <= 0) {
                this.stopTimer();
                this.updateTournamentStatus('ended');
                this.showError('Tournament time expired!');
            }
        }, 1000);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdateLoop() {
        this.updateInterval = setInterval(() => {
            this.updateData();
        }, TOURNAMENT_CONFIG.AUTO_UPDATE_INTERVAL);

        this.updateData();
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stopUpdateLoop() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async updateData() {
        try {
            this.checkWalletStatus();
            this.checkAdminStatus();
            this.updateLeaderboard();
        } catch (error) {
            Logger.error('Update error:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    checkWalletStatus() {
        const walletButton = document.getElementById('walletButton');
        const walletStatus = document.getElementById('walletStatus');

        if (this.walletConnector && this.walletConnector.connected) {
            if (walletButton) {
                walletButton.classList.add('connected');
            }
            if (walletStatus) {
                const shortAddress = `${this.walletConnector.account.slice(0, 6)}...${this.walletConnector.account.slice(-4)}`;
                walletStatus.textContent = shortAddress;
            }

            if (this.currentUserStatus === 'disconnected') {
                this.updateUserStatus('connected');
            }
        } else {
            if (walletButton) {
                walletButton.classList.remove('connected');
            }
            if (walletStatus) {
                walletStatus.textContent = 'Connect Wallet';
            }

            if (this.currentUserStatus !== 'disconnected') {
                this.updateUserStatus('disconnected');
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    updateLeaderboard() {
        const leaderboardBody = document.getElementById('leaderboardBody');
        if (!leaderboardBody) return;

        if (this.leaderboard) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ TournamentLeaderboard
            const currentWallet = this.walletConnector && this.walletConnector.connected
                ? this.walletConnector.account : null;

            this.leaderboard.updateLeaderboardUI(leaderboardBody, {
                maxPlayers: TOURNAMENT_CONFIG.LEADERBOARD_MAX_ENTRIES || 100,
                currentWallet: currentWallet
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const leaderboardData = this.leaderboard.getStoredLeaderboard();
            const participantCountEl = document.getElementById('participantCount');
            if (participantCountEl) {
                participantCountEl.textContent = leaderboardData.length.toString();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
            this.updatePrizeBreakdown(leaderboardData.length);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
    updatePrizeBreakdown(participantCount) {
        const firstPrizeEl = document.getElementById('firstPrize');
        const secondPrizeEl = document.getElementById('secondPrize');
        const thirdPrizeEl = document.getElementById('thirdPrize');
        const totalPrizeEl = document.getElementById('totalPrize');

        if (firstPrizeEl && secondPrizeEl && thirdPrizeEl && totalPrizeEl) {
            const entryFee = parseFloat(TOURNAMENT_CONFIG.ENTRY_FEE);
            const totalPrize = entryFee * participantCount;

            totalPrizeEl.textContent = `${totalPrize.toFixed(3)} PHRS`;

            const firstPrize = (totalPrize * 0.60).toFixed(3);
            const secondPrize = (totalPrize * 0.25).toFixed(3);
            const thirdPrize = (totalPrize * 0.05).toFixed(3);

            firstPrizeEl.textContent = `${firstPrize} PHRS`;
            secondPrizeEl.textContent = `${secondPrize} PHRS`;
            thirdPrizeEl.textContent = `${thirdPrize} PHRS`;
        }
    }

    // –£–¢–ò–õ–ò–¢–´

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    showLoading(message = 'Loading...') {
        const loading = document.createElement('div');
        loading.id = 'tournament-loading';
        loading.className = 'loading-indicator';
        loading.innerHTML = `
            <div class="spinner"></div>
            <p>${message}</p>
        `;
        document.body.appendChild(loading);
    }

    hideLoading() {
        const loading = document.getElementById('tournament-loading');
        if (loading && loading.parentNode) {
            loading.parentNode.removeChild(loading);
        }
    }

    showError(message) {
        if (window.tournamentUI) {
            window.tournamentUI.showError(message);
        } else {
            alert('Error: ' + message);
        }
        Logger.error('Tournament Error:', message);
    }

    showSuccess(message) {
        if (window.tournamentUI) {
            window.tournamentUI.showSuccess(message);
        } else {
            alert('Success: ' + message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    healthCheck() {
        const status = {
            walletConnected: this.walletConnector && this.walletConnector.connected,
            leaderboardReady: this.leaderboard !== null,
            storageReady: this.storage !== null,
            tournamentManagerReady: typeof window.tournamentManager !== 'undefined',
            tournamentUIReady: typeof window.tournamentUI !== 'undefined',
            blockchainAccessible: typeof window.web3 !== 'undefined' || typeof window.Web3 !== 'undefined'
        };

        return status;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
    getState() {
        return {
            currentTournamentId: this.currentTournamentId,
            currentTournamentStatus: this.currentTournamentStatus,
            currentUserStatus: this.currentUserStatus,
            walletConnected: this.walletConnector && this.walletConnector.connected,
            updateLoopActive: this.updateInterval !== null,
            timerActive: this.timerInterval !== null,
            leaderboardReady: this.leaderboard !== null,
            storageReady: this.storage !== null
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        this.stopUpdateLoop();
        this.stopTimer();
    }
}

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è HTML

window.handleWalletToggle = async function() {
    if (window.tournamentWalletConnector) {
        if (window.tournamentWalletConnector.connected) {
            await window.tournamentWalletConnector.disconnect();
        } else {
            await window.tournamentWalletConnector.showWalletModal();
        }
    } else {
        alert('Wallet connector not ready. Please refresh the page.');
    }
};

window.handleRegisterForTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleRegisterForTournament();
    } else {
    }
};

window.handlePlayTournamentGame = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handlePlayTournamentGame();
    } else {
    }
};

window.handleStartTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleStartTournament();
    } else {
    }
};

window.handleEndTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleEndTournament();
    } else {
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.tournamentLobby = new TournamentLobby();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', async () => {

    try {
        await window.tournamentLobby.init();

        setTimeout(() => {
            const health = window.tournamentLobby.healthCheck();
            if (health.walletConnected && health.tournamentManagerReady) {
            } else {
            }
        }, 2000);

    } catch (error) {
        Logger.error('‚ùå Failed to initialize tournament lobby:', error);
    }
});

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï Debug —Ñ—É–Ω–∫—Ü–∏–∏
window.debugTournamentLobby = {
    getState: () => window.tournamentLobby.getState(),
    healthCheck: () => window.tournamentLobby.healthCheck(),
    forceUpdate: () => window.tournamentLobby.updateData(),

    mockRegister: () => {
        window.tournamentLobby.updateUserStatus('registered');
    },

    mockConnect: () => {
        window.tournamentLobby.updateUserStatus('connected');
    },

    mockDisconnect: () => {
        window.tournamentLobby.updateUserStatus('disconnected');
    },

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫
    addTestScore: (score, playerName) => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            return;
        }
        window.tournamentLobby.submitGameScore(score, playerName);
    },

    getLeaderboard: () => {
        if (window.tournamentLobby.leaderboard) {
            const leaderboard = window.tournamentLobby.leaderboard.getStoredLeaderboard();
            return leaderboard;
        }
        return null;
    },

    clearLeaderboard: () => {
        if (window.tournamentLobby.leaderboard) {
            window.tournamentLobby.leaderboard.clearLeaderboard();
            window.tournamentLobby.updateLeaderboard();
        }
    },

    getPlayerStats: () => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            return null;
        }
        if (window.tournamentLobby.leaderboard) {
            const stats = window.tournamentLobby.leaderboard.getPlayerStats(window.tournamentLobby.walletConnector.account);
            return stats;
        }
        return null;
    },

    // üî• –ù–û–í–´–ï debug —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è storage
    getStorageStats: () => {
        if (window.tournamentLobby.storage) {
            const stats = window.tournamentLobby.storage.getStorageStats();
            return stats;
        }
        return null;
    },

    getPlayerAttempts: () => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            return 0;
        }
        if (window.tournamentLobby.storage) {
            const attempts = window.tournamentLobby.storage.getPlayerAttempts();
            return attempts;
        }
        return 0;
    },

    resetPlayerAttempts: () => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            return;
        }
        if (window.tournamentLobby.storage) {
            window.tournamentLobby.storage.resetPlayerAttempts();
            window.tournamentLobby.updateAttemptIndicators();
        }
    },

    clearAllData: () => {
        if (window.tournamentLobby.storage) {
            window.tournamentLobby.storage.clearAllTournamentData();
        }
        if (window.tournamentLobby.leaderboard) {
            window.tournamentLobby.leaderboard.clearLeaderboard();
        }
        window.tournamentLobby.updateLeaderboard();
    },

    simulateGame: (finalScore) => {
        const score = finalScore || Math.floor(Math.random() * 10000) + 1000;
        window.tournamentLobby.submitGameScore(score, `Player${Date.now()}`);
    },

    // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    testRegistrationFlow: () => {

        // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        window.debugTournamentLobby.mockConnect();

        // 2. –ñ–¥–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        setTimeout(() => {
            window.debugTournamentLobby.mockRegister();
        }, 1000);

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã
        setTimeout(() => {
            const attempts = window.debugTournamentLobby.getPlayerAttempts();
        }, 2000);
    },

    // –°–∏–º—É–ª—è—Ü–∏—è 3 –∏–≥—Ä –ø–æ–¥—Ä—è–¥
    testFullGameFlow: async () => {

        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            window.debugTournamentLobby.mockConnect();
            await new Promise(resolve => setTimeout(resolve, 500));
            window.debugTournamentLobby.mockRegister();
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        // –ò–≥—Ä–∞–µ–º 3 –∏–≥—Ä—ã
        for (let i = 1; i <= 3; i++) {
            const score = Math.floor(Math.random() * 5000) + 1000;
            window.tournamentLobby.submitGameScore(score, `TestPlayer`);

            // –ñ–¥–µ–º –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
            if (i < 3) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        setTimeout(() => {
            const attempts = window.debugTournamentLobby.getPlayerAttempts();

            const canPlay = window.tournamentLobby.storage.canPlayerPlay();
        }, 1500);
    }
};

