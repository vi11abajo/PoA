// üèÜ PHAROS INVADERS - TOURNAMENT LEADERBOARD
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û - —É–±—Ä–∞–Ω –¥–≤–æ–π–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ø—ã—Ç–æ–∫)

class TournamentLeaderboard {
    constructor(tournamentId = 1) {
        this.tournamentId = tournamentId;
        this.leaderboard = [];

    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    getStoredLeaderboard() {
        try {
            const stored = localStorage.getItem(`tournament_leaderboard_${this.tournamentId}`);
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            Logger.error('‚ùå Error loading leaderboard:', error);
            return [];
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    saveLeaderboard(leaderboard) {
        try {
            localStorage.setItem(
                `tournament_leaderboard_${this.tournamentId}`,
                JSON.stringify(leaderboard)
            );
            this.leaderboard = leaderboard;
        } catch (error) {
            Logger.error('‚ùå Error saving leaderboard:', error);
        }
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–ë–ï–ó —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∑–¥–µ—Å—å)
    addPlayerScore(walletAddress, score, playerName = null) {
        try {

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            let leaderboard = this.getStoredLeaderboard();

            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            let playerIndex = leaderboard.findIndex(entry =>
                entry.player.toLowerCase() === walletAddress.toLowerCase()
            );

            if (playerIndex !== -1) {
                // –ò–≥—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
                leaderboard[playerIndex].scores.push(score);

                // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º attempts –∑–¥–µ—Å—å! –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ tournament-storage.js
                // leaderboard[playerIndex].attempts = leaderboard[playerIndex].scores.length; // –£–ë–†–ê–ù–û

                leaderboard[playerIndex].bestScore = Math.max(...leaderboard[playerIndex].scores);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–≤–æ–µ
                if (playerName && playerName.trim()) {
                    leaderboard[playerIndex].playerName = playerName.trim();
                }

            } else {
                // –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫
                const newPlayer = {
                    player: walletAddress,
                    playerName: playerName && playerName.trim() ? playerName.trim() : `Player${leaderboard.length + 1}`,
                    scores: [score],
                    bestScore: score,
                    attempts: 1, // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1
                    timestamp: Math.floor(Date.now() / 1000)
                };

                leaderboard.push(newPlayer);
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            leaderboard.sort((a, b) => b.bestScore - a.bestScore);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            this.saveLeaderboard(leaderboard);


            return leaderboard;

        } catch (error) {
            Logger.error('‚ùå Error adding player score:', error);
            return this.getStoredLeaderboard();
        }
    }

    // üî• –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏–≥—Ä–æ–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ storage)
    updatePlayerAttempts(walletAddress, attempts) {
        try {
            let leaderboard = this.getStoredLeaderboard();
            let playerIndex = leaderboard.findIndex(entry =>
                entry.player.toLowerCase() === walletAddress.toLowerCase()
            );

            if (playerIndex !== -1) {
                leaderboard[playerIndex].attempts = attempts;
                this.saveLeaderboard(leaderboard);
            }
        } catch (error) {
            Logger.error('‚ùå Error updating player attempts:', error);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    getPlayerStats(walletAddress) {
        const leaderboard = this.getStoredLeaderboard();
        const player = leaderboard.find(entry =>
            entry.player.toLowerCase() === walletAddress.toLowerCase()
        );

        if (player) {
            return {
                bestScore: player.bestScore,
                attempts: player.attempts,
                scores: [...player.scores],
                rank: leaderboard.findIndex(p => p.player.toLowerCase() === walletAddress.toLowerCase()) + 1,
                playerName: player.playerName,
                timestamp: player.timestamp
            };
        }

        return {
            bestScore: 0,
            attempts: 0,
            scores: [],
            rank: 0,
            playerName: null,
            timestamp: 0
        };
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –≤ UI (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç leaderboardBody –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä)
    updateLeaderboardUI(leaderboardBody, options = {}) {
        if (!leaderboardBody) {
            Logger.error('‚ùå Leaderboard body element not provided');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const leaderboard = this.getStoredLeaderboard();


        leaderboardBody.innerHTML = '';

        if (leaderboard.length === 0) {
            leaderboardBody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px; color: #66ccff;">
                        <em>No scores yet. Be the first to play!</em>
                    </td>
                </tr>
            `;
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-100 –∏–≥—Ä–æ–∫–æ–≤ (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
        const maxPlayers = options.maxPlayers || (TOURNAMENT_CONFIG.LEADERBOARD_MAX_ENTRIES || 100);
        const topPlayers = leaderboard.slice(0, maxPlayers);
        const currentWallet = options.currentWallet;

        topPlayers.forEach((entry, index) => {
            const rank = index + 1;
            const row = document.createElement('tr');

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ø-3
            if (rank <= 3) {
                row.classList.add('top-3');
            }

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (currentWallet &&
                entry.player.toLowerCase() === currentWallet.toLowerCase()) {
                row.style.backgroundColor = 'rgba(0, 221, 255, 0.2)';
                row.style.border = '1px solid #00ddff';
            }

            const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : '';
            const prizePercent = rank === 1 ? '60%' : rank === 2 ? '25%' : rank === 3 ? '5%' : '-';

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–º–∞–∫—Å–∏–º—É–º 3)
            const attemptsInfo = `${Math.min(entry.attempts, 3)}/3`;
            const scoreDisplay = `${TournamentUtils.formatNumber(entry.bestScore)}`;

            row.innerHTML = `
                <td class="rank-cell">${medal} ${rank}</td>
                <td class="name-cell">
                    ${entry.playerName}
                    <div style="font-size: 10px; color: #66ccff; margin-top: 2px;">
                        ${attemptsInfo} attempts
                    </div>
                </td>
                <td class="address-cell">${TournamentUtils.formatAddress(entry.player)}</td>
                <td class="score-cell">
                    ${scoreDisplay}
                    ${entry.scores.length > 1 ?
                        `<div style="font-size: 10px; color: #aaccff; margin-top: 2px;">
                            All: ${entry.scores.slice(-3).join(', ')}
                        </div>` : ''
                    }
                </td>
                <td class="prize-cell">${prizePercent}</td>
            `;

            leaderboardBody.appendChild(row);
        });

    }

    // üî• –ù–û–í–û–ï: –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    clearPlayerData(walletAddress) {
        try {
            let leaderboard = this.getStoredLeaderboard();

            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            leaderboard = leaderboard.filter(entry =>
                entry.player.toLowerCase() !== walletAddress.toLowerCase()
            );

            this.saveLeaderboard(leaderboard);
        } catch (error) {
            Logger.error('‚ùå Error clearing player data:', error);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
    getTopPlayers(limit = 100) {
        const leaderboard = this.getStoredLeaderboard();
        return leaderboard.slice(0, limit);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    getLeaderboardStats() {
        const leaderboard = this.getStoredLeaderboard();

        if (leaderboard.length === 0) {
            return {
                totalPlayers: 0,
                totalGames: 0,
                averageScore: 0,
                highestScore: 0,
                averageAttempts: 0
            };
        }

        const totalGames = leaderboard.reduce((sum, player) => sum + Math.min(player.attempts, 3), 0);
        const totalScore = leaderboard.reduce((sum, player) => sum + player.bestScore, 0);
        const highestScore = Math.max(...leaderboard.map(p => p.bestScore));
        const averageScore = Math.round(totalScore / leaderboard.length);
        const averageAttempts = Math.round((totalGames / leaderboard.length) * 10) / 10;

        return {
            totalPlayers: leaderboard.length,
            totalGames: totalGames,
            averageScore: averageScore,
            highestScore: highestScore,
            averageAttempts: averageAttempts
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    getPlayerRank(walletAddress) {
        const leaderboard = this.getStoredLeaderboard();
        const playerIndex = leaderboard.findIndex(entry =>
            entry.player.toLowerCase() === walletAddress.toLowerCase()
        );
        return playerIndex >= 0 ? playerIndex + 1 : 0;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –∏–≥—Ä–∞—Ç—å
    canPlayerPlay(walletAddress) {
        const stats = this.getPlayerStats(walletAddress);
        return stats.attempts < 3;
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    clearLeaderboard() {
        try {
            localStorage.removeItem(`tournament_leaderboard_${this.tournamentId}`);
            this.leaderboard = [];
            return true;
        } catch (error) {
            Logger.error('‚ùå Error clearing leaderboard:', error);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –≤ JSON
    exportLeaderboard() {
        const leaderboard = this.getStoredLeaderboard();
        const stats = this.getLeaderboardStats();

        return {
            tournamentId: this.tournamentId,
            exportTime: new Date().toISOString(),
            stats: stats,
            players: leaderboard
        };
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∏–∑ JSON
    importLeaderboard(data) {
        try {
            if (!data.players || !Array.isArray(data.players)) {
                throw new Error('Invalid leaderboard data format');
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            const validatedPlayers = data.players.filter(player => {
                return player.player &&
                       player.scores &&
                       Array.isArray(player.scores) &&
                       typeof player.bestScore === 'number' &&
                       typeof player.attempts === 'number';
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            validatedPlayers.sort((a, b) => b.bestScore - a.bestScore);

            this.saveLeaderboard(validatedPlayers);

            return true;
        } catch (error) {
            Logger.error('‚ùå Error importing leaderboard:', error);
            return false;
        }
    }

    // –°–º–µ–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    setTournamentId(newTournamentId) {
        this.tournamentId = newTournamentId;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID —Ç—É—Ä–Ω–∏—Ä–∞
    getTournamentId() {
        return this.tournamentId;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TournamentLeaderboard;
} else if (typeof window !== 'undefined') {
    window.TournamentLeaderboard = TournamentLeaderboard;
}

