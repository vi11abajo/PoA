// üèÜ PHAROS INVADERS - TOURNAMENT ADAPTER
// –§–∞–π–ª-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫: –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
// –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

class TournamentAdapter {
    constructor() {
        this.isActive = false;
        this.tournamentData = null;
        this.originalFunctions = {}; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        this.tournamentCallbacks = {
            onScoreUpdate: null,
            onLivesChange: null,
            onLevelChange: null,
            onGameOver: null
        };

    }

    // ========== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ==========

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    activate(tournamentData, callbacks = {}) {
        if (this.isActive) {
            Logger.warn('‚ö†Ô∏è Tournament adapter already active');
            return;
        }

        this.tournamentData = tournamentData;
        this.tournamentCallbacks = { ...this.tournamentCallbacks, ...callbacks };


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        this.saveOriginalFunctions();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏
        this.interceptPaymentSystem();
        this.interceptGameOver();
        this.interceptScoreSaving();
        this.interceptGameEvents();
        this.setupTournamentUI();

        this.isActive = true;
    }

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    deactivate() {
        if (!this.isActive) {
            return;
        }


        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        this.restoreOriginalFunctions();

        this.isActive = false;
        this.tournamentData = null;

    }

    // ========== –°–û–•–†–ê–ù–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ==========

    saveOriginalFunctions() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        if (typeof window.startGame === 'function') {
            this.originalFunctions.startGame = window.startGame;
        }

        if (typeof window.showGameOver === 'function') {
            this.originalFunctions.showGameOver = window.showGameOver;
        }

        if (typeof window.saveScoreToBlockchain === 'function') {
            this.originalFunctions.saveScoreToBlockchain = window.saveScoreToBlockchain;
        }

        if (typeof window.restartGame === 'function') {
            this.originalFunctions.restartGame = window.restartGame;
        }

    }

    restoreOriginalFunctions() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        Object.keys(this.originalFunctions).forEach(funcName => {
            if (this.originalFunctions[funcName]) {
                window[funcName] = this.originalFunctions[funcName];
            }
        });

        this.originalFunctions = {};
    }

    // ========== –ü–ï–†–ï–•–í–ê–¢–ß–ò–ö–ò ==========

    // 1. –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã
    interceptPaymentSystem() {
        if (!this.originalFunctions.startGame) return;

        window.startGame = () => {

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if (typeof window.hasPaidFee !== 'undefined') {
                window.hasPaidFee = true;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            window.tournamentMode = true;
            window.tournamentData = this.tournamentData;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            if (typeof window.currentGameSession !== 'undefined') {
                window.currentGameSession = `tournament_${this.tournamentData.tournamentId}_${this.tournamentData.attempt}`;
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É
            this.originalFunctions.startGame();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            this.setupGameMonitoring();
        };

    }

    // 2. –ü–µ—Ä–µ—Ö–≤–∞—Ç Game Over
    interceptGameOver() {
        if (!this.originalFunctions.showGameOver) return;

        window.showGameOver = () => {

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
            const finalScore = typeof window.score !== 'undefined' ? window.score : 0;
            const finalLevel = typeof window.level !== 'undefined' ? window.level : 1;
            const finalLives = typeof window.lives !== 'undefined' ? window.lives : 0;

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
            const gameResult = {
                score: finalScore,
                level: finalLevel,
                lives: finalLives,
                duration: this.getGameDuration(),
                timestamp: Date.now(),
                attempt: this.tournamentData.attempt,
                tournamentId: this.tournamentData.tournamentId
            };

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            this.showTournamentGameOver(gameResult);

            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.tournamentCallbacks.onGameOver) {
                this.tournamentCallbacks.onGameOver(gameResult);
            }
        };

    }

    // 3. –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    interceptScoreSaving() {
        if (!this.originalFunctions.saveScoreToBlockchain) return;

        window.saveScoreToBlockchain = (playerName, score) => {

            // –í–º–µ—Å—Ç–æ –±–ª–æ–∫—á–µ–π–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            this.saveTournamentScore(score, playerName);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showTournamentScoreSubmitted(score, playerName);
        };

    }

    // 4. –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–ª–ª–±–µ–∫–æ–≤
    interceptGameEvents() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
        this.setupScoreMonitoring();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–∏–∑–Ω–µ–π
        this.setupLivesMonitoring();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        this.setupLevelMonitoring();

    }

    // ========== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ì–†–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ==========

    setupGameMonitoring() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if (this.gameMonitorInterval) {
            clearInterval(this.gameMonitorInterval);
        }

        this.lastKnownValues = {
            score: 0,
            lives: 3,
            level: 1
        };

        this.gameMonitorInterval = setInterval(() => {
            this.checkGameVariables();
        }, 100); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
    }

    checkGameVariables() {
        if (!this.isActive) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        if (typeof window.score !== 'undefined' && window.score !== this.lastKnownValues.score) {
            this.lastKnownValues.score = window.score;
            if (this.tournamentCallbacks.onScoreUpdate) {
                this.tournamentCallbacks.onScoreUpdate(window.score);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–∑–Ω–∏
        if (typeof window.lives !== 'undefined' && window.lives !== this.lastKnownValues.lives) {
            this.lastKnownValues.lives = window.lives;
            if (this.tournamentCallbacks.onLivesChange) {
                this.tournamentCallbacks.onLivesChange(window.lives);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (typeof window.level !== 'undefined' && window.level !== this.lastKnownValues.level) {
            this.lastKnownValues.level = window.level;
            if (this.tournamentCallbacks.onLevelChange) {
                this.tournamentCallbacks.onLevelChange(window.level);
            }
        }
    }

    setupScoreMonitoring() {
        // –°–æ–∑–¥–∞–µ–º Proxy –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        if (typeof window.score !== 'undefined') {
            let scoreValue = window.score;

            Object.defineProperty(window, 'score', {
                get: () => scoreValue,
                set: (value) => {
                    scoreValue = value;
                    if (this.tournamentCallbacks.onScoreUpdate) {
                        this.tournamentCallbacks.onScoreUpdate(value);
                    }
                },
                configurable: true
            });
        }
    }

    setupLivesMonitoring() {
        if (typeof window.lives !== 'undefined') {
            let livesValue = window.lives;

            Object.defineProperty(window, 'lives', {
                get: () => livesValue,
                set: (value) => {
                    livesValue = value;
                    if (this.tournamentCallbacks.onLivesChange) {
                        this.tournamentCallbacks.onLivesChange(value);
                    }
                },
                configurable: true
            });
        }
    }

    setupLevelMonitoring() {
        if (typeof window.level !== 'undefined') {
            let levelValue = window.level;

            Object.defineProperty(window, 'level', {
                get: () => levelValue,
                set: (value) => {
                    levelValue = value;
                    if (this.tournamentCallbacks.onLevelChange) {
                        this.tournamentCallbacks.onLevelChange(value);
                    }
                },
                configurable: true
            });
        }
    }

    // ========== –¢–£–†–ù–ò–†–ù–´–ï UI –§–£–ù–ö–¶–ò–ò ==========

    setupTournamentUI() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ UI
        this.addTournamentInfo();

        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        this.modifyGameButtons();
    }

    addTournamentInfo() {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç UI –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const uiElement = document.querySelector('.ui') || document.querySelector('#ui') || document.body;

        if (uiElement) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            const existingInfo = document.getElementById('tournament-info');
            if (existingInfo) {
                existingInfo.remove();
            }

            const tournamentInfo = document.createElement('div');
            tournamentInfo.id = 'tournament-info';
            tournamentInfo.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                background: rgba(255, 215, 0, 0.9);
                color: #000;
                padding: 10px;
                border-radius: 8px;
                font-weight: bold;
                z-index: 1000;
                font-size: 14px;
                transition: opacity 0.5s ease-out;
            `;

            tournamentInfo.innerHTML = `
                üèÜ TOURNAMENT MODE<br>
                Attempt: ${this.tournamentData.attempt}/${this.tournamentData.maxAttempts}<br>
                Tournament ID: #${this.tournamentData.tournamentId}
            `;

            uiElement.appendChild(tournamentInfo);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (tournamentInfo && tournamentInfo.parentNode) {
                    tournamentInfo.style.opacity = '0';
                    setTimeout(() => {
                        if (tournamentInfo && tournamentInfo.parentNode) {
                            tournamentInfo.remove();
                        }
                    }, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                }
            }, 5000);
        }
    }

    modifyGameButtons() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        const blockchainSection = document.querySelector('.blockchain-section');
        if (blockchainSection) {
            blockchainSection.style.display = 'none';
        }
    }

    // ========== –¢–£–†–ù–ò–†–ù–´–ï –≠–ö–†–ê–ù–´ ==========

    showTournamentGameOver(gameResult) {
        // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω Game Over
        const gameOverDiv = document.getElementById('gameOver') || this.createGameOverDiv();

        gameOverDiv.innerHTML = `
            <div class="tournament-game-over" style="
                background: linear-gradient(135deg, rgba(0, 17, 34, 0.95) 0%, rgba(0, 51, 102, 0.9) 100%);
                border: 3px solid #ffd700;
                border-radius: 20px;
                padding: 30px;
                text-align: center;
                color: white;
                max-width: 500px;
                margin: 0 auto;
            ">
                <h2 style="color: #ffd700; margin-bottom: 20px;">üèÜ Tournament Game Complete!</h2>

                <div style="margin: 20px 0;">
                    <div style="font-size: 24px; margin: 10px 0;">
                        Final Score: <span style="color: #00ddff;">${TournamentUtils.formatNumber(gameResult.score)}</span>
                    </div>
                    <div style="font-size: 18px; margin: 10px 0;">
                        Level Reached: <span style="color: #00ddff;">${gameResult.level}</span>
                    </div>
                    <div style="font-size: 16px; margin: 10px 0;">
                        Attempt: <span style="color: #ffd700;">${gameResult.attempt}/${this.tournamentData.maxAttempts}</span>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <button onclick="tournamentAdapter.handleTournamentContinue()" style="
                        background: #007acc;
                        color: white;
                        border: none;
                        padding: 15px 30px;
                        border-radius: 8px;
                        font-size: 16px;
                        margin: 10px;
                        cursor: pointer;
                        font-weight: bold;
                    ">üèÜ Back to Tournament</button>
                </div>
            </div>
        `;

        gameOverDiv.style.display = 'flex';

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.handleTournamentContinue();
        }, 5000);
    }

    createGameOverDiv() {
        const gameOverDiv = document.createElement('div');
        gameOverDiv.id = 'tournament-game-over';
        gameOverDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;

        document.body.appendChild(gameOverDiv);
        return gameOverDiv;
    }

    showTournamentScoreSubmitted(score, playerName) {

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ tournament UI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.tournamentUI && window.tournamentUI.showSuccess) {
            window.tournamentUI.showSuccess(`Score ${TournamentUtils.formatNumber(score)} submitted successfully!`);
        }
    }

    // ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==========

    handleTournamentContinue() {
        
        // –ê–ì–†–ï–°–°–ò–í–ù–û –æ—á–∏—â–∞–µ–º –í–°–ï game over —ç–∫—Ä–∞–Ω—ã
        const allGameOverScreens = document.querySelectorAll('#tournament-game-over, .tournament-game-over, [id*="game-over"], [class*="game-over"]');
        allGameOverScreens.forEach(screen => {
            screen.style.display = 'none';
            screen.remove();
        });

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        this.deactivate();

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –ª–æ–±–±–∏
        if (window.tournamentUI && window.tournamentUI.closeGame) {
            window.tournamentUI.closeGame();
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–±–±–∏
            window.location.href = '/tournament';
        }
    }

    // ========== –£–¢–ò–õ–ò–¢–´ ==========

    saveTournamentScore(score, playerName) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ tournament lobby
        if (window.tournamentLobby && window.tournamentLobby.submitGameScore) {
            window.tournamentLobby.submitGameScore(score, playerName);
        } else {
            Logger.warn('‚ö†Ô∏è Tournament lobby not available for score submission');
        }
    }

    getGameDuration() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã
        if (typeof window.gameStartTime !== 'undefined') {
            return Date.now() - window.gameStartTime;
        }
        return 0;
    }

    // ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========

    getStatus() {
        return {
            isActive: this.isActive,
            tournamentData: this.tournamentData,
            hasOriginalFunctions: Object.keys(this.originalFunctions).length > 0,
            monitoringActive: !!this.gameMonitorInterval,
            availableFunctions: {
                startGame: typeof window.startGame === 'function',
                showGameOver: typeof window.showGameOver === 'function',
                saveScoreToBlockchain: typeof window.saveScoreToBlockchain === 'function'
            }
        };
    }

    // ========== –û–ß–ò–°–¢–ö–ê ==========

    cleanup() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.gameMonitorInterval) {
            clearInterval(this.gameMonitorInterval);
            this.gameMonitorInterval = null;
        }

        // –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ UI
        const tournamentInfo = document.getElementById('tournament-info');
        if (tournamentInfo) {
            tournamentInfo.remove();
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        this.deactivate();

    }
}

// ========== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
window.tournamentAdapter = new TournamentAdapter();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.tournamentAdapter) {
        window.tournamentAdapter.cleanup();
    }
});

// Debug —Ñ—É–Ω–∫—Ü–∏–∏
window.debugTournamentAdapter = {
    getStatus: () => window.tournamentAdapter.getStatus(),
    activate: (tournamentData) => {
        window.tournamentAdapter.activate(tournamentData || {
            tournamentId: 1,
            attempt: 1,
            maxAttempts: 3
        });
    },
    deactivate: () => window.tournamentAdapter.deactivate(),
    cleanup: () => window.tournamentAdapter.cleanup()
};

