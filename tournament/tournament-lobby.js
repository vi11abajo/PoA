// üèÜ PHAROS INVADERS - TOURNAMENT LOBBY
// ‚ö° –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù –†–ï–ñ–ò–ú - NO LOCAL FALLBACKS FOREVER! ‚ö°
// üöÄ –†–∞–±–æ—Ç–∞–µ—Ç –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û —Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ Pharos Testnet
// üîí –í—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—ã—Ç–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å—á–µ—Ç–∞ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ blockchain

class TournamentLobby {
    constructor() {
        this.walletConnector = null;
        this.currentTournamentId = 1;
        this.currentTournamentStatus = 'NOT_STARTED';
        this.currentUserStatus = 'disconnected';
        this.isRegistering = false;
        this.updateInterval = null;
        this.timerInterval = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        this.leaderboard = null;
        this.storage = null;

        // Tournament monitoring
        this.tournamentMonitorInterval = null;
        this.isMonitoringActive = false;
        this.lastCheckedTournaments = new Set();
        
        // üõ†Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞–º–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏)
        this.timers = {
            intervals: new Map(),      // –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            timeouts: new Set(),       // –≤—Å–µ timeout'—ã
            updateLoop: null,          // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            monitoring: null,          // –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
            leaderboardUpdate: null    // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        };
        
        // üèÜ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.startLeaderboardAutoUpdate();
        
        // ‚ö° –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å—á–µ—Ç –Ω–µ —É–ª—É—á—à–µ–Ω
        this.playerAttempts = 0;
        this.playerRegistered = false;

    }

    // üõ†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ê–ô–ú–ï–†–ê–ú–ò
    
    // –°–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    createSafeInterval(callback, delay, name) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.timers.intervals.has(name)) {
            clearInterval(this.timers.intervals.get(name));
        }
        
        const intervalId = setInterval(callback, delay);
        this.timers.intervals.set(name, intervalId);
        // Logger.log(`‚è∞ Created safe interval: ${name}`); // Removed: too verbose
        return intervalId;
    }
    
    // –°–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π timeout —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
    createSafeTimeout(callback, delay) {
        const timeoutId = setTimeout(() => {
            callback();
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            this.timers.timeouts.delete(timeoutId);
        }, delay);
        
        this.timers.timeouts.add(timeoutId);
        return timeoutId;
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    clearSafeInterval(name) {
        if (this.timers.intervals.has(name)) {
            clearInterval(this.timers.intervals.get(name));
            this.timers.intervals.delete(name);
            // Logger.log(`üßπ Cleared safe interval: ${name}`); // Removed: too verbose
        }
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫)
    clearAllTimers() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.timers.intervals.forEach((intervalId, name) => {
            clearInterval(intervalId);
            // Logger.log(`üßπ Cleared interval: ${name}`); // Removed: too verbose
        });
        this.timers.intervals.clear();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ timeout'—ã
        this.timers.timeouts.forEach(timeoutId => clearTimeout(timeoutId));
        this.timers.timeouts.clear();
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        if (this.tournamentMonitorInterval) {
            clearInterval(this.tournamentMonitorInterval);
            this.tournamentMonitorInterval = null;
        }
        
        Logger.log('üßπ All timers cleared - no memory leaks!');
    }

    // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ‚ö°
    requireBlockchainConnection(operation = 'operation') {
        if (!this.walletConnector || !this.walletConnector.connected) {
            throw new Error(`üö´ ${operation} requires wallet connection! Tournament works ONLY with blockchain.`);
        }
        
        if (!window.tournamentManager || !window.tournamentManager.connected) {
            throw new Error(`üö´ ${operation} requires blockchain connection! Tournament works ONLY with smart contracts.`);
        }
        
        Logger.log(`‚úÖ Blockchain connection verified for ${operation}`);
    }
// –£–î–ê–õ–ï–ù–û: createFallbackStorage - —Ç–æ–ª—å–∫–æ –±–ª–æ–∫—á–µ–π–Ω, –Ω–∏–∫–∞–∫–∏—Ö fallback!
    // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–±–±–∏
async init() {
    try {
        Logger.log('üöÄ Starting Tournament Lobby...');

        // –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const oldAttempts = parseInt(localStorage.getItem('tournament_attempts') || '0');
        if (oldAttempts > 3) {
            // Logger.log(`üßπ Cleaning invalid attempts on init: ${oldAttempts} -> removed`); // Removed: too verbose
            localStorage.removeItem('tournament_attempts');
        }

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        await this.sleep(1000);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        await this.initDependencies();

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        this.initWalletConnector();
        this.setupUI();
        this.startUpdateLoop();

        Logger.log('‚úÖ Tournament Lobby ready');

    } catch (error) {
        Logger.error('‚ùå Failed to initialize Tournament Lobby:', error);
        this.showError('Failed to initialize tournament system. Please refresh the page.');
    }
}

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async initDependencies() {
    try {
        Logger.log('üîß Initializing dependencies...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤
        Logger.log('üîß TournamentLeaderboard available:', typeof TournamentLeaderboard);
        Logger.log('üîß TournamentStorage available:', typeof TournamentStorage);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TournamentLeaderboard
        if (typeof TournamentLeaderboard !== 'undefined') {
            this.leaderboard = new TournamentLeaderboard(this.currentTournamentId);
            Logger.log('‚úÖ Tournament Leaderboard ready');
        } else {
            Logger.error('‚ùå TournamentLeaderboard not found');
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TournamentStorage
        if (typeof TournamentStorage !== 'undefined') {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if (!this.storage || typeof this.storage.getPlayerAttempts !== 'function') {
                this.storage = new TournamentStorage(this.currentTournamentId);
                Logger.log('‚úÖ Tournament Storage created');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
            if (this.storage && typeof this.storage.getPlayerAttempts === 'function') {
                Logger.log('‚úÖ Storage methods verified');
            } else {
                Logger.error('‚ùå Storage object invalid');
                throw new Error('Storage methods not available');
            }

        } else {
            Logger.error('‚ùå TournamentStorage class not found');
            throw new Error('üö´ TournamentStorage class required - no local fallbacks! Tournament works ONLY with blockchain.');
        }

        // ‚ö° –í–ê–ñ–ù–û: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞)
        await this.searchForActiveTournaments();

    } catch (error) {
        Logger.error('‚ùå Failed to initialize dependencies:', error);
        throw new Error('üö´ Dependencies failed to load - no local fallbacks! Tournament works ONLY with blockchain.');
    }
}
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
    initWalletConnector() {
        if (window.tournamentWalletConnector) {
            this.walletConnector = window.tournamentWalletConnector;
            Logger.log('‚úÖ Tournament wallet connector ready');
        } else if (window.walletConnector) {
            this.walletConnector = window.walletConnector;
            Logger.log('‚úÖ Main wallet connector ready');
        } else {
            Logger.log('‚è≥ Wallet connector not ready yet');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    setupUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateBasicInfo();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.setupButtons();

        Logger.log('‚úÖ UI setup complete');
    }

    // ========== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    updateBasicInfo() {
        // –¢—É—Ä–Ω–∏—Ä ID
        const tournamentIdEl = document.getElementById('tournamentId');
        if (tournamentIdEl) {
            tournamentIdEl.textContent = `#${this.currentTournamentId}`;
        }

        // Entry fee
        const entryFeeEl = document.getElementById('entryFee');
        if (entryFeeEl) {
            entryFeeEl.textContent = `${TOURNAMENT_CONFIG.ENTRY_FEE} PHRS`;
        }

        // Participant count (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        const participantCountEl = document.getElementById('participantCount');
        if (participantCountEl) {
            participantCountEl.textContent = '0';
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
    setupButtons() {
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registerBtn = document.getElementById('registerButton');
        if (registerBtn) {
            registerBtn.onclick = () => this.handleRegisterForTournament();
        }

        // –ö–Ω–æ–ø–∫–∞ –∏–≥—Ä—ã
        const playBtn = document.getElementById('playButton');
        if (playBtn) {
            playBtn.onclick = () => this.handlePlayTournamentGame();
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∫—É–ª–¥–∞—É–Ω–æ–º
        const refreshBtn = document.getElementById('refreshButton');
        if (refreshBtn) {
            this.setupRefreshButton(refreshBtn);
        }

        // –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏
        this.setupAdminButtons();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∫—É–ª–¥–∞—É–Ω–æ–º
    setupRefreshButton(refreshBtn) {
        if (!this.refreshCooldown) {
            this.refreshCooldown = 0;
        }

        const originalText = refreshBtn.innerHTML;
        
        refreshBtn.onclick = async () => {
            const now = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if (now < this.refreshCooldown) {
                const remaining = Math.ceil((this.refreshCooldown - now) / 1000);
                Logger.log(`‚è±Ô∏è Refresh cooldown: ${remaining} seconds remaining`);
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
            this.refreshCooldown = now + 10000;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '‚è≥';
            refreshBtn.style.opacity = '0.6';
            
            try {
                Logger.log('üîÑ Manual refresh triggered...');
                await this.updateData();
                Logger.log('‚úÖ Manual refresh completed');
            } catch (error) {
                Logger.error('‚ùå Manual refresh failed:', error);
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                setTimeout(() => {
                    refreshBtn.disabled = false;
                    refreshBtn.innerHTML = originalText;
                    refreshBtn.style.opacity = '1';
                }, 1000);
            }
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–æ–∫
    setupAdminButtons() {
        const startBtn = document.getElementById('startTournamentBtn');
        if (startBtn) {
            startBtn.onclick = () => this.handleStartTournament();
        }

        const endBtn = document.getElementById('endTournamentBtn');
        if (endBtn) {
            endBtn.onclick = () => this.handleEndTournament();
        }

        const distributePrizesBtn = document.getElementById('distributePrizesBtn');
        if (distributePrizesBtn) {
            distributePrizesBtn.onclick = () => this.handleDistributePrizes();
        }
    }

    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startUpdateLoop() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ë–ï–ó–û–ü–ê–°–ù–û
        this.createSafeInterval(() => {
            this.updateData();
        }, TOURNAMENT_CONFIG.AUTO_UPDATE_INTERVAL || 30000, 'dataUpdate');

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–ï–ó–û–ü–ê–°–ù–û  
        this.createSafeTimeout(() => this.updateData(), 2000);

        Logger.log('‚è∞ Safe update loop started - no memory leaks');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    async updateData() {
        try {
            Logger.log('üîÑ Updating tournament data...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            await this.checkWalletConnection();

            // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            this.updateAdminPanel();

            // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            await this.updateUserStatus();
            await this.updateButtonStates();

            // üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–π–∑ –ø—É–ª —Ç—É—Ä–Ω–∏—Ä–∞
            await this.updateTournamentPrizePool();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (async)
            await this.updateLeaderboard();

            Logger.log('‚úÖ Data update complete');

        } catch (error) {
            Logger.error('‚ùå Error updating data:', error);
        }
    }

    // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–û–ú ==========

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    async checkWalletConnection() {
        const wasConnected = this.currentUserStatus !== 'disconnected';
        const isConnected = this.walletConnector && this.walletConnector.connected;

        if (isConnected && !wasConnected) {
            Logger.log('‚úÖ Wallet connected');
            await this.onWalletConnected();
        } else if (!isConnected && wasConnected) {
            Logger.log('üîå Wallet disconnected');
            await this.onWalletDisconnected();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    async onWalletConnected() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º walletConnector –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.walletConnector) {
            Logger.log('üîß Initializing wallet connector in onWalletConnected...');
            this.initWalletConnector();
        }
        
        if (!this.walletConnector) {
            Logger.error('‚ùå Wallet connector still not available in onWalletConnected');
            return;
        }
        Logger.log('üëõ Wallet connected:', this.walletConnector.account);

        this.currentUserStatus = 'connected';

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º TournamentManager –∫ –∫–æ—à–µ–ª—å–∫—É
        if (window.tournamentManager && this.walletConnector) {
            try {
                // Logger.log('üîó Connecting TournamentManager to wallet...'); // Removed: too verbose
                // Logger.log(`üîß WalletConnector: connected=${this.walletConnector.connected}, account=${this.walletConnector.account?.slice(0, 8)}...`); // Removed: too verbose
                
                const connected = await window.tournamentManager.connect(this.walletConnector);
                if (connected) {
                    Logger.log('‚úÖ TournamentManager connected to blockchain');
                } else {
                    Logger.warn('‚ö†Ô∏è TournamentManager connection failed');
                }
            } catch (error) {
                Logger.error('‚ùå Error connecting TournamentManager:', error);
            }
        } else {
            Logger.error('üîß Connection check failed: TournamentManager or WalletConnector not available');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞)
        await this.updateUserStatusDisplay();
        await this.updateButtonStates();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        this.updateAdminPanel();

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∫—É
        Logger.log('üîß User connected, admin panel:', this.isAdmin() ? 'shown' : 'hidden');
        Logger.log('üîß FORCE Admin check for address:', this.walletConnector.account);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        this.createSafeTimeout(() => {
            Logger.log('üîß DELAYED Admin check...');
            this.updateAdminPanel();
        }, 1000);

        // ‚ö° –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        await this.searchForActiveTournaments();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
        this.startTournamentMonitoring();
    }

    // ‚ö° –ü–û–ò–°–ö –ê–ö–¢–ò–í–ù–´–• –¢–£–†–ù–ò–†–û–í ‚ö°
    async searchForActiveTournaments() {
        try {
            Logger.log('üîç Searching for active tournaments...');
            Logger.log('üîç Wallet connector available:', !!this.walletConnector);
            Logger.log('üîç Wallet connected:', this.walletConnector?.connected);
            
            if (!window.tournamentManager) {
                Logger.log('‚ö†Ô∏è Tournament manager not available, skipping search');
                return;
            }

            Logger.log('üîç Calling findActiveTournament...');
            const activeTournament = await window.tournamentManager.findActiveTournament();
            Logger.log(`üîç Active tournament found: ID=${activeTournament?.id || 'none'}`);
            
            if (activeTournament) {
                if (activeTournament.fallback) {
                    Logger.log('üîÑ Found last active tournament (fallback):', activeTournament.tournamentId);
                } else {
                    Logger.log('‚úÖ Found active tournament:', activeTournament.tournamentId);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä
                this.currentTournamentId = activeTournament.tournamentId;
                
                // –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ fallback
                if (activeTournament.fallback) {
                    this.currentTournamentStatus = activeTournament.isFinished ? 'ENDED' : 'ACTIVE';
                } else {
                    this.currentTournamentStatus = 'ACTIVE';
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
                if (this.walletConnector && this.walletConnector.account) {
                    const isRegistered = await window.tournamentManager.checkPlayerRegistration(
                        activeTournament.tournamentId,
                        this.walletConnector.account
                    );
                    
                    Logger.log('üéØ Player registration status:', isRegistered);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    await this.updateTournamentUI(activeTournament, isRegistered);
                }
            } else {
                Logger.log('‚ùå No active tournaments found');
                this.currentTournamentStatus = 'NOT_STARTED';
                this.updateNoActiveTournamentUI();
            }
            
        } catch (error) {
            Logger.error('‚ùå Error searching for active tournaments:', error);
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å UI –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    async updateTournamentUI(activeTournament, isRegistered) {
        try {
            Logger.log('üé® Updating tournament UI for tournament', activeTournament.tournamentId);
            
            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            Logger.log('üîß Setting player registration status:', isRegistered);
            this.playerRegistered = isRegistered;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–≥—Ä–æ–∫–∞
            try {
                if (isRegistered) {
                    const playerAttempts = await this.getUserAttempts();
                    Logger.log('üéØ Player attempts from blockchain:', playerAttempts);
                    this.playerAttempts = playerAttempts;
                }
            } catch (attemptsError) {
                Logger.warn('‚ö†Ô∏è Could not get player attempts:', attemptsError.message);
                this.playerAttempts = 0;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
            this.updateTournamentStatus('ACTIVE');
            
            // ‚ö° –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUserStatus(isRegistered ? 'registered' : 'connected');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            await this.updateButtonStates();
            
            // ‚ö° –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ø—ã—Ç–æ–∫
            if (window.tournamentUI && isRegistered) {
                Logger.log('üîÑ Updating attempt indicators with', this.playerAttempts, 'attempts');
                window.tournamentUI.updateAttemptIndicators(this.playerAttempts);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            await this.updateData();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSuccess(`üèÜ Active Tournament Found! Tournament #${activeTournament.tournamentId}!`);
            
            if (!isRegistered) {
                Logger.log('üéØ Player not registered - enabling registration button');
            } else {
                Logger.log('‚úÖ Player already registered - showing play button, attempts:', this.playerAttempts);
            }
            
        } catch (error) {
            Logger.error('‚ùå Error updating tournament UI:', error);
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å UI –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    updateNoActiveTournamentUI() {
        Logger.log('üìù No active tournaments - updating UI');
        this.updateTournamentStatus('NOT_STARTED');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        const statusElement = document.getElementById('tournamentStatus');
        if (statusElement) {
            statusElement.textContent = 'No Active Tournaments';
            statusElement.className = 'tournament-status waiting';
        }
    }

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    startTournamentMonitoring() {
        if (this.isMonitoringActive) {
            Logger.log('üîÑ Tournament monitoring already active');
            return;
        }
        
        Logger.log('üîÑ Starting tournament monitoring (every 60 seconds)...');
        this.isMonitoringActive = true;
        
        // –ë–ï–ó–û–ü–ê–°–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        this.createSafeInterval(async () => {
            Logger.log('üîÑ Periodic tournament check...');
            await this.searchForActiveTournaments();
        }, 60000, 'tournamentMonitoring');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        this.startTournamentTimer();
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    stopTournamentMonitoring() {
        Logger.log('‚èπÔ∏è Stopping tournament monitoring');
        this.clearSafeInterval('tournamentMonitoring');
        this.isMonitoringActive = false;
        
        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        if (this.tournamentMonitorInterval) {
            clearInterval(this.tournamentMonitorInterval);
            this.tournamentMonitorInterval = null;
        }
    }

    // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    hideUserButtons() {
        const registerBtn = document.getElementById('registerButton');
        const playBtn = document.getElementById('playButton');

        if (registerBtn) {
            registerBtn.style.display = 'none';
        }

        if (playBtn) {
            playBtn.style.display = 'none';
        }

        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        if (window.tournamentUI && typeof window.tournamentUI.updateUserStatus === 'function') {
            window.tournamentUI.updateUserStatus({
                status: 'admin',
                attempts: 0
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    async onWalletDisconnected() {
        Logger.log('üîå Wallet disconnected');

        this.currentUserStatus = 'disconnected';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        this.hidePlayerNameSection();

        // ‚ö° –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        this.stopTournamentMonitoring();

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º TournamentManager
        if (window.tournamentManager) {
            window.tournamentManager.web3 = null;
            window.tournamentManager.contract = null;
            window.tournamentManager.account = null;
            window.tournamentManager.connected = false;
            Logger.log('üîå TournamentManager disconnected');
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        this.updateAdminPanel();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        await this.updateUserStatusDisplay();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        this.currentTournamentStatus = 'NOT_STARTED';
        this.updateNoActiveTournamentUI();
        await this.updateButtonStates();
    }

    // ========== –°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserStatus(forceStatus = null) {
        try {
            if (forceStatus) {
                Logger.log('üîß Force setting user status to:', forceStatus);
                this.currentUserStatus = forceStatus;
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if (!this.walletConnector || !this.walletConnector.connected) {
                    this.currentUserStatus = 'disconnected';
                } else {
                    // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    const playerAddress = this.walletConnector.account;
                    Logger.log('üîç Checking user status for:', playerAddress, 'in tournament:', this.currentTournamentId);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–ª–æ–∫—á–µ–π–Ω–∞
                    let isRegistered = false;
                    if (window.tournamentManager && window.tournamentManager.connected && this.currentTournamentId) {
                        try {
                            isRegistered = await window.tournamentManager.checkPlayerRegistration(
                                this.currentTournamentId, 
                                playerAddress
                            );
                            
                            // ‚ö° –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            this.playerRegistered = isRegistered;
                            Logger.log('üîÑ Updated playerRegistered:', this.playerRegistered);
                            
                            if (isRegistered) {
                                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                                const attempts = await this.getUserAttempts();
                                this.playerAttempts = attempts;
                                Logger.log('üéØ Player attempts updated from blockchain:', attempts);
                                Logger.log('üîÑ Updated playerAttempts:', this.playerAttempts);
                            } else {
                                this.playerAttempts = 0;
                                Logger.log('üîÑ Reset playerAttempts to 0 (not registered)');
                            }
                            
                        } catch (error) {
                            Logger.warn('‚ö†Ô∏è Cannot verify registration from blockchain:', error.message);
                            isRegistered = false;
                        }
                    }
                    
                    if (isRegistered) {
                        // ‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                        const totalAttempts = await this.getUserAttempts();
                        if (totalAttempts >= TOURNAMENT_CONSTANTS.GAME.MAX_ATTEMPTS) {
                            this.currentUserStatus = 'finished';
                            Logger.log('üèÅ Player status: finished (all attempts used)');
                        } else {
                            this.currentUserStatus = 'registered';
                            Logger.log(`üéÆ Player status: registered (${totalAttempts}/3 attempts used)`);
                        }
                    } else {
                        this.currentUserStatus = 'connected';
                    }
                    
                    Logger.log(`üë§ User status determined: ${this.currentUserStatus} (registered: ${isRegistered})`);
                }
            }

            await this.updateUserStatusDisplay();

        } catch (error) {
            Logger.error('‚ùå Error updating user status:', error);
            this.currentUserStatus = 'disconnected';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserStatusDisplay() {
        if (window.tournamentUI) {
            // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–û: getUserAttempts() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –Ω—É–∂–µ–Ω await
            const attempts = await this.getUserAttempts();

            const statusData = {
                status: this.currentUserStatus,
                attempts: attempts
            };

            // Logger.log(`üîÑ UI status: ${statusData.status}, attempts: ${statusData.attempts}`); // Removed: too verbose
            window.tournamentUI.updateUserStatus(statusData);
            window.tournamentUI.updateAttemptIndicators(attempts);
        }

        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        await this.updateStatusText();
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateStatusText() {
        const statusElement = document.getElementById('userStatus');
        if (!statusElement) return;

        let statusText = '';
        const isAdmin = this.isAdmin();
        // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–û: getUserAttempts() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –Ω—É–∂–µ–Ω await
        const attempts = await this.getUserAttempts();

        switch (this.currentUserStatus) {
            case 'disconnected':
                statusText = 'üîå Connect Wallet to Participate';
                break;
            case 'connected':
                statusText = isAdmin ?
                    'üîß Admin Connected - You can also participate!' :
                    'üí∞ Register for Tournament';
                break;
            case 'registered':
                statusText = isAdmin ?
                    `üîß Admin Registered - ${attempts}/3 attempts used` :
                    `üéÆ Ready to Play - ${attempts}/3 attempts used`;
                break;
            case 'finished':
                statusText = isAdmin ?
                    'üîß Admin - All attempts completed' :
                    '‚úÖ All attempts completed';
                break;
        }

        Logger.log('üìù Status text updated:', statusText);
        statusElement.textContent = statusText;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    async getUserAttempts() {
        if (!this.walletConnector || !this.walletConnector.connected) {
            Logger.log('üéØ getUserAttempts: No wallet connection');
            return this.playerAttempts || 0;
        }

        if (!window.tournamentManager || !window.tournamentManager.connected) {
            Logger.log('üéØ getUserAttempts: No blockchain connection, using local attempts:', this.playerAttempts);
            return this.playerAttempts || 0;
        }

        try {
            const playerInfo = await window.tournamentManager.getPlayerScore(
                this.currentTournamentId, 
                this.walletConnector.account
            );
            const blockchainAttempts = playerInfo ? playerInfo.attempts || 0 : 0;
            
            // ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ localStorage
            const attemptKey = `tournament_${this.currentTournamentId}_attempts_${this.walletConnector.account}`;
            const storedAttempts = parseInt(localStorage.getItem(attemptKey) || '0');
            const localAttempts = Math.max(this.playerAttempts || 0, storedAttempts);
            const totalAttempts = Math.max(blockchainAttempts, localAttempts);
            
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            this.playerAttempts = totalAttempts;
            
            return totalAttempts;
        } catch (error) {
            return this.playerAttempts || 0;
        }
    }

    // ========== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ==========

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ - –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù
    async handleRegisterForTournament() {
        if (this.isRegistering) {
            Logger.log('‚è≥ Registration already in progress');
            return;
        }

        if (!this.walletConnector || !this.walletConnector.connected) {
            this.showError('Please connect your wallet first');
            return;
        }

        if (this.currentTournamentStatus !== 'ACTIVE') {
            this.showError('Tournament is not active. Please wait for admin to start it.');
            return;
        }

        try {
            this.isRegistering = true;
            this.showLoading('Registering for tournament on blockchain...');

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ (Discord username –∏–ª–∏ fallback)
            const customPlayerName = this.getPlayerName();
            const playerName = customPlayerName || this.getDefaultPlayerName();

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Tournament Registration');

            Logger.log('üîó Registering ONLY via blockchain...');
            const txHash = await window.tournamentManager.registerForTournament(
                this.currentTournamentId, 
                playerName
            );
            Logger.log('‚úÖ Blockchain registration successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Successfully registered on blockchain! TX: ${txHash.slice(0, 8)}...`);

            // ‚ö° –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            this.playerAttempts = 0;
            const attemptKey = `tournament_${this.currentTournamentId}_attempts_${this.walletConnector.account}`;
            localStorage.removeItem(attemptKey);
            Logger.log('üîÑ Local attempts reset for new registration');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.currentUserStatus = 'registered';
            await this.updateUserStatusDisplay();
            await this.updateButtonStates();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
            this.showPlayerNameSection();

        } catch (error) {
            this.hideLoading();
            Logger.error('‚ùå Blockchain registration failed:', error);
            this.showError('üö´ Registration failed on blockchain: ' + error.message + '\n\nTournament works ONLY with blockchain - no local modes available.');
        } finally {
            this.isRegistering = false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    async handlePlayTournamentGame() {
        if (!this.walletConnector || !this.walletConnector.connected) {
            this.showError('Please connect your wallet first');
            return;
        }

        if (this.currentUserStatus !== 'registered') {
            this.showError('Please register for the tournament first');
            return;
        }

        // ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Discord username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω
        if (!this.hasDiscordUsername()) {
            this.showError('Discord username is required to play. Please enter your Discord username first.');
            this.showPlayerNameSection(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            return;
        }

        // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–û: getUserAttempts() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –Ω—É–∂–µ–Ω await
        const attempts = await this.getUserAttempts();
        if (attempts >= TOURNAMENT_CONSTANTS.GAME.MAX_ATTEMPTS) {
            this.showError(`You have used all ${TOURNAMENT_CONSTANTS.GAME.MAX_ATTEMPTS} attempts`);
            return;
        }

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–¥–µ—Å—å - –æ–Ω–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –≤ submitGameScore
            Logger.log(`üéÆ Starting game. Current attempts: ${attempts}/3`);
            // –£–¥–∞–ª–∏–ª–∏: this.storage.incrementPlayerAttempts(this.walletConnector.account);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            const tournamentData = {
                tournamentId: this.currentTournamentId,
                attempt: attempts + 1, // ‚ö° –¢–µ–ø–µ—Ä—å attempts —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–µ Promise
                maxAttempts: 3,
                playerAddress: this.walletConnector.account
            };
            
            Logger.log('üìä Tournament data prepared:', tournamentData);

            localStorage.setItem('tournamentMode', JSON.stringify(tournamentData));

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã
            Logger.log('üéÆ Opening tournament game in modal window...');
            if (window.tournamentUI && typeof window.tournamentUI.openGame === 'function') {
                Logger.log('‚úÖ Using tournamentUI.openGame modal');
                window.tournamentUI.openGame();
            } else {
                Logger.log('‚ùå tournamentUI.openGame not available - trying fallback');
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
                Logger.log('üîß Using basic game modal fallback...');
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ - –æ–Ω–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ
                this.createBasicGameModal();
            }

        } catch (error) {
            Logger.error('‚ùå Error starting tournament game:', error);
            this.showError('Failed to start game: ' + error.message);
        }
    }

async submitGameScore(score, playerName = null) {
    try {
        Logger.log(`üìä Submitting score ONLY to blockchain: ${score}`);

        if (!this.walletConnector || !this.walletConnector.connected) {
            throw new Error('Wallet not connected');
        }

        if (typeof score !== 'number' || score < 0 || score > 9999999) {
            throw new Error('Invalid score');
        }

        // ‚ö° –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –ò–ì–†–û–ö–ê –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏
        try {
            const currentPlayerInfo = await window.tournamentManager.getPlayerScore(
                this.currentTournamentId,
                this.walletConnector.account
            );
            
            const currentScore = currentPlayerInfo ? currentPlayerInfo.score || 0 : 0;
            const blockchainAttempts = currentPlayerInfo ? currentPlayerInfo.attempts || 0 : 0;
            
            // ‚ö° –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ (–±–ª–æ–∫—á–µ–π–Ω + –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            const currentAttempts = await this.getUserAttempts();
            
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
            if (currentAttempts >= 3) {
                throw new Error(`You have already used all 3 attempts (${currentAttempts}/3). Score submission is not possible.`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—á–µ—Ç–∞
            if (currentScore > 0 && score <= currentScore) {
                Logger.warn('‚ö†Ô∏è Score not improved - counting attempt locally without blockchain submission');
                
                // ‚ö° –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                
                // ‚ö° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞—Å—á–µ—Ç–µ –ø–æ–ø—ã—Ç–∫–∏
                this.showSuccess(`‚úÖ Attempt ${currentAttempts}/3 counted! New score ${score} is not better than current ${currentScore}.`);
                
                // ‚ö° –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–¥–µ—Å—å - —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ handleGameOver()
                Logger.log(`üìä Attempt already counted in handleGameOver: ${currentAttempts}/3`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
                try {
                    if (typeof this.updateButtonStates === 'function') {
                        await this.updateButtonStates();
                    }
                    await this.updateUserStatusDisplay();
                } catch (updateError) {
                    Logger.warn('‚ö†Ô∏è Error updating UI after local attempt count:', updateError);
                }
                
                Logger.log('‚úÖ Local attempt counting complete - no blockchain submission needed');
                return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω
                
            } else if (score > currentScore) {
                Logger.log(`‚úÖ Score improved: ${currentScore} ‚Üí ${score}, submitting to blockchain`);
            }
            
        } catch (checkError) {
            Logger.error('‚ùå Error checking current score:', checkError.message);
            
            // ‚ö° –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É - –ø—É—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–µ—à–∞–µ—Ç
            // if (checkError.message.includes('—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ')) {
            //     this.showError(checkError.message);
            //     return;
            // }
            
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            }

        this.showLoading('Submitting score to blockchain...');
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π Discord username –∏–ª–∏ fallback)
        const customPlayerName = this.getPlayerName();
        const finalPlayerName = playerName || customPlayerName || this.getDefaultPlayerName();

        // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
        this.requireBlockchainConnection('Score Submission');
        const txHash = await window.tournamentManager.submitTournamentScore(
            this.currentTournamentId,
            score,
            finalPlayerName
        );

        this.hideLoading();
        this.showSuccess(`Score ${score} submitted to blockchain! TX: ${txHash.slice(0, 8)}...`);

        // ‚ö° –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
        try {
            const updatedPlayerInfo = await window.tournamentManager.getPlayerScore(
                this.currentTournamentId,
                this.walletConnector.account
            );
            const newBlockchainAttempts = updatedPlayerInfo ? updatedPlayerInfo.attempts || 0 : 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
            if (newBlockchainAttempts > this.playerAttempts) {
                this.playerAttempts = newBlockchainAttempts;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
                const attemptKey = `tournament_${this.currentTournamentId}_attempts_${this.walletConnector.account}`;
                localStorage.setItem(attemptKey, this.playerAttempts.toString());
            }
            
        } catch (syncError) {
            Logger.warn('‚ö†Ô∏è Could not sync attempts after blockchain submission:', syncError.message);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
        if (typeof this.updateLeaderboard === 'function') {
            await this.updateLeaderboard();
        }
        if (typeof this.updateButtonStates === 'function') {
            await this.updateButtonStates();
        }
        await this.updateUserStatusDisplay();
        
        // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
        if (window.tournamentUI && typeof window.tournamentUI.updateAttemptIndicators === 'function') {
            const latestAttempts = await this.getUserAttempts();
            window.tournamentUI.updateAttemptIndicators(latestAttempts);
        }
        

    } catch (error) {
        this.hideLoading();
        Logger.error('‚ùå Blockchain score submission failed:', error);
        
        // ‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        if (error.message.includes('SCORE NOT IMPROVED') || 
            error.message.includes('Score must be higher than current score')) {
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –Ω–æ —Å—á–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
            this.showSuccess('‚úÖ Attempt counted! But score not improved - leaderboard remains unchanged.');
            
        } else if (error.message.includes('Maximum attempts reached') || 
                   error.message.includes('ATTEMPTS LIMIT')) {
            
            // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
            this.showError('‚ùå You have already used all 3 attempts!');
            
        } else {
            // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–∞
            this.showError('üö´ Blockchain submission error: ' + error.message);
        }
        
        // ‚ö° –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI (–ø–æ–ø—ã—Ç–∫–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –∑–∞—Å—á–∏—Ç–∞–Ω–∞)
        try {
            if (typeof this.updateButtonStates === 'function') {
                await this.updateButtonStates();
            }
            await this.updateUserStatusDisplay();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            if (typeof this.updateLeaderboard === 'function') {
                this.createSafeTimeout(() => this.updateLeaderboard(), 1000);
            }
        } catch (updateError) {
            Logger.warn('‚ö†Ô∏è Error updating UI after failed submission:', updateError);
        }
    }
}

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–∞–∑–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–≥—Ä—ã –∫–∞–∫ fallback
    createBasicGameModal() {
        Logger.log('üõ†Ô∏è Creating basic game modal as fallback...');
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById('tournamentGameModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = 'tournamentGameModal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            display: flex;
            justify-content: center;
            align-items: center;
        `;
        
        modal.innerHTML = `
            <div style="
                background: linear-gradient(135deg, #001122, #003366);
                padding: 30px;
                border-radius: 20px;
                border: 3px solid #00ddff;
                box-shadow: 0 0 40px rgba(0, 221, 255, 0.6);
                text-align: center;
                color: #00ddff;
            ">
                <h2 style="margin-bottom: 20px;">üéÆ Tournament Game</h2>
                <canvas id="tournamentGameCanvas" width="800" height="600" style="
                    border: 2px solid #00ddff;
                    border-radius: 10px;
                    background: linear-gradient(135deg, #001122, #002244);
                "></canvas>
                <div style="margin-top: 20px;">
                    <button onclick="
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ
                        Logger.log('üõë Stopping game and closing modal...');
                        
                        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                        if (typeof window.stopGame === 'function') window.stopGame();
                        
                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã
                        window.gameRunning = false;
                        window.gameActive = false;
                        window.gamePaused = true;
                        
                        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–µ—Ä—ã
                        if (window.gameInterval) { clearInterval(window.gameInterval); window.gameInterval = null; }
                        if (window.gameLoopId) { cancelAnimationFrame(window.gameLoopId); window.gameLoopId = null; }
                        if (window.bossSystemInterval) { clearInterval(window.bossSystemInterval); window.bossSystemInterval = null; }
                        if (window.animationId) { cancelAnimationFrame(window.animationId); window.animationId = null; }
                        
                        // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã
                        if (window.invaders) window.invaders.length = 0;
                        if (window.bullets) window.bullets.length = 0;
                        if (window.enemyBullets) window.enemyBullets.length = 0;
                        if (window.currentBoss) window.currentBoss = null;
                        
                        // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ canvas —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
                        const extraCanvases = document.querySelectorAll('canvas:not(#tournamentGameCanvas)');
                        extraCanvases.forEach(canvas => {
                            if (canvas.id === 'gameCanvas' || canvas.parentElement === document.body) {
                                Logger.log('üßπ Removing extra canvas:', canvas.id);
                                canvas.remove();
                            }
                        });
                        
                        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                        window.canvas = null;
                        window.ctx = null;
                        
                        Logger.log('üéÆ Game stopped and modal closed');
                        this.parentElement.parentElement.parentElement.remove();
                    " style="
                        background: #ff4444;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        cursor: pointer;
                        margin-right: 10px;
                    ">Close Game</button>
                    <span style="color: #66ccff; font-size: 14px;">Use ‚Üê ‚Üí and SPACE to play</span>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º canvas
        Logger.log('üöÄ Starting tournament game in modal...');
        
        // –ñ–¥–µ–º –ø–æ–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ DOM
        this.createSafeTimeout(() => {
            const tournamentCanvas = document.getElementById('tournamentGameCanvas');
            if (!tournamentCanvas) {
                Logger.error('‚ùå Tournament canvas not found');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º canvas –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            window.canvas = tournamentCanvas;
            window.ctx = tournamentCanvas.getContext('2d');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Ä–µ–∂–∏–º
            const tournamentData = {
                tournamentId: this.currentTournamentId,
                attempt: this.getUserAttempts() + 1,
                maxAttempts: 3,
                playerAddress: this.walletConnector.account
            };
            
            localStorage.setItem('tournamentMode', JSON.stringify(tournamentData));
            Logger.log('üèÜ Tournament mode activated:', tournamentData);
            Logger.log('‚úÖ Tournament canvas set as active:', tournamentCanvas);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º initCanvas - –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π canvas
            // –ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π window.canvas –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            
            if (typeof window.actuallyStartGame === 'function') {
                Logger.log('üéÆ Starting game directly on tournament canvas...');
                window.actuallyStartGame();
            } else if (typeof window.startGame === 'function') {
                Logger.log('üéÆ Starting game (fallback) on tournament canvas...');
                window.startGame();
            } else {
                Logger.error('‚ùå No game start function found');
                Logger.error('‚ùå Game functions not found - check game.js loading');
            }
        }, 100);
    }
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ  
    updatePlayerInLeaderboard(walletAddress, newBestScore, playerName, attempts, allScores) {
    if (!this.leaderboard) return;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        const leaderboard = this.leaderboard.getStoredLeaderboard();

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞
        const playerIndex = leaderboard.findIndex(entry =>
            entry.player.toLowerCase() === walletAddress.toLowerCase()
        );

        if (playerIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            leaderboard[playerIndex].bestScore = newBestScore;
            leaderboard[playerIndex].scores = [...allScores]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            leaderboard[playerIndex].attempts = attempts;
            leaderboard[playerIndex].timestamp = Date.now();
            if (playerName) {
                leaderboard[playerIndex].playerName = playerName;
            }

            // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ –ª—É—á—à–µ–º—É —Å—á–µ—Ç—É
            leaderboard.sort((a, b) => b.bestScore - a.bestScore);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            this.leaderboard.saveLeaderboard(leaderboard);

            Logger.log(`‚úÖ Player ${walletAddress} updated in leaderboard with best score: ${newBestScore}`);
        }
    } catch (error) {
        Logger.error('Error updating player in leaderboard:', error);
    }
}

    // ========== –ü–†–ê–ô–ó –ü–£–õ ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π–∑ –ø—É–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    async updateTournamentPrizePool() {
        try {
            if (!this.currentTournamentId || !window.tournamentManager) {
                Logger.log('üîç Prize pool update skipped - missing tournament ID or manager');
                return;
            }

            Logger.log(`üîç Getting tournament info for ID: ${this.currentTournamentId}`);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ —Å –±–ª–æ–∫—á–µ–π–Ω–∞
            Logger.log('üîç Requesting tournament info for ID:', this.currentTournamentId);
            const tournamentInfo = await window.tournamentManager.getTournamentInfo(this.currentTournamentId);
            
            Logger.log('üîç Tournament info received:', {
                ...tournamentInfo,
                isActive: tournamentInfo?.isActive,
                isFinished: tournamentInfo?.isFinished,
                startTime: tournamentInfo?.startTime,
                endTime: tournamentInfo?.endTime,
                currentTime: Math.floor(Date.now() / 1000)
            });
            
            if (tournamentInfo) {
                Logger.log(`üîç Prize pool value: ${tournamentInfo.prizePool} wei (type: ${typeof tournamentInfo.prizePool})`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if (tournamentInfo.isFinished) {
                    this.updateTournamentStatus('ENDED');
                } else if (tournamentInfo.isActive) {
                    this.updateTournamentStatus('ACTIVE');
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
                    this.startTournamentTimer();
                } else {
                    this.updateTournamentStatus('NOT_STARTED');
                }
                
                if (tournamentInfo.prizePool && tournamentInfo.prizePool !== '0') {
                    Logger.log(`üí∞ Updating prize pool: ${tournamentInfo.prizePool} wei`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ tournamentUI
                    if (window.tournamentUI && typeof window.tournamentUI.updatePrizePool === 'function') {
                        window.tournamentUI.updatePrizePool(tournamentInfo.prizePool);
                    } else {
                        Logger.log('‚ùå tournamentUI.updatePrizePool not available');
                    }
                } else {
                    Logger.log('üí∞ Prize pool is 0 or empty, not updating UI');
                }
            } else {
                Logger.log('‚ùå No tournament info received');
            }

        } catch (error) {
            Logger.error('‚ùå Failed to update tournament prize pool:', error);
        }
    }

    // ========== –õ–ò–î–ï–†–ë–û–†–î ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async updateLeaderboard() {
        try {
            let leaderboard = [];
            let isBlockchainData = false;

            // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            if (!window.tournamentManager) {
                Logger.warn('üö´ TournamentManager not available - using local data only');
                leaderboard = this.leaderboard?.getStoredLeaderboard() || [];
            } else {
                try {
                    Logger.log('üîó Fetching tournament leaderboard from blockchain...');
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
                    const topPlayers = await window.tournamentManager.getTopPlayers(this.currentTournamentId, 100);
                    Logger.log(`üèÜ Top 100 players: ${topPlayers?.length || 0} loaded`);
                    
                    if (topPlayers && topPlayers.length > 0) {
                        leaderboard = topPlayers;
                        isBlockchainData = true;
                    } else {
                        Logger.log('üìä No blockchain leaderboard data - using local fallback');
                        leaderboard = this.leaderboard?.getStoredLeaderboard() || [];
                    }
                    
                    Logger.log(`‚úÖ Leaderboard loaded: ${leaderboard.length} entries`);
                    Logger.log('üîç DEBUG: First few entries:', JSON.stringify(leaderboard.slice(0, 3), null, 2));
                } catch (blockchainError) {
                    Logger.error('‚ùå Failed to fetch blockchain leaderboard:', blockchainError);
                    leaderboard = this.leaderboard?.getStoredLeaderboard() || [];
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
            if (leaderboard && leaderboard.length > 0) {
                leaderboard.sort((a, b) => (b.score || 0) - (a.score || 0));
            }

            // üé® –û–±–Ω–æ–≤–ª—è–µ–º UI
            if (window.tournamentUI && typeof window.tournamentUI.updateLeaderboard === 'function') {
                window.tournamentUI.updateLeaderboard(leaderboard);
            }

            const dataSource = isBlockchainData ? 'blockchain' : 'empty';
            Logger.log(`üìä Leaderboard updated from ${dataSource}: ${leaderboard.length} entries`);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–ø-3
            if (leaderboard.length > 0) {
                Logger.log('üèÜ Current top 3:', leaderboard.slice(0, 3).map((entry, i) => 
                    `${i+1}. ${entry.playerName || 'Unknown'}: ${entry.score || 0}`
                ));
            }

        } catch (error) {
            Logger.error('‚ùå Error updating leaderboard:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if (window.tournamentUI && typeof window.tournamentUI.updateLeaderboard === 'function') {
                window.tournamentUI.updateLeaderboard([]);
            }
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    getStoredLeaderboard() {
        if (this.leaderboard) {
            return this.leaderboard.getLeaderboard();
        } else if (this.storage) {
            return this.storage.getLeaderboard();
        }
        return [];
    }

    // ========== –°–û–°–¢–û–Ø–ù–ò–ï –ö–ù–û–ü–û–ö ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
async updateButtonStates() {
    const registerButton = document.getElementById('registerButton');
    const playButton = document.getElementById('playButton');

    if (!registerButton || !playButton) {
        Logger.log('‚ùå Button elements not found');
        return;
    }

    const walletConnected = this.walletConnector && this.walletConnector.connected;
    const tournamentStarted = this.currentTournamentStatus === 'ACTIVE';
    const isRegistered = this.currentUserStatus === 'registered';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω
    let allAttemptsUsed = false;
    if (walletConnected) {
        try {
            const attempts = await this.getUserAttempts();
            allAttemptsUsed = attempts >= 3;
            Logger.log(`üéØ Player attempts from blockchain: ${attempts}/3, All used: ${allAttemptsUsed}`);
        } catch (error) {
            Logger.log('üéØ Cannot get attempts from blockchain:', error);
            allAttemptsUsed = false;
        }
    }

    // Logger.log(`üîÑ Button update: wallet=${walletConnected}, tournament=${tournamentStarted}, registered=${isRegistered}, attempts=${allAttemptsUsed}`); // Removed: too verbose

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    if (allAttemptsUsed) {
        registerButton.textContent = 'All Attempts Completed';
        registerButton.disabled = true;
        registerButton.className = 'action-button no-attempts';
        Logger.log('üîí Set button to: All Attempts Completed (disabled)');
    } else if (isRegistered) {
        registerButton.textContent = 'Registered';
        registerButton.disabled = true;
        registerButton.className = 'action-button';
        Logger.log('‚úÖ Set button to: Registered (disabled)');
    } else if (!tournamentStarted) {
        registerButton.textContent = 'Tournament Not Started';
        registerButton.disabled = true;
        registerButton.className = 'action-button';
        Logger.log('‚è∏Ô∏è Set button to: Tournament Not Started (disabled)');
    } else if (!walletConnected && tournamentStarted) {
        registerButton.textContent = 'Connect Wallet to Register';
        registerButton.disabled = false;
        registerButton.className = 'action-button';
        Logger.log('üîó Set button to: Connect Wallet to Register (enabled)');
    } else if (walletConnected && tournamentStarted) {
        registerButton.textContent = 'Register for Tournament';
        registerButton.disabled = false;
        registerButton.className = 'action-button';
        Logger.log('üéØ Set button to: Register for Tournament (enabled)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Discord username
    const hasDiscordUsername = this.hasDiscordUsername();

    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
    let playButtonDisabled = true;
    let playButtonText = 'üéÆ Play Game';

    if (allAttemptsUsed) {
        playButtonDisabled = true;
        playButtonText = 'üö´ No attempts left';
    } else if (!hasDiscordUsername && isRegistered) {
        playButtonDisabled = true;
        playButtonText = 'üí¨ Discord username required';
    } else if (isRegistered && walletConnected && tournamentStarted) {
        playButtonDisabled = false;
        playButtonText = 'üéÆ Play Game';
    }

    playButton.disabled = playButtonDisabled;
    playButton.textContent = playButtonText;
    playButton.className = playButtonDisabled ? 'action-button no-attempts' : 'action-button tournament-play';

    // Logger.log(`üéØ Buttons set: Register="${registerButton.textContent}" Play="${playButton.textContent}"`); // Removed: too verbose
}
    // ========== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ==========

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    isAdmin() {
        if (!this.walletConnector || !this.walletConnector.connected) {
            Logger.log('üîß Admin check: wallet not connected');
            return false;
        }

        if (!window.TOURNAMENT_CONFIG) {
            Logger.log('üîß Admin check: config not available');
            return false;
        }

        const isAdmin = window.TOURNAMENT_CONFIG.isAdmin(this.walletConnector.account);
        Logger.log(`üîß Admin check: ${this.walletConnector.account} -> ${isAdmin ? 'ADMIN' : 'USER'}`);

        return isAdmin;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    updateAdminPanel() {
        const adminPanel = document.getElementById('adminPanel');
        if (!adminPanel) {
            Logger.warn('‚ö†Ô∏è Admin panel element not found');
            return;
        }

        const isAdmin = this.isAdmin();
        Logger.log('üîß Admin check:', {
            isAdmin,
            walletConnected: !!(this.walletConnector && this.walletConnector.connected),
            walletAccount: this.walletConnector?.account,
            configAvailable: !!window.TOURNAMENT_CONFIG
        });

        if (isAdmin) {
            adminPanel.style.display = 'block';
            adminPanel.classList.add('show');
            Logger.log('‚úÖ Admin panel shown');
        } else {
            adminPanel.classList.remove('show');
            // –°–∫—Ä—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.createSafeTimeout(() => {
                if (!adminPanel.classList.contains('show')) {
                    adminPanel.style.display = 'none';
                }
            }, 400); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            Logger.log('üë§ Admin panel hidden (not admin)');
        }

        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ tournamentUI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.tournamentUI && typeof window.tournamentUI.showAdminPanel === 'function') {
            window.tournamentUI.showAdminPanel(isAdmin);
        }
    }

    // –ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–∞ (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è) - –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù
    async handleStartTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Starting tournament ONLY on blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Tournament Start');

            Logger.log('üîó Starting tournament ONLY via blockchain...');
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
            const entryFeeEth = TOURNAMENT_CONFIG.ENTRY_FEE || '0.005';
            const durationSeconds = TOURNAMENT_CONFIG.TOURNAMENT_DURATION || 600; // 10 –º–∏–Ω—É—Ç
            
            Logger.log('üìã Tournament start parameters:', {
                tournamentId: this.currentTournamentId,
                entryFeeEth: entryFeeEth,
                durationSeconds: durationSeconds,
                adminAddress: this.walletConnector.account
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            try {
                const existingTournamentInfo = await window.tournamentManager.getTournamentInfo(this.currentTournamentId);
                Logger.log('üîç Existing tournament info:', existingTournamentInfo);
                
                if (existingTournamentInfo && existingTournamentInfo.status !== 'NOT_STARTED') {
                    throw new Error(`Tournament ${this.currentTournamentId} already exists with status: ${existingTournamentInfo.status}`);
                }
            } catch (checkError) {
                Logger.log('üîç Tournament check error (may be normal if tournament doesn\'t exist):', checkError.message);
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            const result = await window.tournamentManager.startTournament(
                null, // null –æ–∑–Ω–∞—á–∞–µ—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID
                entryFeeEth,
                durationSeconds
            );
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
            const txHash = typeof result === 'string' ? result : result.transactionHash;
            const newTournamentId = typeof result === 'object' ? result.tournamentId : null;
            
            Logger.log('‚úÖ Blockchain tournament start successful:', txHash);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π ID —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π
            if (newTournamentId) {
                Logger.log(`üîÑ Updated tournament ID: ${this.currentTournamentId} ‚Üí ${newTournamentId}`);
                this.currentTournamentId = newTournamentId;
            }

            this.hideLoading();
            this.showSuccess(`Tournament #${this.currentTournamentId} started on blockchain! TX: ${txHash.slice(0, 8)}...`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            this.currentTournamentStatus = 'ACTIVE';
            this.updateTournamentStatus('ACTIVE');

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            this.updateData();

        } catch (error) {
            this.hideLoading();
            Logger.error('‚ùå Blockchain tournament start failed:', error);
            this.showError('üö´ Failed to start tournament on blockchain: ' + error.message + '\n\nTournament works ONLY with blockchain - no local modes available.');
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ UI
    async clearTournamentData() {
        try {
            Logger.log('üßπ Clearing only local UI data - blockchain data managed by smart contracts...');

            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ localStorage UI –¥–∞–Ω–Ω—ã–µ
            localStorage.removeItem('tournamentMode');

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI —Å—Ç–∞—Ç—É—Å
            if (this.walletConnector && this.walletConnector.connected) {
                Logger.log('üîÑ Resetting UI status to connected');
                this.currentUserStatus = 'connected';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await this.updateUserStatusDisplay();
                await this.updateButtonStates();
            } else {
                this.currentUserStatus = 'disconnected';
            }

            Logger.log('‚úÖ Local UI data cleared - blockchain data intact');

        } catch (error) {
            Logger.error('‚ùå Error clearing UI data:', error);
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è) - –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù
    async handleEndTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Ending tournament ONLY on blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Tournament End');

            Logger.log('üîó Ending tournament ONLY via blockchain...');
            
            const txHash = await window.tournamentManager.endTournament(this.currentTournamentId);
            Logger.log('‚úÖ Blockchain tournament end successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Tournament ended on blockchain! TX: ${txHash.slice(0, 8)}...`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            this.currentTournamentStatus = 'ENDED';
            this.updateTournamentStatus('ENDED');

        } catch (error) {
            this.hideLoading();
            Logger.error('‚ùå Blockchain tournament end failed:', error);
            this.showError('üö´ Failed to end tournament on blockchain: ' + error.message + '\n\nTournament works ONLY with blockchain - no local modes available.');
        }
    }

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–∑—ã (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è) - –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù
    async handleDistributePrizes() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Checking tournament status and distributing prizes...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Prize Distribution');

            // ‚ö° –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            const tournamentInfo = await window.tournamentManager.getTournamentInfo(this.currentTournamentId);
            Logger.log('üîç Tournament status before prize distribution:', tournamentInfo);
            
            if (!tournamentInfo.isFinished) {
                throw new Error(`Tournament ${this.currentTournamentId} is not finished yet. Please end the tournament first.`);
            }
            
            if (!tournamentInfo.prizePool || tournamentInfo.prizePool === 0) {
                throw new Error(`Tournament ${this.currentTournamentId} has no prize pool to distribute.`);
            }
            
            Logger.log(`üí∞ Tournament is ready for prize distribution. Prize pool: ${tournamentInfo.prizePool} wei`);
            
            const txHash = await window.tournamentManager.distributePrizes(this.currentTournamentId);

            this.hideLoading();
            this.showSuccess(`Prizes distributed on blockchain! TX: ${txHash.slice(0, 8)}...`);

        } catch (error) {
            this.hideLoading();
            Logger.error('‚ùå Blockchain prize distribution failed:', error);
            this.showError('üö´ Failed to distribute prizes: ' + error.message);
        }
    }

    // ========== –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========

    // –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    async handleAutoEndTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Auto-ending tournament on blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Tournament Auto-End');

            const txHash = await window.tournamentManager.autoEndTournament(this.currentTournamentId);
            Logger.log('‚úÖ Auto-end successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Tournament auto-ended on blockchain! TX: ${txHash.slice(0, 8)}...`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.currentTournamentStatus = 'ENDED';
            this.updateTournamentStatus('ENDED');

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to auto-end tournament: ' + error.message);
        }
    }

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    async handleEmergencyStopTournament() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        const confirmed = confirm('‚ö†Ô∏è Emergency stop will refund all participants. Are you sure?');
        if (!confirmed) return;

        try {
            this.showLoading('Emergency stopping tournament on blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Emergency Stop');

            const txHash = await window.tournamentManager.emergencyStopTournament(this.currentTournamentId);
            Logger.log('‚úÖ Emergency stop successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Tournament emergency stopped on blockchain! TX: ${txHash.slice(0, 8)}...`);

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await this.clearTournamentData();
            this.currentTournamentStatus = 'ENDED';
            this.updateTournamentStatus('ENDED');

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to emergency stop tournament: ' + error.message);
        }
    }

    // –í–∫–ª—é—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã
    async handleEnableRefunds() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        try {
            this.showLoading('Enabling refunds on blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Enable Refunds');

            const txHash = await window.tournamentManager.enableRefunds(this.currentTournamentId);
            Logger.log('‚úÖ Enable refunds successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Refunds enabled on blockchain! TX: ${txHash.slice(0, 8)}...`);

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to enable refunds: ' + error.message);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
    async handleClaimRefund() {
        if (!this.walletConnector || !this.walletConnector.connected) {
            this.showError('Please connect your wallet first');
            return;
        }

        try {
            this.showLoading('Claiming refund from blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Claim Refund');

            const txHash = await window.tournamentManager.claimRefund(this.currentTournamentId);
            Logger.log('‚úÖ Refund claim successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Refund claimed from blockchain! TX: ${txHash.slice(0, 8)}...`);

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to claim refund: ' + error.message);
        }
    }

    // –í—ã–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    async handleWithdrawFees() {
        if (!this.isAdmin()) {
            this.showError('Admin access required');
            return;
        }

        const confirmed = confirm('üí∞ Withdraw all accumulated fees?');
        if (!confirmed) return;

        try {
            this.showLoading('Withdrawing fees from blockchain...');

            // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
            this.requireBlockchainConnection('Withdraw Fees');

            const txHash = await window.tournamentManager.withdrawFees();
            Logger.log('‚úÖ Withdraw fees successful:', txHash);

            this.hideLoading();
            this.showSuccess(`Fees withdrawn from blockchain! TX: ${txHash.slice(0, 8)}...`);

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to withdraw fees: ' + error.message);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ - –¢–û–õ–¨–ö–û –ë–õ–û–ö–ß–ï–ô–ù
    async getContractInfo() {
        // ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê
        this.requireBlockchainConnection('Contract Info');

        try {
            this.showLoading('Loading contract info...');

            const balance = await window.tournamentManager.getContractBalance();
            const counter = await window.tournamentManager.getTournamentCounter();
            const prizeDistribution = await window.tournamentManager.getPrizeDistribution(this.currentTournamentId);
            
            this.hideLoading();

            const info = {
                contractBalance: balance,
                tournamentCounter: counter,
                currentTournamentPrizes: prizeDistribution
            };

            Logger.log('üìä Contract Info:', info);
            alert(`üìä Contract Info:\n\nBalance: ${balance} PHRS\nTournament Counter: ${counter}\n\nCurrent Tournament Prizes:\n1st: ${prizeDistribution.first} PHRS\n2nd: ${prizeDistribution.second} PHRS\n3rd: ${prizeDistribution.third} PHRS\nOwner Fee: ${prizeDistribution.ownerFee} PHRS`);

            return info;

        } catch (error) {
            this.hideLoading();
            this.showError('Failed to get contract info: ' + error.message);
        }
    }

    // ========== –°–¢–ê–¢–£–° –¢–£–†–ù–ò–†–ê ==========

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    updateTournamentStatus(status) {
        this.currentTournamentStatus = status;

        if (window.tournamentUI) {
            window.tournamentUI.updateTournamentStatus(status, 0, this.currentTournamentId);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        if (this.storage) {
            this.storage.saveTournamentStatus(status);
        }
    }

    // ========== –£–¢–ò–õ–ò–¢–´ ==========

    // –ó–∞–¥–µ—Ä–∂–∫–∞
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    showLoading(message) {
        if (window.tournamentUI) {
            window.tournamentUI.showLoading(message);
        }
    }

    // –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    hideLoading() {
        if (window.tournamentUI) {
            window.tournamentUI.hideLoading();
        }
    }

showError(message) {
    Logger.error('‚ùå Error:', message);

    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ff4444;
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(255, 68, 68, 0.3);
        z-index: 10000;
        font-weight: bold;
        max-width: 300px;
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    tournamentLobby.createSafeTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

showWarning(message) {
    Logger.warn('‚ö†Ô∏è Warning:', message);

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º —Ü–≤–µ—Ç–æ–º
    const notification = document.createElement('div');
    notification.className = 'warning-notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ffaa00;
        color: #001122;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(255, 170, 0, 0.3);
        z-index: 10000;
        font-weight: bold;
        max-width: 300px;
        border-left: 4px solid #ff8800;
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
    tournamentLobby.createSafeTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 6000);
}

showSuccess(message) {
    Logger.log('‚úÖ Success:', message);

    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #00ff88;
        color: #001122;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 255, 136, 0.3);
        z-index: 10000;
        font-weight: bold;
        max-width: 300px;
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    tournamentLobby.createSafeTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 4000);
}

    // ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    healthCheck() {
        const status = {
            walletConnected: this.walletConnector && this.walletConnector.connected,
            storageReady: this.storage !== null,
            leaderboardReady: this.leaderboard !== null,
            tournamentManagerReady: typeof window.tournamentManager !== 'undefined',
            tournamentUIReady: typeof window.tournamentUI !== 'undefined',
            tournamentConfigReady: typeof window.TOURNAMENT_CONFIG !== 'undefined',
            currentUserStatus: this.currentUserStatus,
            currentTournamentStatus: this.currentTournamentStatus
        };

        Logger.log('üè• Health Check:', status);
        return status;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏
    getState() {
        return {
            currentTournamentId: this.currentTournamentId,
            currentTournamentStatus: this.currentTournamentStatus,
            currentUserStatus: this.currentUserStatus,
            isRegistering: this.isRegistering,
            userAttempts: this.getUserAttempts(),
            isAdmin: this.isAdmin(),
            walletConnected: this.walletConnector && this.walletConnector.connected,
            walletAddress: this.walletConnector && this.walletConnector.account,
            dependencies: {
                storage: this.storage !== null,
                leaderboard: this.leaderboard !== null
            }
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    getPlayerStats(playerAddress) {
        if (!playerAddress || !this.storage) return null;

        const gameData = this.storage.getPlayerGameData(playerAddress);
        const attempts = this.storage.getPlayerAttempts(playerAddress);

        return {
            playerAddress,
            attempts,
            totalGames: gameData.totalGames || 0,
            bestScore: gameData.bestScore || 0,
            averageScore: gameData.averageScore || 0,
            scores: gameData.scores || []
        };
    }

    // ========== –û–ß–ò–°–¢–ö–ê ==========

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }

        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        this.stopTournamentTimer();

        Logger.log('üßπ Tournament Lobby cleanup completed');
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    startTournamentTimer() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopTournamentTimer();

        this.timerInterval = setInterval(async () => {
            try {
                if (this.currentTournamentStatus === 'ACTIVE' && window.tournamentManager) {
                    const tournamentInfo = await window.tournamentManager.getTournamentInfo(this.currentTournamentId);
                    
                    Logger.debug('‚è∞ Timer update - tournament info:', {
                        isActive: tournamentInfo?.isActive,
                        isFinished: tournamentInfo?.isFinished,
                        isStarted: tournamentInfo?.isStarted,
                        endTime: tournamentInfo?.endTime
                    });
                    
                    if (tournamentInfo && tournamentInfo.isActive && !tournamentInfo.isFinished) {
                        const currentTime = Math.floor(Date.now() / 1000);
                        const timeRemaining = Math.max(0, tournamentInfo.endTime - currentTime);
                        
                        Logger.debug('‚è∞ Time remaining:', timeRemaining);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞
                        const timerSection = document.getElementById('tournamentTimerSection');
                        if (timerSection) {
                            timerSection.style.display = 'block';
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
                        if (window.tournamentUI && typeof window.tournamentUI.updateTimer === 'function') {
                            window.tournamentUI.updateTimer(timeRemaining);
                        }

                        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                        if (timeRemaining === 0 && this.currentTournamentStatus === 'ACTIVE') {
                            Logger.log('‚è∞ Tournament time expired - checking status...');
                            this.currentTournamentStatus = 'TIME_EXPIRED';
                            this.updateTournamentStatus('TIME_EXPIRED');
                        }
                    }
                }
            } catch (error) {
                Logger.warn('‚ö†Ô∏è Timer update failed:', error.message);
            }
        }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        Logger.log('‚è∞ Tournament timer started');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    stopTournamentTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
            Logger.log('‚è∞ Tournament timer stopped');
        }
    }

    // ========== –ò–ú–ï–ù–ò –ò–ì–†–û–ö–ê ==========

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    showPlayerNameSection() {
        const playerNameSection = document.getElementById('playerNameSection');
        if (playerNameSection) {
            playerNameSection.style.display = 'block';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
            const savedName = this.getPlayerName();
            const playerNameInput = document.getElementById('playerNameInput');
            if (playerNameInput && savedName && savedName !== this.getDefaultPlayerName()) {
                playerNameInput.value = savedName;
            }
        }
    }

    // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    hidePlayerNameSection() {
        const playerNameSection = document.getElementById('playerNameSection');
        if (playerNameSection) {
            playerNameSection.style.display = 'none';
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ Discord username)
    getPlayerName() {
        if (!this.walletConnector || !this.walletConnector.account) {
            return null;
        }

        const storageKey = `tournament_player_name_${this.walletConnector.account}`;
        const customName = localStorage.getItem(storageKey);
        
        if (customName && customName.trim()) {
            return customName.trim();
        }
        
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ Discord username –Ω–µ –∑–∞–¥–∞–Ω
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–¥–∞–Ω –ª–∏ Discord username
    hasDiscordUsername() {
        const playerName = this.getPlayerName();
        return playerName !== null && playerName.length > 0;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultPlayerName() {
        if (!this.walletConnector || !this.walletConnector.account) {
            return 'Anonymous';
        }
        return `Player${this.walletConnector.account.slice(-4)}`;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    handleSavePlayerName() {
        const playerNameInput = document.getElementById('playerNameInput');
        if (!playerNameInput || !this.walletConnector || !this.walletConnector.account) {
            return;
        }

        const customName = playerNameInput.value.trim();
        const storageKey = `tournament_player_name_${this.walletConnector.account}`;

        // ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Discord username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω
        if (!customName) {
            this.showError('Discord username is required to play in tournament');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è Discord username
        if (customName.length < 2) {
            this.showError('Discord username too short (min 2 characters)');
            return;
        }

        if (customName.length > 32) {
            this.showError('Discord username too long (max 32 characters)');
            return;
        }

        // Discord usernames –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if (!/^[a-zA-Z0-9._]+$/.test(customName)) {
            this.showError('Discord username can only contain letters, numbers, dots and underscores');
            return;
        }

        localStorage.setItem(storageKey, customName);
        this.showSuccess(`Discord username saved: "${customName}"`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        this.updateButtonStates();

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.createSafeTimeout(() => this.hidePlayerNameSection(), 2000);
    }

    // ========== –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–î–ï–†–ë–û–†–î–ê ==========
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    startLeaderboardAutoUpdate() {
        // –û—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.timers.leaderboardUpdate) {
            clearInterval(this.timers.leaderboardUpdate);
        }
        
        Logger.log('üèÜ Starting leaderboard auto-update (every 60 seconds)');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.updateLeaderboard().catch(error => {
            Logger.warn('‚ö†Ô∏è Initial leaderboard update failed:', error.message);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.timers.leaderboardUpdate = setInterval(() => {
            Logger.log('üîÑ Auto-updating leaderboard...');
            this.updateLeaderboard().catch(error => {
                Logger.warn('‚ö†Ô∏è Auto leaderboard update failed:', error.message);
            });
        }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    stopLeaderboardAutoUpdate() {
        if (this.timers.leaderboardUpdate) {
            clearInterval(this.timers.leaderboardUpdate);
            this.timers.leaderboardUpdate = null;
            Logger.log('üõë Leaderboard auto-update stopped');
        }
    }
}

// ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
window.handleRegisterForTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleRegisterForTournament();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

// –ò–≥—Ä–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
window.handlePlayTournamentGame = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handlePlayTournamentGame();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.handleStartTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleStartTournament();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

window.handleEndTournament = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleEndTournament();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

window.handleDistributePrizes = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleDistributePrizes();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
window.handleSavePlayerName = function() {
    if (window.tournamentLobby) {
        window.tournamentLobby.handleSavePlayerName();
    } else {
        Logger.log('‚ùå Tournament lobby not ready');
    }
};

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.tournamentLobby = new TournamentLobby();

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeTournamentLobby() {
    Logger.log('üöÄ Tournament Lobby initializing...');
    Logger.log('üîç window.tournamentLobby:', typeof window.tournamentLobby);
    Logger.log('üîç Document ready state:', document.readyState);

    try {
        Logger.log('üîç Calling init()...');
        await window.tournamentLobby.init();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        window.tournamentLobby.createSafeTimeout(() => {
            const health = window.tournamentLobby.healthCheck();
            if (health.walletConnected && health.tournamentManagerReady) {
                Logger.log('üíö All systems operational');
            } else {
                Logger.log('üí° System ready for wallet connection');
            }
        }, 2000);

    } catch (error) {
        Logger.error('‚ùå Failed to initialize tournament lobby:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTournamentLobby);
} else {
    // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    setTimeout(initializeTournamentLobby, 100);
}

// ========== DEBUG –§–£–ù–ö–¶–ò–ò ==========

// Debug —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)
window.debugTournamentLobby = {
    getState: () => window.tournamentLobby.getState(),
    healthCheck: () => window.tournamentLobby.healthCheck(),
    forceUpdate: () => window.tournamentLobby.updateData(),

    // Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mockConnect: () => {
        Logger.log('üß™ Mock connect - setting status to "connected"');
        window.tournamentLobby.updateUserStatus('connected');
    },

    mockRegister: () => {
        Logger.log('üß™ Mock register - setting status to "registered"');
        window.tournamentLobby.updateUserStatus('registered');
    },

    mockDisconnect: () => {
        Logger.log('üß™ Mock disconnect - setting status to "disconnected"');
        window.tournamentLobby.updateUserStatus('disconnected');
    },

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä
    addTestScore: (score, playerName) => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            Logger.log('‚ùå Wallet not connected for test score');
            return;
        }
        Logger.log(`üß™ Adding test score: ${score} for ${playerName || 'current player'}`);
        window.tournamentLobby.submitGameScore(score, playerName);
    },

    addMultipleTestScores: () => {
        Logger.log('üß™ Adding multiple test scores...');
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            Logger.log('‚ùå Wallet not connected');
            return;
        }

        window.tournamentLobby.createSafeTimeout(() => window.debugTournamentLobby.addTestScore(5000, 'TestPlayer1'), 500);
        window.tournamentLobby.createSafeTimeout(() => window.debugTournamentLobby.addTestScore(7500, 'TestPlayer2'), 1000);
        window.tournamentLobby.createSafeTimeout(() => window.debugTournamentLobby.addTestScore(6200, 'TestPlayer3'), 1500);
    },

    // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
    getLeaderboard: () => {
        const leaderboard = window.tournamentLobby.getStoredLeaderboard();
        Logger.log('üèÜ Current leaderboard:', leaderboard);
        return leaderboard;
    },

    clearLeaderboard: () => {
        if (window.tournamentLobby.storage) {
            window.tournamentLobby.storage.saveLeaderboard([]);
        }
        Logger.log('üßπ Leaderboard cleared');
        window.tournamentLobby.updateLeaderboard();
    },

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
    getPlayerStats: () => {
        if (!window.tournamentLobby.walletConnector || !window.tournamentLobby.walletConnector.connected) {
            Logger.log('‚ùå Wallet not connected');
            return null;
        }
        const stats = window.tournamentLobby.getPlayerStats(window.tournamentLobby.walletConnector.account);
        Logger.log('üìä Your stats:', stats);
        return stats;
    },

    // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã
    simulateGame: (finalScore) => {
        Logger.log(`üéÆ Simulating game with score: ${finalScore || 'random'}`);
        const score = finalScore || Math.floor(Math.random() * 10000) + 1000;
        window.tournamentLobby.submitGameScore(score, `Player${Date.now().toString().slice(-4)}`);
    },

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    testBlockchainLeaderboard: async () => {
        Logger.log('üîó Testing blockchain leaderboard...');
        try {
            if (!window.tournamentManager || !window.tournamentManager.connected) {
                Logger.log('‚ùå TournamentManager not connected');
                return;
            }

            const tournamentId = window.tournamentLobby.currentTournamentId;
            Logger.log(`üìã Fetching leaderboard for tournament ${tournamentId}...`);

            // –û–ß–ò–©–ê–ï–ú –ö–ïSH –î–õ–Ø –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–•
            if (window.tournamentManager.clearCache) {
                window.tournamentManager.clearCache();
                Logger.log('üóëÔ∏è Cache cleared');
            }

            const leaderboard = await window.tournamentManager.getTournamentLeaderboard(tournamentId);
            Logger.log(`üìä Blockchain leaderboard: ${leaderboard?.length || 0} entries`);
            Logger.log('üîç ALL ENTRIES:', JSON.stringify(leaderboard, null, 2));

            const topPlayers = await window.tournamentManager.getTopPlayers(tournamentId, 100);
            Logger.log(`üèÜ Top 100 players: ${topPlayers?.length || 0} loaded`);

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            await window.tournamentLobby.updateLeaderboard();

        } catch (error) {
            Logger.error('‚ùå Blockchain leaderboard test failed:', error);
        }
    },

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    testContractLimits: async () => {
        Logger.log('üîç Testing contract limits...');
        try {
            if (!window.tournamentManager || !window.tournamentManager.connected) {
                Logger.log('‚ùå TournamentManager not connected');
                return;
            }

            const tournamentId = window.tournamentLobby.currentTournamentId;
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            for (const limit of [3, 5, 10, 100]) {
                try {
                    const result = await window.tournamentManager.getTopPlayers(tournamentId, limit);
                    Logger.log(`üìä Limit ${limit}: got ${result?.length || 0} entries`);
                } catch (error) {
                    Logger.log(`‚ùå Limit ${limit}: ${error.message}`);
                }
            }
            
            // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ getTournamentLeaderboard 
            try {
                const full = await window.tournamentManager.getTournamentLeaderboard(tournamentId);
                Logger.log(`üìã Full leaderboard: ${full?.length || 0} entries`);
                Logger.log('üìã Full data:', JSON.stringify(full, null, 2));
            } catch (error) {
                Logger.log(`‚ùå Full leaderboard: ${error.message}`);
            }

        } catch (error) {
            Logger.error('‚ùå Contract limits test failed:', error);
        }
    },

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    getBlockchainTournamentInfo: async () => {
        Logger.log('üîó Getting blockchain tournament info...');
        try {
            if (!window.tournamentManager || !window.tournamentManager.connected) {
                Logger.log('‚ùå TournamentManager not connected');
                return;
            }

            const tournamentId = window.tournamentLobby.currentTournamentId;
            const info = await window.tournamentManager.getTournamentInfo(tournamentId);
            Logger.log('üìã Tournament info:', info);

            const prizes = await window.tournamentManager.getPrizeDistribution(tournamentId);
            Logger.log('üí∞ Prize distribution:', prizes);

            return { info, prizes };

        } catch (error) {
            Logger.error('‚ùå Failed to get tournament info:', error);
        }
    }
};

Logger.log('üèÜ Tournament Lobby loaded with full functionality');
Logger.log('üîß Debug functions available at window.debugTournamentLobby');