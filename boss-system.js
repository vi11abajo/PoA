// üëë PHAROS INVADERS - BOSS SYSTEM
// –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ—Å—Å–æ–≤ —Å –ò–ò, –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏

console.log('üëë Loading boss system...');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Å—Å–∞
let currentBoss = null;
let bossImages = {};
let bossImagesLoaded = {};
let bossBullets = [];
let bossParticles = [];

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Å—Å–∞
const BOSS_STATES = {
    APPEARING: 'appearing',
    FIGHTING: 'fighting', 
    DAMAGED: 'damaged',
    DYING: 'dying',
    DEAD: 'dead'
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ—Å—Å–æ–≤
function loadBossImages() {
    Object.keys(BOSS_CONFIG.BOSS_IMAGES).forEach(bossNumber => {
        const img = new Image();
        const url = BOSS_CONFIG.BOSS_IMAGES[bossNumber];
        
        bossImages[bossNumber] = img;
        bossImagesLoaded[bossNumber] = false;
        
        img.src = url;
        img.onload = () => {
            bossImagesLoaded[bossNumber] = true;
            console.log(`üëë Boss ${bossNumber} image loaded`);
        };
        img.onerror = () => {
            bossImagesLoaded[bossNumber] = false;
            console.log(`‚ùå Boss ${bossNumber} image failed`);
        };
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Å—Å–∞
function createBoss(level) {
    if (!isBossLevel(level)) return null;
    
    const bossNumber = getBossNumber(level);
    const canvas = document.getElementById('gameCanvas');
    
    currentBoss = {
        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        x: canvas.width / 2 - BOSS_CONFIG.BOSS_WIDTH / 2,
        y: -BOSS_CONFIG.BOSS_HEIGHT, // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
        width: BOSS_CONFIG.BOSS_WIDTH,
        height: BOSS_CONFIG.BOSS_HEIGHT,
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        bossNumber: bossNumber,
        maxHP: getBossHP(bossNumber),
        currentHP: getBossHP(bossNumber),
        
        // –î–≤–∏–∂–µ–Ω–∏–µ
        speed: BOSS_CONFIG.BOSS_SPEED,
        direction: 1, // 1 = –≤–ø—Ä–∞–≤–æ, -1 = –≤–ª–µ–≤–æ
        baseY: BOSS_CONFIG.BOSS_START_Y,
        movementRange: BOSS_CONFIG.BOSS_MOVEMENT_RANGE,
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        animationFrame: 0,
        bobOffset: 0,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        state: BOSS_STATES.APPEARING,
        lastShotTime: 0,
        nextShotDelay: getRandomShotDelay(), // –ù–û–í–û–ï: —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
        damageFlashTime: 0,
        deathStartTime: 0,

        // –≠—Ñ—Ñ–µ–∫—Ç—ã
        scale: 1.0,
        alpha: 1.0,
        flashAlpha: 0,

        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image: bossImages[bossNumber],
        color: getBossColor(bossNumber),
        name: getBossName(bossNumber)
    };

    console.log(`üëë Boss created: ${currentBoss.name} (HP: ${currentBoss.maxHP})`);
    return currentBoss;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Å—Å–∞
function updateBoss(deltaTime) {
    if (!currentBoss) return;

    const boss = currentBoss;
    const canvas = document.getElementById('gameCanvas');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    boss.animationFrame += BOSS_CONFIG.BOSS_ANIMATION_SPEED * deltaTime;
    boss.bobOffset += BOSS_CONFIG.BOSS_BOB_SPEED * deltaTime;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    switch (boss.state) {
        case BOSS_STATES.APPEARING:
            updateBossAppearing(boss, deltaTime);
            break;

        case BOSS_STATES.FIGHTING:
            updateBossFighting(boss, deltaTime, canvas);
            break;

        case BOSS_STATES.DAMAGED:
            updateBossDamaged(boss, deltaTime, canvas);
            break;

        case BOSS_STATES.DYING:
            updateBossDying(boss, deltaTime);
            break;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª–∏ –±–æ—Å—Å–∞
    updateBossBullets(deltaTime);

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –±–æ—Å—Å–∞
    updateBossParticles(deltaTime);
}

// –§–∞–∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–∞
function updateBossAppearing(boss, deltaTime) {
    // –ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å–∫–∞–µ–º –±–æ—Å—Å–∞ –≤–Ω–∏–∑
    const appearSpeed = 100 * deltaTime;
    boss.y += appearSpeed;

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
    boss.scale = Math.min(1.0, boss.scale + 0.02 * deltaTime);
    boss.alpha = Math.min(1.0, boss.alpha + 0.03 * deltaTime);

    // –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –±–æ—è
    if (boss.y >= boss.baseY) {
        boss.y = boss.baseY;
        boss.state = BOSS_STATES.FIGHTING;
        boss.scale = 1.0;
        boss.alpha = 1.0;

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        createBossLandingEffect(boss);
        console.log(`üëë ${boss.name} has entered the battle!`);
    }
}

// –§–∞–∑–∞ —Å—Ä–∞–∂–µ–Ω–∏—è
function updateBossFighting(boss, deltaTime, canvas) {
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    boss.x += boss.speed * boss.direction * deltaTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (boss.x <= 0) {
        boss.x = 0;
        boss.direction = 1;
    } else if (boss.x >= canvas.width - boss.width) {
        boss.x = canvas.width - boss.width;
        boss.direction = -1;
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const bobbing = Math.sin(boss.bobOffset) * BOSS_CONFIG.BOSS_VERTICAL_BOB;
    boss.y = boss.baseY + bobbing;

    // –°—Ç—Ä–µ–ª—å–±–∞
    updateBossShooting(boss);

    // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è –æ—Ç —É—Ä–æ–Ω–∞
    if (boss.damageFlashTime > 0) {
        boss.damageFlashTime -= deltaTime;
        boss.flashAlpha = Math.max(0, boss.damageFlashTime / BOSS_CONFIG.BOSS_DAMAGE_FLASH_TIME);

        if (boss.damageFlashTime <= 0) {
            boss.state = BOSS_STATES.FIGHTING;
            boss.flashAlpha = 0;
        }
    }
}

// –§–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
function updateBossDamaged(boss, deltaTime, canvas) {
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    boss.x += boss.speed * 0.5 * boss.direction * deltaTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if (boss.x <= 0) {
        boss.x = 0;
        boss.direction = 1;
    } else if (boss.x >= canvas.width - boss.width) {
        boss.x = canvas.width - boss.width;
        boss.direction = -1;
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const bobbing = Math.sin(boss.bobOffset) * BOSS_CONFIG.BOSS_VERTICAL_BOB;
    boss.y = boss.baseY + bobbing;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
    updateBossShooting(boss);

    // –≠—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è
    boss.damageFlashTime -= deltaTime;
    boss.flashAlpha = Math.max(0, boss.damageFlashTime / BOSS_CONFIG.BOSS_DAMAGE_FLASH_TIME);

    if (boss.damageFlashTime <= 0) {
        boss.state = BOSS_STATES.FIGHTING;
        boss.flashAlpha = 0;
    }
}

// –§–∞–∑–∞ —Å–º–µ—Ä—Ç–∏
function updateBossDying(boss, deltaTime) {
    const deathProgress = (Date.now() - boss.deathStartTime) / BOSS_CONFIG.BOSS_DEATH_ANIMATION_TIME;

    if (deathProgress < 1.0) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏
        boss.scale = Math.max(0.1, 1.0 - deathProgress * 0.5);
        boss.alpha = Math.max(0, 1.0 - deathProgress);
        boss.y += 50 * deltaTime; // –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–∞–¥–∞–µ—Ç

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞
        if (Math.random() < 0.3) {
            createBossDeathParticles(boss);
        }
    } else {
        // –ë–æ—Å—Å —É–º–µ—Ä
        boss.state = BOSS_STATES.DEAD;
        currentBoss = null;

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∑—Ä—ã–≤
        createBossFinalExplosion(boss);

        console.log(`üëë ${boss.name} has been defeated!`);
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏
function getRandomShotDelay() {
    const minDelay = BOSS_CONFIG.BOSS_SHOT_MIN_DELAY || 2000;
    const maxDelay = BOSS_CONFIG.BOSS_SHOT_MAX_DELAY || 5000;
    return minDelay + Math.random() * (maxDelay - minDelay);
}

// –°–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–µ–ª—å–±—ã –±–æ—Å—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–û —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
function updateBossShooting(boss) {
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å—Ç—Ä–µ–ª—è—Ç—å
    if (now - boss.lastShotTime >= boss.nextShotDelay) {
        if (BOSS_CONFIG.BOSS_MULTI_SHOT) {
            createBossMultiShot(boss);
        } else {
            createBossSingleShot(boss);
        }

        boss.lastShotTime = now;
        boss.nextShotDelay = getRandomShotDelay(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É

        console.log(`üëë Boss fired! Next shot in ${boss.nextShotDelay}ms`); // –û—Ç–ª–∞–¥–∫–∞
    }
}

// –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª –±–æ—Å—Å–∞
function createBossSingleShot(boss) {
    const bulletX = boss.x + boss.width / 2 - BOSS_CONFIG.BOSS_BULLET_SIZE / 2;
    const bulletY = boss.y + boss.height;

    bossBullets.push({
        x: bulletX,
        y: bulletY,
        width: BOSS_CONFIG.BOSS_BULLET_SIZE,
        height: BOSS_CONFIG.BOSS_BULLET_SIZE,
        speed: BOSS_CONFIG.BOSS_BULLET_SPEED,
        vx: 0,
        vy: BOSS_CONFIG.BOSS_BULLET_SPEED,
        color: boss.color,
        trail: []
    });
}

// –ú—É–ª—å—Ç–∏-–≤—ã—Å—Ç—Ä–µ–ª –±–æ—Å—Å–∞
function createBossMultiShot(boss) {
    const centerX = boss.x + boss.width / 2;
    const centerY = boss.y + boss.height;
    const shotCount = BOSS_CONFIG.BOSS_SHOTS_COUNT;
    const spread = BOSS_CONFIG.BOSS_SHOT_SPREAD;

    for (let i = 0; i < shotCount; i++) {
        const angle = (i - (shotCount - 1) / 2) * spread;
        const vx = Math.sin(angle) * BOSS_CONFIG.BOSS_BULLET_SPEED;
        const vy = Math.cos(angle) * BOSS_CONFIG.BOSS_BULLET_SPEED;

        bossBullets.push({
            x: centerX - BOSS_CONFIG.BOSS_BULLET_SIZE / 2,
            y: centerY,
            width: BOSS_CONFIG.BOSS_BULLET_SIZE,
            height: BOSS_CONFIG.BOSS_BULLET_SIZE,
            speed: BOSS_CONFIG.BOSS_BULLET_SPEED,
            vx: vx,
            vy: vy,
            color: boss.color,
            trail: []
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å –±–æ—Å—Å–∞
function updateBossBullets(deltaTime) {
    bossBullets = bossBullets.filter(bullet => {
        bullet.x += bullet.vx * deltaTime;
        bullet.y += bullet.vy * deltaTime;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥
        bullet.trail.push({x: bullet.x + bullet.width/2, y: bullet.y + bullet.height/2});
        if (bullet.trail.length > 6) bullet.trail.shift();

        // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –≤—ã—à–ª–∞ –∑–∞ —ç–∫—Ä–∞–Ω
        const canvas = document.getElementById('gameCanvas');
        return bullet.y < canvas.height + 50 &&
               bullet.x > -50 &&
               bullet.x < canvas.width + 50;
    });
}

// –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±–æ—Å—Å—É
function damageBoss(damage) {
    if (!currentBoss || currentBoss.state === BOSS_STATES.DYING || currentBoss.state === BOSS_STATES.DEAD) {
        return false;
    }

    currentBoss.currentHP -= damage;
    currentBoss.state = BOSS_STATES.DAMAGED;
    currentBoss.damageFlashTime = BOSS_CONFIG.BOSS_DAMAGE_FLASH_TIME;
    currentBoss.flashAlpha = 1.0;

    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è
    createBossHitParticles(currentBoss);

    console.log(`üëë Boss took ${damage} damage! HP: ${currentBoss.currentHP}/${currentBoss.maxHP}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
    if (currentBoss.currentHP <= 0) {
        currentBoss.currentHP = 0;
        currentBoss.state = BOSS_STATES.DYING;
        currentBoss.deathStartTime = Date.now();

        // –û—á–∏—â–∞–µ–º –ø—É–ª–∏ –±–æ—Å—Å–∞
        bossBullets = [];

        return true; // –ë–æ—Å—Å —É–±–∏—Ç
    }

    return false; // –ë–æ—Å—Å –µ—â–µ –∂–∏–≤
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å –±–æ—Å—Å–æ–º
function checkBossCollisions(playerBullets) {
    if (!currentBoss || currentBoss.state === BOSS_STATES.DYING || currentBoss.state === BOSS_STATES.DEAD) {
        return {bulletsToRemove: [], bossKilled: false, scoreGained: 0};
    }

    const bulletsToRemove = [];
    let bossKilled = false;
    let scoreGained = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø—É–ª—å –∏–≥—Ä–æ–∫–∞ –≤ –±–æ—Å—Å–∞
    for (let i = playerBullets.length - 1; i >= 0; i--) {
        const bullet = playerBullets[i];

        if (bullet.x < currentBoss.x + currentBoss.width &&
            bullet.x + bullet.width > currentBoss.x &&
            bullet.y < currentBoss.y + currentBoss.height &&
            bullet.y + bullet.height > currentBoss.y) {

            // –ü–æ–ø–∞–¥–∞–Ω–∏–µ!
            bulletsToRemove.push(i);

            if (damageBoss(1)) {
                // –ë–æ—Å—Å —É–±–∏—Ç
                bossKilled = true;
                scoreGained = getBossScore(currentBoss.bossNumber);
            }

            break; // –û–¥–Ω–∞ –ø—É–ª—è = –æ–¥–∏–Ω —É—Ä–æ–Ω
        }
    }

    return {bulletsToRemove, bossKilled, scoreGained};
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –ø—É–ª—å –±–æ—Å—Å–∞ —Å –∏–≥—Ä–æ–∫–æ–º
function checkBossBulletsCollision(player) {
    const bulletsToRemove = [];

    for (let i = bossBullets.length - 1; i >= 0; i--) {
        const bullet = bossBullets[i];

        if (bullet.x < player.x + player.width &&
            bullet.x + bullet.width > player.x &&
            bullet.y < player.y + player.height &&
            bullet.y + bullet.height > player.y) {

            bulletsToRemove.push(i);
            // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –ø—É–ª—é –∏–∑ –º–∞—Å—Å–∏–≤–∞
            bossBullets.splice(i, 1);
        }
    }

    return bulletsToRemove.length > 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –±—ã–ª–æ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
function createBossLandingEffect(boss) {
    const centerX = boss.x + boss.width / 2;
    const centerY = boss.y + boss.height;

    for (let i = 0; i < 20; i++) {
        bossParticles.push({
            x: centerX,
            y: centerY,
            vx: (Math.random() - 0.5) * 8,
            vy: (Math.random() - 0.5) * 8 - 2,
            life: 60,
            maxLife: 60,
            size: Math.random() * 3 + 2,
            color: boss.color,
            type: 'landing'
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ–ø–∞–¥–∞–Ω–∏—è
function createBossHitParticles(boss) {
    const centerX = boss.x + boss.width / 2;
    const centerY = boss.y + boss.height / 2;

    for (let i = 0; i < 8; i++) {
        bossParticles.push({
            x: centerX + (Math.random() - 0.5) * boss.width * 0.6,
            y: centerY + (Math.random() - 0.5) * boss.height * 0.6,
            vx: (Math.random() - 0.5) * 6,
            vy: (Math.random() - 0.5) * 6,
            life: 30,
            maxLife: 30,
            size: Math.random() * 2 + 1,
            color: '#ffff00',
            type: 'hit'
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü —Å–º–µ—Ä—Ç–∏
function createBossDeathParticles(boss) {
    const centerX = boss.x + boss.width / 2;
    const centerY = boss.y + boss.height / 2;

    for (let i = 0; i < 5; i++) {
        bossParticles.push({
            x: centerX + (Math.random() - 0.5) * boss.width,
            y: centerY + (Math.random() - 0.5) * boss.height,
            vx: (Math.random() - 0.5) * 10,
            vy: (Math.random() - 0.5) * 10,
            life: 40,
            maxLife: 40,
            size: Math.random() * 4 + 2,
            color: boss.color,
            type: 'death'
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞
function createBossFinalExplosion(boss) {
    const centerX = boss.x + boss.width / 2;
    const centerY = boss.y + boss.height / 2;

    for (let i = 0; i < 50; i++) {
        bossParticles.push({
            x: centerX,
            y: centerY,
            vx: (Math.random() - 0.5) * 20,
            vy: (Math.random() - 0.5) * 20,
            life: 80,
            maxLife: 80,
            size: Math.random() * 6 + 3,
            color: i % 3 === 0 ? '#ffffff' : boss.color,
            type: 'explosion'
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –±–æ—Å—Å–∞
function updateBossParticles(deltaTime) {
    bossParticles = bossParticles.filter(particle => {
        particle.x += particle.vx * deltaTime;
        particle.y += particle.vy * deltaTime;
        particle.vy += 0.1 * deltaTime; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        particle.life -= deltaTime;
        return particle.life > 0;
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Å—Å–∞ –¥–ª—è UI
function getBossStatus() {
    if (!currentBoss) return null;

    return {
        name: currentBoss.name,
        currentHP: currentBoss.currentHP,
        maxHP: currentBoss.maxHP,
        hpPercentage: (currentBoss.currentHP / currentBoss.maxHP) * 100,
        state: currentBoss.state,
        bossNumber: currentBoss.bossNumber
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–æ—Å—Å–æ–≤
function initBossSystem() {
    loadBossImages();
    console.log('üëë Boss system initialized');
}

// –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–æ—Å—Å–æ–≤
function clearBossSystem() {
    currentBoss = null;
    bossBullets = [];
    bossParticles = [];
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.BOSS_SYSTEM = {
    initBossSystem,
    clearBossSystem,
    createBoss,
    updateBoss,
    updateBossBullets,
    updateBossParticles,
    damageBoss,
    checkBossCollisions,
    checkBossBulletsCollision,
    getBossStatus,
    getCurrentBoss: () => currentBoss,
    getBossBullets: () => bossBullets,
    getBossParticles: () => bossParticles
};

console.log('üëë Boss system loaded successfully!');